{
  "docstore/metadata": {
    "b809786f-0419-4709-9145-e8157d52ba26": {
      "doc_hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a"
    },
    "c4ba4595-9ca7-484e-935b-a055614bda66": {
      "doc_hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75"
    },
    "cd34e14d-a65f-4e21-93f8-c306de702613": {
      "doc_hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92"
    },
    "fe616abb-7210-4467-8a8e-869cbc31cb91": {
      "doc_hash": "26e69b5e4ecc1ac108a33292ba3b796c01b85ede9ac7cd8845ec7f07fc8bf84f"
    },
    "f55f850c-bb5d-4c65-8b9c-92f35de143e1": {
      "doc_hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9"
    },
    "63e31b90-e708-4b24-89cc-1e383bb9f237": {
      "doc_hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8"
    },
    "faed24a6-41f4-4f3b-8fd8-b4944af402ee": {
      "doc_hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660"
    },
    "61435d27-a0f0-491e-b0ae-21c5a06674fe": {
      "doc_hash": "a21d14a12154e631235e36ffb552bf582b27e67242bee401aca73f53fe678e1d"
    },
    "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6": {
      "doc_hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0"
    },
    "2c67dda2-cebc-4bcb-90b0-a136cb824e1c": {
      "doc_hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4"
    },
    "3e618721-6933-4289-8f44-2c3a522560f2": {
      "doc_hash": "3dc7fc04432b070d7a16ce4ee9272e309977c3283260d1a0a448dddfb06a88c2"
    },
    "070060f9-be83-493c-bbfd-5213611eb59e": {
      "doc_hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240"
    },
    "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f": {
      "doc_hash": "1a9e7b576c4f9e974465c3164d41e5c2a086924e0a0db2b073b586c27815e0a6"
    },
    "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356": {
      "doc_hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9"
    },
    "12e8891c-1c03-4329-81e7-fe1963b9703e": {
      "doc_hash": "c74e399df799a3b923b3724bbc7befa0ce820153911e8d3797374b7347bac6c1"
    },
    "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce": {
      "doc_hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da"
    },
    "5fb5561a-5539-44f8-bb69-6f1462e84132": {
      "doc_hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2"
    },
    "fbf5438b-1bca-43d2-a88d-98f97a35f19f": {
      "doc_hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53"
    },
    "4eee9a38-808d-4205-bfd6-6f102b06fe96": {
      "doc_hash": "800ee66a886077c75fd364ed51019bda43a8f1e6b44c2be97b3b32ba9ca4c0e0"
    },
    "2955f1f9-17f8-406d-9cfe-4eac441b3162": {
      "doc_hash": "e663a00f63afe7a8d262701403f0d47f7d7daee380984173d006acab702b2132"
    },
    "c4a5fc4c-515a-4d04-913d-fc1585cf035e": {
      "doc_hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb"
    },
    "4ec99f77-fecf-482d-8345-9b715b893357": {
      "doc_hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60"
    },
    "675410b2-596e-493b-8b0a-0c3990436dd3": {
      "doc_hash": "810347984ca6c94a4d4aed50aec8cadbe8a2247661320519f953e0e5c570cc61"
    },
    "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996": {
      "doc_hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1"
    },
    "4da6c89a-702b-40e4-a46f-cc30b9d24a40": {
      "doc_hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f"
    },
    "ca6eb3b7-7d86-4cd1-858f-5d13ead632da": {
      "doc_hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8"
    },
    "7738952f-db3f-4ad9-83b3-e8fb3bef48b5": {
      "doc_hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5"
    },
    "c8d13647-7ad1-4ab8-84ad-a94970c5f9e9": {
      "doc_hash": "199de0b6d97559b07be9696cc029f6f47edeab9dc3d3af69cbf56a3e0dd090af",
      "ref_doc_id": "b809786f-0419-4709-9145-e8157d52ba26"
    },
    "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219": {
      "doc_hash": "751564ff3c102751ad766a38b569165858c8ff88c6f2dd11b7bb5c5732b3ed20",
      "ref_doc_id": "b809786f-0419-4709-9145-e8157d52ba26"
    },
    "f62a56d7-421c-448d-8040-45eec0049950": {
      "doc_hash": "e0953676d0bda7d1e15f6c4aa4314cfec90246fb33e1bea4065f33606dbd123d",
      "ref_doc_id": "b809786f-0419-4709-9145-e8157d52ba26"
    },
    "3a432b4f-1d15-4fdb-b22a-60260e79a243": {
      "doc_hash": "0bb78363dac03889463efd30de464f698496f05e87856e7d2a224612c1625dca",
      "ref_doc_id": "b809786f-0419-4709-9145-e8157d52ba26"
    },
    "2497c312-b311-4e27-9852-4dfef272acbc": {
      "doc_hash": "f366fb67cc98670bd7ddba365103fa6b9004e18295afb9095fae7a6c16ca6148",
      "ref_doc_id": "b809786f-0419-4709-9145-e8157d52ba26"
    },
    "d6aaa9bd-e5dc-4388-a265-0eec11f922d7": {
      "doc_hash": "a83a5928424032a8e8e0e512f3dcbb0d2a66b79ae37e3d5f53c9ff312942e29e",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "7462b66d-9ad6-410f-9ceb-ccc834c899a7": {
      "doc_hash": "9f86deee0760d2cc84356810842735aabd70815a4e0fa6d9b55a4858de1464a5",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "75157767-dded-4c39-b43e-88cc72a9bea2": {
      "doc_hash": "08182657193bd4212dbdebb8524c994372202893bd63eb0b4ba0f6548aff72fb",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "4bc9adf8-6c71-466c-a373-cba39f77d046": {
      "doc_hash": "4192ab5f9796bfd844b134b8672372e1a85900707f4d6ec6e34b988c67dc5f6d",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "4d392551-daf1-4443-abe8-7dac3a5956ef": {
      "doc_hash": "d416dd1d7827a0a40a38cbe14c99fef33f443e8c4697750ac5c3e7aa21ac8ff3",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "39a71b21-283f-4275-86b2-ff692afcbea9": {
      "doc_hash": "9315165af06c753f10bf9eb6b6edb2b7cf2e790c2cd863134561e452ebc084b3",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "a41d9aca-7986-4114-8fd6-07a67f82d394": {
      "doc_hash": "de49957df93f6f1e8ba391a1b4e744ed2e3bbdaaafaa880f556bc7cf8bbd6015",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9": {
      "doc_hash": "3fa608968e8648f513fe50625d0c635a57d41a42f6e9359ea86654798145bec4",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff": {
      "doc_hash": "82aa4c80d12dcf23b1746de9f014629f9112c7b1fc1fb93b46cc33f020b70a60",
      "ref_doc_id": "c4ba4595-9ca7-484e-935b-a055614bda66"
    },
    "d825183c-f2ad-4af6-bd58-5972857c4e21": {
      "doc_hash": "47c4f149305ed523a46dc10c3b0e3e3a4da2389e25dadeb032c700c42fc20a3f",
      "ref_doc_id": "cd34e14d-a65f-4e21-93f8-c306de702613"
    },
    "0a79d729-0631-4479-a8e9-a660ab1445b3": {
      "doc_hash": "c64fe720e9748a40901f35cfeabc045b5226631fbd0126d5eab61ac2bb963128",
      "ref_doc_id": "cd34e14d-a65f-4e21-93f8-c306de702613"
    },
    "43b96eaa-5ec1-44d6-94c9-52e885e3cea1": {
      "doc_hash": "7d1c4781ddb1eb956330f216c81b42aa09ddcba66468411f4d7814a3301a6577",
      "ref_doc_id": "cd34e14d-a65f-4e21-93f8-c306de702613"
    },
    "3436c4b5-7ac3-408f-8bca-c14986fead25": {
      "doc_hash": "2ae2b8a0654464114ab883090ec14e256683cd1345c60cf732a13a02a98dab6a",
      "ref_doc_id": "cd34e14d-a65f-4e21-93f8-c306de702613"
    },
    "ed810bc0-eb72-45d8-90b2-999a60068a2b": {
      "doc_hash": "6b18248e20e860cef1b45ca0baa652ac249cc6178d78e5816f1ed3bc7e02cd82",
      "ref_doc_id": "cd34e14d-a65f-4e21-93f8-c306de702613"
    },
    "d5868ba2-8879-435c-841a-fe4ecf9e677b": {
      "doc_hash": "caa531074c0e55ca19df3a7e9b332a7de386b524f8c0cec944a390023c215371",
      "ref_doc_id": "fe616abb-7210-4467-8a8e-869cbc31cb91"
    },
    "8fcb6784-76ee-4e3d-a540-7140fc8e156f": {
      "doc_hash": "9b68ad146aa482c3c094bb18747fe98e8edf604b819d0fc35d02b2f22818e1d2",
      "ref_doc_id": "fe616abb-7210-4467-8a8e-869cbc31cb91"
    },
    "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572": {
      "doc_hash": "f89d345c702de832660a64863fbc51d4ab3e4d7eff9470628e25ca4e40195958",
      "ref_doc_id": "fe616abb-7210-4467-8a8e-869cbc31cb91"
    },
    "d79773d0-4aed-4f57-b8d7-c055a16f53e0": {
      "doc_hash": "c7f140d56569c6025e40c63a74a9ba97c223aa49c3465f59c4e598130acb87db",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "1eba341e-d6ca-44a3-928d-d5bfab234753": {
      "doc_hash": "a4ce68afdd8d45beaaf902a97833913b3f286fa486e80eed8ae6342933a3b8c8",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "fe100cbc-74d2-41bf-a40b-70d8170d7b31": {
      "doc_hash": "e4c42f3409e1483aa58fec22e02b76f7a363420d947df05fcfb147cd56bb5dfd",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "3e189d7a-020e-46d1-9904-2e908115d370": {
      "doc_hash": "5e9857d757742afe506b3336bf7ab25007cf091afae3da575e1c7bccfd87fe97",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "0e75adab-8998-455f-b73c-4e13bcb189ab": {
      "doc_hash": "0c9d29232fef8438013a77fce320abbce59127515445b067e701e4c50b2a7408",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "1e92140d-6f5e-46bb-9a95-f0f06f5746db": {
      "doc_hash": "d15326e1b3c1cbb6b748cf72bbc7a6befd82ed62d77c31be5b46610b067f8b16",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "43773776-973f-420d-ad88-aef356e711c9": {
      "doc_hash": "63a8b1b9f7e48d310533234af4e6eba8cde9eda7290c5fdb3cf67448b1a92e9d",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "2117b6f5-f483-45bf-ab97-a8379528a517": {
      "doc_hash": "2a06ffdc25a46346641c4050bc0cde0f600ebb4a57d3296ef5c2e91c6736f9c1",
      "ref_doc_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1"
    },
    "58074a32-3c79-41fd-b1f4-33e803d124af": {
      "doc_hash": "7af536eaa76018a94ba7e6cd8c5ae2fa05b88e1a60fafce6e89fbebbc8216813",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "a33e930e-3141-491d-bb88-4cc2fde13111": {
      "doc_hash": "3c414c14d00ecd2d628017e9176e55ff74a3d8149cdd4125f0edb5788855fcd9",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "5e5d5c28-e238-485a-88b0-46cea135634e": {
      "doc_hash": "9ee0e4f682a133060b7a617bb6e4b04ad68cebca3503b2b0933d0ec16c527395",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "845f2b9d-770b-4274-9e68-8c56039832e4": {
      "doc_hash": "1458e19204558e87ceea1189d7ff5deace89836e010a500f86401cca55355841",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "cb58775b-b524-407b-b9fc-2ab8eeb52c4c": {
      "doc_hash": "039e7efcd3d0601d494c5b33aaf4d7a9d33d47922436228c38b5cd2591b4838e",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "d6693392-0548-4317-8f58-471434dd9e7c": {
      "doc_hash": "86a6a91a8dc1e87d9aff6d791469164c09165146c264becad4d87cd4034792c9",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "18dcc255-3559-4715-b452-baedecc77545": {
      "doc_hash": "7a0457362cd9761745ef3eab738eb41b3337dd2401f8284712e3695df665e485",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "bce02060-3326-43af-870e-a03cad701b05": {
      "doc_hash": "828f3cf7def5356914caa032b593a698c9750841fd8e0f1e467071e076bfc4a4",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "e3dd77e5-4225-4b6f-921e-9db7edc76117": {
      "doc_hash": "c7adf01c1ff7c0e9f8f1fdba90da89319fb03472e7e544ba8649f1e647e8d81f",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e": {
      "doc_hash": "ca7b7f805dae4b13c017c0a818225cb7c4aafa230eb087fb6b919046917a1c54",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "d195d40c-58be-4647-a367-c03fec0b3b70": {
      "doc_hash": "896c1ccfc4f8c66904c39e588b3b7a727b30780de6baea4748cab8fb3a67e49a",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "85311773-cc40-40c8-9184-15ff45fba6dd": {
      "doc_hash": "76da647c262f1cb9b2c6cf043b0841009a27f87b853ae948827e9d6056bde4fd",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995": {
      "doc_hash": "bfec6248b612d99f4cdbbc63d38d8d4bd1d73892e1dd22afddae0b15d7df3faf",
      "ref_doc_id": "63e31b90-e708-4b24-89cc-1e383bb9f237"
    },
    "48346ec0-5a70-4849-95c6-46a53791dbda": {
      "doc_hash": "410634def26ee2b6b33e31952fb1b8b8b21e7de75f0e4e595c9441657f5ff15e",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7": {
      "doc_hash": "d8e72d3131f8740f2ae22e27fb78b9da8390cd46e26d546f1cd31c470f382471",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "0655b0e4-6783-4fd6-a9a8-d6eee5b45921": {
      "doc_hash": "012b8d99f5aa6d10810819f3c43359c4bab33a74c500085a294d23b5f5dfee43",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef": {
      "doc_hash": "d038f59150a56ad2b931cc76bd236bf7b1bc7c658baccdf64708220205520fcb",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180": {
      "doc_hash": "f6a1849581565aeb966b3f3f76eaffcde00a0122a9b70158fddce03b2401448d",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "db03df28-87cf-49a7-8db2-91abd8f871eb": {
      "doc_hash": "7cf5618ebe26201238390680fc610be62cc062f3c255f38cd5d8a45b84e269b2",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a": {
      "doc_hash": "9ebfe518702be9744d609642a60f350c0225b404d36eff4507fa4d07e10948be",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "e3dc24c2-7188-4e06-8c16-95b620d60c9c": {
      "doc_hash": "140c9542600307e8cc157f3e4c0a34252e78db97ebc257af45ae5ad7945dfe39",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1": {
      "doc_hash": "3d8b6bd2d0dd629f5358661eafb5e764b657685209a0a6d562b900e20f20aa97",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "c7cc85c8-d045-4646-a3cf-ecb33f0e261b": {
      "doc_hash": "90fdc75c5c53b58f355dc170e9a416605ecd3bed313ee178b05a145e20d08ad8",
      "ref_doc_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee"
    },
    "31bffcaa-ca8d-4ffe-890b-a31409513851": {
      "doc_hash": "e3303ef960deb79a60df0969f4389d0fbdffb1b1542fde34b11e87716e663c56",
      "ref_doc_id": "61435d27-a0f0-491e-b0ae-21c5a06674fe"
    },
    "08459d71-4c98-469d-a923-2c7913612f4a": {
      "doc_hash": "dcd7af26a7cc68cd4de1418f5d1bca293e81751fd81fa12fe345d32b675ef60f",
      "ref_doc_id": "61435d27-a0f0-491e-b0ae-21c5a06674fe"
    },
    "2260fb63-9f1d-43ec-b992-7857a3a39610": {
      "doc_hash": "4931cd11eb4be60478c7c0db9fa372c2907c0085d52736e960824da98f3de2a6",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "2537259a-f63b-444c-82c0-039bc9586ed9": {
      "doc_hash": "348e6ca74a7eacdf6ccdf301e0c0e119c36508e4dba04139e75ed9fa3b12cea3",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "8fa8b23f-b3fe-4699-bf32-79fa856199af": {
      "doc_hash": "5ca27499b181533a821c31f11379c2d06678266b177a5bc7db3a9804f53e6dfd",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "ddf7e5b0-98af-4830-9f58-1e4dbc326df8": {
      "doc_hash": "35f61ff214ff2991ae5cd2af42a45222cc412c522adf58f8ce8db99222d7bed5",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "6672c195-0f1d-407e-9fea-615b357ef033": {
      "doc_hash": "083f85388d21f1b43f69ecfcb48e88cd9dc8af1780c7028139f9641e9e1adfc0",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "c7bf92fe-774f-43ce-a757-092e1c88e11d": {
      "doc_hash": "94c7f2216843f59261b6e5ae7c60a69aceaa389cc3763f63b9af349cce0861ce",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "39e9e7d7-6ecc-4065-a99d-b93be3d88231": {
      "doc_hash": "f0a332fdb2e97bda718908d27859eceffaa142b408edd73b72b7c5944313a561",
      "ref_doc_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6"
    },
    "9da0aea8-af9c-49a1-97e3-517097b0d6c1": {
      "doc_hash": "ea5a91d8c5fcf9f00e2770a9a0d6d133a80aeb275493b96e866ce8fb11f48cf3",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "b81ce6cf-58a1-46bd-95ef-7de922157172": {
      "doc_hash": "534e10e5747a916d7db41a8728ffc577aabccf4325846c6457e7c028284d05b2",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "739e7a32-21db-4a05-9e76-acd0271cc3d4": {
      "doc_hash": "c33e0fd2f47b13d21895d62a24f5fe6d25711a25c03f8e484da3446f806e71e6",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "b35d6054-3c4a-4bc5-acad-48d3e2306141": {
      "doc_hash": "b8f1803d136a5c6488b1221af68aaac4950db8f0f947ea648175e1d3eea14607",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "09153e46-075d-438f-91f2-2e7537d2f550": {
      "doc_hash": "a9285c5472399cd120e6fdab023aa9dded6f31be7c04d6c9b462f2891f50338d",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "f9ca7807-3a62-4021-8141-7967ea91bd1c": {
      "doc_hash": "2b9341ed9a83bab3d47a40af089a8b391126cddec68497740f134583b8504b1b",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1": {
      "doc_hash": "a7c4d3c2fb1a3773c7aebebddbf6dfb6dc504879519a42d4035f09c1f71e6181",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "0843f367-b0f1-49e1-a25e-38e3df5f4da9": {
      "doc_hash": "37929136a75f6c4db5f7ab3870bd6320f6b5bfeece5499c2cbde8f6eabc9cd22",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "45b5b822-819a-4a0b-a28a-fa937e4aba70": {
      "doc_hash": "9f77332b02a5ffad288fa35b2637209096db370d49c7e465d84b0c9cb4f6fa06",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "c9440268-ea98-463c-80ca-52fbb14b37a3": {
      "doc_hash": "7b9df3789117e8c41ee1f259338f64416ad65e31c31eef27e535c50edca40f5b",
      "ref_doc_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c"
    },
    "b1dfac79-06c5-401c-ac7f-81564dc6e7df": {
      "doc_hash": "56fa961f0301ee9ad435ec3c0c88d6a4ab9b564cb16027567b900a93293afdee",
      "ref_doc_id": "3e618721-6933-4289-8f44-2c3a522560f2"
    },
    "58503ed9-8447-469f-9d86-49495fbb0874": {
      "doc_hash": "d88358f75a9ab0e113bdfef4334cb6c6ae9b2d2c25c3c96873d9cad47d8b44f5",
      "ref_doc_id": "070060f9-be83-493c-bbfd-5213611eb59e"
    },
    "4e45d12d-0e82-4d54-a423-82057b75c96c": {
      "doc_hash": "0e1a13de613e3ace0b3db6789e2e9261e47abdaac15e0d8987159d17d06424d6",
      "ref_doc_id": "070060f9-be83-493c-bbfd-5213611eb59e"
    },
    "55101789-8dc2-429d-9a8b-d5623c1ba66d": {
      "doc_hash": "22760ae4295c2a4c002523bbfeee378f323875e705fd8100fc6988554dff33e8",
      "ref_doc_id": "070060f9-be83-493c-bbfd-5213611eb59e"
    },
    "c3a44332-4b51-4967-81e8-369507b503c8": {
      "doc_hash": "3de742b6c4696581f39a29628104e58b4fe4139196cae6f4ca6b23b88a32a0fc",
      "ref_doc_id": "070060f9-be83-493c-bbfd-5213611eb59e"
    },
    "b5e6b215-0d07-4033-8507-9df9bdbf1159": {
      "doc_hash": "4f87040dde2e9c81bf801c3a576adf4c18b4af2f93435f8910dc007a4018cabb",
      "ref_doc_id": "070060f9-be83-493c-bbfd-5213611eb59e"
    },
    "8785c7d6-0d25-45a2-81af-e74acec0b17d": {
      "doc_hash": "8041e726cf467ad05d577bfce9edb8beb0975231a6c70e3a2e4e59d794f6bdec",
      "ref_doc_id": "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f"
    },
    "d9344f98-b8dc-44e4-ab86-8c23b7d646cc": {
      "doc_hash": "a40e1b5eb9c534edacace6560dbf28964927e43cb97fb472502bc9656a96a7ae",
      "ref_doc_id": "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f"
    },
    "2bc15fee-b800-42db-8473-d85696cfe92d": {
      "doc_hash": "7788c55374bea969349f6818472b72015f29efe4528413a8aaf93dedad1fc3ea",
      "ref_doc_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356"
    },
    "cb40370d-5c8f-45ec-8093-73c8448a02fc": {
      "doc_hash": "4b58ae107e37950baa79a7f21931bec04904ae65420c1fbd179457a8111bad79",
      "ref_doc_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356"
    },
    "807c6ec8-5a3b-4098-82ed-1d4270438790": {
      "doc_hash": "b8fd0f1dc233717012a46073357d24f1b4d02b7c0dad600a4e4951c1ccdde92d",
      "ref_doc_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356"
    },
    "016d159f-293f-45d9-af26-9be407742d5e": {
      "doc_hash": "43a54e3f22163ecac1cf6b016128c3cc90e3f93b3a93a5e42792f2eb7f3d7995",
      "ref_doc_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356"
    },
    "2414e950-98b7-436d-ba18-de3485c35513": {
      "doc_hash": "14307561160f77d71ce963610b86ab4cc2105e0295cdc310e99bd1177db7ca01",
      "ref_doc_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356"
    },
    "d545e65f-9b87-41d1-b840-12f95d36c6eb": {
      "doc_hash": "92c7ccd18c77c497ed1bcaf4c77c098588311a857433a153dd58fbe262598b9a",
      "ref_doc_id": "12e8891c-1c03-4329-81e7-fe1963b9703e"
    },
    "5491c5ab-7e6e-43e3-821a-8441a9ef7519": {
      "doc_hash": "be41d46d6e41a23a6b0a0b26a093400f90d8e78500874029be065aa94f137c5e",
      "ref_doc_id": "12e8891c-1c03-4329-81e7-fe1963b9703e"
    },
    "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4": {
      "doc_hash": "759af1e722f449063922ab0ff690f01087cf30d21cf5128fbc482fda6a72fc26",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "97dc403d-dd4a-4474-9732-5961f25413b0": {
      "doc_hash": "2915747ff73ea5f7061091ef4c69f7d718f6951b85eb6ef6385c85fb0fec3700",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "eb3977da-715c-4778-8726-b82dc5678d6f": {
      "doc_hash": "ac46ec18443588d989073fef0c5734bee8c6cab91b107dca3e7472d13b41053d",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "5c5e1212-45fe-4164-94d0-7dc6da6510cc": {
      "doc_hash": "82e4dec3f1be2b978ff66efc1d8cc9f562668f2383f54cf12cb695f02dc26d9f",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8": {
      "doc_hash": "ae5610bfdb93981077182e2551a167cf092c83df3f312960e88a5e47c1c367b0",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "30bea738-adb3-49ce-b4c5-2cb02c62296d": {
      "doc_hash": "15560ffa086703a06a0c2c2da99772950a4f7a4a240499ffc6f099277785be67",
      "ref_doc_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce"
    },
    "6266fa60-fb2c-435a-8b42-9a0728ec7f67": {
      "doc_hash": "cb39610ee50c7f95203187247b609397798b5198e9cf915c712d1da78fed29bf",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "0ca14135-c1e7-48ce-8afe-b260ac093908": {
      "doc_hash": "7de644d56d3685ddeed9c3f5261cd1528a1eb4e61faa04068460ca5a142159db",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "e7bbf55c-0555-43f3-ab52-3fc85bba8e54": {
      "doc_hash": "60b5bb31c9129e36b8bf7e88878b7c4e1fbbd66fc6579f6617c6987ef3f4085f",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "f1384e4c-89a6-4248-86ec-5530dc41bedc": {
      "doc_hash": "8475d369bb85626983532ef51543a71e486805d760ae62fed77bab76d89de73d",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8": {
      "doc_hash": "5c18c4f20f7297325881116f630a1577447f53d53f8ebc2b3fd9ffb840806e50",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "b3717357-f19c-4530-bfdd-45b407eecb47": {
      "doc_hash": "e676dbae5fa6e7bb2246c6c89c7a3d253d9b3a2d8070a4e543d3770ceca9e206",
      "ref_doc_id": "5fb5561a-5539-44f8-bb69-6f1462e84132"
    },
    "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2": {
      "doc_hash": "4559eb282071ecc91b5224aba5658bb6fffbe3c54e5ef1c20d367a30bd67b3a9",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83": {
      "doc_hash": "f8f9054d6cb0a65339b77e0d2c9c2a6e93fdf8b31b6fc55f9fc017ba229ea2ce",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "f930b218-26ac-4a55-913f-ebb285f24de0": {
      "doc_hash": "372927431b828abf824133edbadf0be12967cd29a79dc9dbff467598a27e7b8e",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6": {
      "doc_hash": "a2ababf8fb85e894da4ed9f730320ddee908cf1c4f42ee14343a29330eba7569",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "640c98cf-9553-49d8-97f4-ad858fb8ed42": {
      "doc_hash": "b77cb7227e9d40489706e2e0dd50092b6ac1723dcaadba357102adf80b870a21",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "956e03d7-630b-4cdf-a595-7396eb2435ab": {
      "doc_hash": "8acf2cb4476f3479f5db6746a454070a519bcb796fd979bed0b0729ff1873145",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "b2f9388b-55eb-4863-9400-016539f4ecea": {
      "doc_hash": "c4f79df12661f6a686a4bdfd9455a00491e6945f667103167270b27e7fd2039e",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "63dc5976-0aed-4779-9bd4-11eab2368fd8": {
      "doc_hash": "5b5bf1a340eaabf50300bb3b64e3eb8b45069430dc103ab8fbc11f98b4f2c043",
      "ref_doc_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f"
    },
    "ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2": {
      "doc_hash": "aa2fc8bf072f656140e13bfb2696b48e29093f5f4b55b0767f31076cc38a559d",
      "ref_doc_id": "4eee9a38-808d-4205-bfd6-6f102b06fe96"
    },
    "038d0cad-dcfd-42eb-842d-10ceebf9d1c8": {
      "doc_hash": "73393e89720214477942e4f191ae9e56bf6d31e07b0f2ec149b0d16b3ea4e711",
      "ref_doc_id": "2955f1f9-17f8-406d-9cfe-4eac441b3162"
    },
    "001911ad-fe0d-41d8-8799-743f347e274d": {
      "doc_hash": "ff03525271d26d9494fc255e8c6ab481c668c005611e308ff2ed622cf6260ef9",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "49ca0de0-7091-405d-b0d4-82aaf63f96fb": {
      "doc_hash": "4cfd482b2ea83f8da6c62ae77dfa22ec599ac7fa3508c5c93ae9288f528bdd2f",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "a571e22f-f6b7-4f59-b77a-75ff196f623f": {
      "doc_hash": "72f0f870fd29e986879ed9ea7feedb48f43b9b1bd34eeb71fdf5f251d3136376",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "3679d4e1-6415-4993-80a2-9bb483920080": {
      "doc_hash": "0e8b5dc4936325ccf92a829345153f1af472e7122e7a983d4f6a04f83d2e7c31",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "bf1b101e-c592-487a-a555-ab3968da1332": {
      "doc_hash": "3fd1c3539665c0539209188efcbcb67036c5502ad8b2be2d9158e1ec2ce46902",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903": {
      "doc_hash": "727f6fe68c05c3cef80b9fbc9c1d6fd6091b6c83eeefb375ddc3d69664b948be",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "1f4bfba2-3e5e-4925-89a8-73161cbc762b": {
      "doc_hash": "b0fc079d7f8a46f3579d8cc4afd8b198d30ca2dd676ed5c15d5762ff2c34555b",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "ebd8a76d-2377-4ab3-8353-68199c4f82cc": {
      "doc_hash": "f1d7a0266cb346ffed6714e14a91189689837013e7448542a93b1544ee799f01",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "ea58997e-836d-45c6-a5c5-9aea900c68d1": {
      "doc_hash": "26eab53fc5cd546e6f3ad13dadab614bf52786ddb0899c55729cf53081132a80",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "e89492ef-ec34-4846-bccb-77d98bebdea6": {
      "doc_hash": "dd8adcd568c866f437cff124e72ab120e98d25b17c17a205f571627f064871ad",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "a1d75aef-b074-4f53-83f9-9b37bb7cebe0": {
      "doc_hash": "3fe524d9e71ca84b5ec64ea6994782fc1cdba3ed2da4e86b6126fec46ce447c7",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "3eee5d97-4fcf-4f68-b8ae-4a361882f81d": {
      "doc_hash": "e03cf334e1fde26d159a31fbf8b2440573090abed4e7d616c5690f6a5e7b86d4",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "01d0cf15-5368-4755-adef-b598719b3d15": {
      "doc_hash": "c4cef535d15d9d55e933d26c6f079b3fbd58f714ef8de00b553b29d7b697ef61",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "f64f3cfd-812d-4232-9d9b-a3fad6f17d19": {
      "doc_hash": "f641395428abe5ddc2ede6c0451e04a06d02e464054cde7f9a6e50ef7bd2f20b",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "0d294764-3db7-4738-8456-a70e444b0210": {
      "doc_hash": "94f415838f12d7bbf24a07b6d71af60f02dff6bd0254fab55d52a87dea42185d",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "5a2f200d-58d4-46f9-8e02-ab06be757e72": {
      "doc_hash": "211c6a4f99f6c22ba661634af60a2b1c8b54433814817dd1e46ea70f4b81d7a0",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27": {
      "doc_hash": "e149aaea1fb448127d53d76772cfd254092813970e1be8a6b38531f5fd3e4970",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "6811ba89-1843-4937-94f8-6dcfb72d2d0e": {
      "doc_hash": "575543550c4357e352bdc607a1fcca4fe050f3a3c9d9d418ef60a9daee20e9a7",
      "ref_doc_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e"
    },
    "f96265c5-d43a-4e42-9bd9-350aafc277ab": {
      "doc_hash": "c5a0fa16dc8ac07f7b400985a946f226df1874c51fa1be9dd0bd7d8f7f48c8ad",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "a1677329-df20-406a-a4a6-05c587756fcf": {
      "doc_hash": "04d841f7b73b722fff9d87b1252a46b022f94a78921f7d7cd67e726a7b90928a",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "32ec23f8-e456-4acc-9c38-fa5019e6ec28": {
      "doc_hash": "0e03fdd77324ea921af4eb2119f8d43f631db3a01998fffc48d5becf01a65a6c",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "ee6324cb-cfa3-4721-974a-db01834600a4": {
      "doc_hash": "9ece4a2993be7c361a41783f02f4dcfb8aec007914bdcc203f054ac247692db3",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "5c74fb88-e897-420e-882b-3945dea9c505": {
      "doc_hash": "e00764a6f37e887b3158e3db952b7522d17e3c2819595876fb83f603b5310cd9",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "85a82ba3-b051-4df7-ba6e-7a0bcbc27353": {
      "doc_hash": "d3efa2b8b9b7cce90286b2e5d170ce26ddae377f497d75e7833feb948eb34455",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "d8dd091c-aa13-44d1-938f-a12292d48d95": {
      "doc_hash": "19cd63ffbebf9d15f6f7bd89e81f500722a5be10f7fb80557d66c8ef6f202d87",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "98320e0a-868d-4352-a07e-071e5897432d": {
      "doc_hash": "89905406af15eaf8bc4dd48c8c826a1758a00d927a9db493d4ed7638609ba888",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "46c5a59c-4489-44df-a1fd-dc958dd937c9": {
      "doc_hash": "cff3c55cfd32d55c8c39505f2fc9c69484f729dc87e7edbc3f86cc17dc3c4b95",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "8c101002-338f-44e2-aa49-eea62c29b026": {
      "doc_hash": "38b98774bb03e2095eeb667d4061aada95c6b7c44a2c4232a735a768c02837e0",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "20952efe-090a-45aa-b177-e53ec486e3f1": {
      "doc_hash": "f3d3caa3c3fc79ec09ffa9e3be6208f5c722dfe6cb139858a63488f94a79fb80",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "f7adff25-5877-4d67-a53a-1a54527b2cc6": {
      "doc_hash": "00ea49654d78689de6510f212c1de757a5de6a18b1b82fd1d5a7d05258c5a2fe",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "55164bf4-f736-40f9-9876-a5f6c32c463a": {
      "doc_hash": "b82d21cd37cde05129223768d4f37685a2bd6d9f6690cd62c029c722cf69ec5c",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "59d8dd96-da6f-49c9-8c16-c219c359561d": {
      "doc_hash": "b1d165fc35295c3de2e08c4bcb3b397087fda4dbd0b06a0a66b77dce2a9dcd6f",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "eec8cb18-5fef-47f2-8774-3e3d70b92ec5": {
      "doc_hash": "aba1c0eaec3a91f258d77c41339f726c1cbc1b35f1bc4a9a55a86e9098935d8f",
      "ref_doc_id": "4ec99f77-fecf-482d-8345-9b715b893357"
    },
    "12269a25-c023-442d-bd65-064bfae06e67": {
      "doc_hash": "3ccbab2557ec321e1c33d53eb33a3a60dea6f08f945f0a660ce9177f43f47ef7",
      "ref_doc_id": "675410b2-596e-493b-8b0a-0c3990436dd3"
    },
    "476220ea-1795-47f7-997b-8eb19792ef78": {
      "doc_hash": "fda36aef4355e8f84096bf3d030d78bcc9fc2b383aba7de7e16ddea3eedf74ba",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "bbe211a7-04dd-4fea-a58d-54870d8ff0c6": {
      "doc_hash": "a688d6bd7b198f446ff7e534235b9f4d541429180b2cee1322c9f0672be42980",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "21b34534-9d4e-4e1e-9763-792a8f50b398": {
      "doc_hash": "f2ddae1c75a41a972f3e4d05e720c163f11bcb51d5485a7daeb1bf88dbee5c7a",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd": {
      "doc_hash": "48e8e0fa4614a64a156e8c60d4bf1e6a94eee94c106dd653ef5c7a157ee923d0",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac": {
      "doc_hash": "68f2b747ec4d8ffbaf228f2da9416b3cb4b47dce7871a7365718fa92ce179610",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "f0bf7748-c987-4c01-9cd8-09a87939938b": {
      "doc_hash": "16ac868ed623f9c9da3f7cc6d229b039d93a7de3ae36f706ea0acaef3345431b",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "3295a522-57b4-4146-a414-09bc00dbc9e7": {
      "doc_hash": "ba60b96a03058a24245132d1a2b7f31413a575c9972648b3774cb4e676003b7d",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2": {
      "doc_hash": "e5ff1f152de9a258311990d1053567f897f426f391c91a136e22a73e4ceb0d75",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "13afaf92-1e65-43e2-831c-2ecd72c108a2": {
      "doc_hash": "332f0b6eecb01fff9606f112dc102b60263da76397b1290dff4193422af8356e",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "d7a173a7-0882-41b9-b755-1972cdcf4e78": {
      "doc_hash": "7143e3c7521de3d3893bd5224414684488647d1cbe5033f668ef8882cdfab5be",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "7477f664-2d4d-4946-93fb-10f0f7c7fe2f": {
      "doc_hash": "2f4f87ef38ed219d25f246a5e6a0dc24eb9a7bcaa2e56612ff1c76d24061f8a1",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "75be21ee-7046-4af4-b9a7-834821f39c3a": {
      "doc_hash": "2b1c045be85ea61118b234f5fe1b1bbcba0da6776dd6d4bf0a52d97697a69944",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158": {
      "doc_hash": "9221b08f8b03c3e02a8f8f14db3a063266fe86007df3002c074e28258316bb2f",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "d2d18186-43b6-41c4-9c61-81bb3209005c": {
      "doc_hash": "fe2ff7405095b87e5a9b30525489e3745e90bc41b981cf2d0a53f032c2ffe9ab",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "05d59f98-d186-466e-9a1a-9f5b18b56bce": {
      "doc_hash": "326ed0a93eefaa062389463dfb93782523bbfafb95745409273c9c7b1a0655b9",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "06557d00-501d-4f76-9ab2-2ce90e7751c3": {
      "doc_hash": "1a2cee1a38fa8ec9bd58a67b8926e19fe6b07a42d9aeb4409a8bf6811a2d5a58",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "2776c4fe-b24c-493f-bd44-2c252984cc06": {
      "doc_hash": "75c45d5bf5617fe741b449235994a095195140c81e4d4747e9247eda317a0f94",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "8d4cc9d1-fafb-459a-b65f-7748250ff308": {
      "doc_hash": "b7a2ebe86afac9d57ead272e020ce8295a91f3ba3d4c44e2143472449a6d98b9",
      "ref_doc_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996"
    },
    "c695a9b6-67a3-406b-af48-f2d132267861": {
      "doc_hash": "7fd7d218d563ea98e0be6fcbd814092adbb5d6fce2b995132db09194c00bf3e9",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "02af39be-8f80-4e64-8db1-726897aaa0fe": {
      "doc_hash": "553c8532c9f1392b319e530d0c1198583db5a85e16c33c9f15c53c66b56fd3d3",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "4f5b559d-e60a-4a57-9b99-6c0427112512": {
      "doc_hash": "1255b7745fa17f15e7b4e72d8dfff8decff05365f0c784abaa40b165a739d137",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "dbfad54b-ca37-4852-9162-92cef747df8d": {
      "doc_hash": "d1dd8c536be8da2f775539387e338f3827c0e2a45a507fc7eb5e9c9e11c8b39a",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "6be5647b-832e-48ae-aa43-e107420df194": {
      "doc_hash": "bbb6329ba1815fd9f0805ac255498750d5927ab9de383f02003a39e141df4efd",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "16bbd799-fd2f-4b40-b959-54097655bd69": {
      "doc_hash": "415a5de2a3b4ee94b5ce0140104f2517b5c7e88e898fe3df6bd1dfc8497ccff1",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "a39df619-be28-4174-bb5b-e63c1079ce09": {
      "doc_hash": "ff794dc1f171c6dfd9106736287b8b2f86c89c62039e68ac53e68ed038668873",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "de5af6d9-781e-4f03-af68-540d4ca5f861": {
      "doc_hash": "05195c5415e2634a03cf7f03e8f6544a9893ade80e2a4056c3f5eba677188013",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "7b56e245-174f-4279-90aa-bed3d7a5bcd1": {
      "doc_hash": "1b62f080187f7b937ab0c95455c68b5c4bbcfa904e33aa4fdaf6858242e64d69",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "6c7e15c2-be7e-4a60-848f-becd4b110db7": {
      "doc_hash": "2a7add3eccd5e47de5a354201ad32d544bbbcce7d16003a588f24229d7373894",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b": {
      "doc_hash": "286a3357205723721fbc605969bbee0f725e69c88893cd8bb8a069b28735f8af",
      "ref_doc_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40"
    },
    "c2e151b8-3c71-441d-aa4a-6a7224e94fc8": {
      "doc_hash": "bc5cd6f0a7262789d3208adbebc6d3cc5627fd02dfe32a057421c01e45c72acb",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "6aa17a74-053a-443e-b412-66412367f29f": {
      "doc_hash": "ba0ec43f80637a8a09c476b07e693f8713e25299580acfcf513e50179f49364c",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc": {
      "doc_hash": "bfe03879b01254339e0883b9f7e963bcf4b01e71986277792ce9f6843c1aab1a",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "2a902471-31a0-4af2-95fb-633cca7eb7ce": {
      "doc_hash": "1f1e7cc63f9132ede843d991e53f474c752d10dae608ec3c5ad7af97d66cfef7",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "ecec68b7-4d23-4ef0-96cb-96a776280b07": {
      "doc_hash": "5ab11bd197fc3bd330695f600ad9414eb566227d7a25731b2a3ce1c4861f559f",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "a5c24e0d-dc07-4713-8f8b-adf75906acc0": {
      "doc_hash": "c6e4ff00243307b5d761a20f8f2ab2e41a4b06abfe4c9648541751e82b46754e",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "14706ad3-1f24-48d4-aa97-c543af753a5a": {
      "doc_hash": "25221335e9a3804a4b1af32459640f86a43de6e3fb7db6ca327c940ae61941bb",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c": {
      "doc_hash": "7af1e9cd8cace141a25680fd2f4a34be21f4d55f88fc8e3f816e165d514d92b9",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "b1879021-4816-447e-bcf2-31cae39f1dc7": {
      "doc_hash": "b570c08c7101cadcc852c80d18df301a87363c5d131974155c6858b2a56e0b17",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "9fc6026e-f392-49cc-aea9-7315ef913cf4": {
      "doc_hash": "6fedd8b67b47273a805212961849a7dca6013bfe1b3dc1658bc86ec5e5ecbc69",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "fe612ae6-4bae-487d-921f-811daa789dc2": {
      "doc_hash": "c5a926cda9f4d9452af5815ede5b0ec9cd30e1f554b155cd40e71b1b51d22f98",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "f259fd6c-516e-47cd-8f1c-4d9b51642a5c": {
      "doc_hash": "91efcfc712bcd3b0566aab3758a07d0d77a66721e6e85c82b64c636bd6f9f870",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "fe88bd89-3d04-441b-bcee-67db0c8e3da2": {
      "doc_hash": "3e38e1f7c265cbc765278d65445d4cb0d76acb58eacb88adbc6a822945f67a6d",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "180aaef6-1850-4f67-b268-11396da976f4": {
      "doc_hash": "ef87f7e36009e1fd2feb15771231b604db3b308d12bbb86b5ebb35453b128a46",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "f04b18f7-13be-4067-9ed6-b3324f5a06d0": {
      "doc_hash": "e6dda4acd73c724bd0e4073f49e7441a954ff3e653550196dc3e2678889b54cf",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "12008c04-5842-43b0-a2eb-3d6fc544a1cf": {
      "doc_hash": "ef9175f4f6917d243b2efb7a4c23c402a17dbea2c2acb0e9d0c59820bfc516c0",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "e8532359-9caa-4ec8-882e-9a1a355de9bc": {
      "doc_hash": "19aa80dc5aff2f062a92fd5ce7d4756e1ff903281c9c30d61e66951fe46dd0eb",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "93cb7706-5e09-4305-8e63-64adc3f8c5ec": {
      "doc_hash": "93379371b6deb387307110524dd6bf6f950242a41e0b01f86ea13b3328d53590",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "1dc50e96-2e03-4a1c-878a-2124b61040aa": {
      "doc_hash": "1493b5f36a87d18171921658f493e7ee806558b8cf969c45e94ca67fbd648783",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "9cd00511-baec-412a-b5e7-cecc9b48ab69": {
      "doc_hash": "1a552fae5d8d53e686d935cb9d03ac6eb6e5031c108b8470f2a6cba910418661",
      "ref_doc_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da"
    },
    "56d01d77-8e38-448c-b416-764d64927354": {
      "doc_hash": "61d9d90c69f9fdbdd0a95171eec75f8f2b60e829c9bf764aee1736f9f95e498f",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "2caeef28-e32c-4545-b62e-d223747cd700": {
      "doc_hash": "67ef9716b0f47ade824da0a4f9f0c4310bcf566a29aef890de4721f38641032b",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "94899737-e97e-4b3c-b374-4aae60f724be": {
      "doc_hash": "6f8e4ca3d198fb6aa689300ef4a12b9e95f95e24bfc9759972442dc77344fb44",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2": {
      "doc_hash": "89a3eb490289a0bab195b45006798e90bbfc2db14400c2e177cc799c837b31b5",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "c485d342-3f7f-42fc-acf5-2b16c6305c76": {
      "doc_hash": "9a387cafa830686ea517034a3f118ffaeb6fcb993c168c12a77a80079ba87d4a",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "58d991d1-5ea2-42ee-83fb-faf19c4bae58": {
      "doc_hash": "0c9f00efe77120d6a11733b4bab5a78d85d1ca80a271e3cd2849efe093e61325",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "16f4ca63-7781-4c83-9db4-ef0e8fd2a398": {
      "doc_hash": "412a782370fafae5b9debad3b5b23aa01e986402d851033157983853833c2c4b",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "41f41352-1116-41d4-9b74-7543016929a3": {
      "doc_hash": "61644df86d8c9703a6218d905ccef7f05bebf36564bb83a8ceb01eb2a229202e",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5": {
      "doc_hash": "e88ac66fb2e65dc391917db2f7a5a14dc6037ba45f6314cad534f4786febef37",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "a56d8776-1ac1-4e38-b226-c3d520ba66be": {
      "doc_hash": "cc8fa336a6a4734ec36e9e6f16073013919a9d9954fb8db6280b7603c5c4a567",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "e4ff673f-243b-42b3-b92d-995b4207cd38": {
      "doc_hash": "bfec91224737e5971c70333e8b53eba50940408b2359b244bf0231f9a5c667ef",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "7855a776-75d8-443d-8d15-d4b46539e636": {
      "doc_hash": "d731bd0bca624774d01e54e32484ee85a315e74b66f5ae70053b6ae7a72fbdf3",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "12a8dfa4-1b29-4fd9-bd6d-946676617fb1": {
      "doc_hash": "61fde645837ff6e0526167ed6e9b65fa75fbf7051ea12245f7e3c61b889a8096",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "26310357-9e50-45a5-b84a-15dbc3fc6134": {
      "doc_hash": "19f693bd87472d5ebe8e1d3a79201a33ead7c3de6552142f18a515b27180430b",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    },
    "6cdd0d74-92f8-4532-88ea-c99c48ee099f": {
      "doc_hash": "30ad2fa982386cde31c1118989104dc265976d01405de038f8d150b8ba4e0b79",
      "ref_doc_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5"
    }
  },
  "docstore/data": {
    "c8d13647-7ad1-4ab8-84ad-a94970c5f9e9": {
      "__data__": {
        "id_": "c8d13647-7ad1-4ab8-84ad-a94970c5f9e9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
          "file_name": "adapting_ot2_flex.rst",
          "file_size": 7048,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "b809786f-0419-4709-9145-e8157d52ba26",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219",
            "node_type": "1",
            "metadata": {},
            "hash": "c00b0b6ba282a55ab09819e4b08bc0fefc6e3289de1abba8281ea3b79e7a5b61",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to adapt an OT-2 Python protocol to run on Opentrons Flex.\n\n.. _adapting-ot2-protocols:\n\n********************************\nAdapting OT-2 Protocols for Flex\n********************************\n\nPython protocols designed to run on the OT-2 can't be directly run on Flex without some modifications. This page describes the minimal steps that you need to take to get OT-2 protocols analyzing and running on Flex.\n\nAdapting a protocol for Flex lets you have parity across different Opentrons robots in your lab, or you can extend older protocols to take advantage of new features only available on Flex. Depending on your application, you may need to do additional verification of your adapted protocol.\n\nExamples on this page are in tabs so you can quickly move back and forth to see the differences between OT-2 and Flex code.\n\nMetadata and Requirements\n=========================\n\nFlex requires you to specify an ``apiLevel`` of 2.15 or higher. If your OT-2 protocol specified ``apiLevel`` in the ``metadata`` dictionary, it's best to move it to the ``requirements`` dictionary. You can't specify it in both places, or the API will raise an error.\n\n.. note::\n    Consult the :ref:`list of changes in API versions <version-notes>` to see what effect raising the ``apiLevel`` will have. If you increased it by multiple minor versions to get your protocol running on Flex, make sure that your protocol isn't using removed commands or commands whose behavior has changed in a way that may affect your scientific results.\n\nYou also need to specify ``'robotType': 'Flex'``. If you omit ``robotType`` in the ``requirements`` dictionary, the API will assume the protocol is designed for the OT-2.",
        "start_char_idx": 0,
        "end_char_idx": 1702,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219": {
      "__data__": {
        "id_": "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
          "file_name": "adapting_ot2_flex.rst",
          "file_size": 7048,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "b809786f-0419-4709-9145-e8157d52ba26",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c8d13647-7ad1-4ab8-84ad-a94970c5f9e9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "199de0b6d97559b07be9696cc029f6f47edeab9dc3d3af69cbf56a3e0dd090af",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f62a56d7-421c-448d-8040-45eec0049950",
            "node_type": "1",
            "metadata": {},
            "hash": "89441ca029c444d4acdcfdb8afdfc07a20f2f681e9829d5f8b11d33b18d8d594",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Metadata and Requirements\n=========================\n\nFlex requires you to specify an ``apiLevel`` of 2.15 or higher. If your OT-2 protocol specified ``apiLevel`` in the ``metadata`` dictionary, it's best to move it to the ``requirements`` dictionary. You can't specify it in both places, or the API will raise an error.\n\n.. note::\n    Consult the :ref:`list of changes in API versions <version-notes>` to see what effect raising the ``apiLevel`` will have. If you increased it by multiple minor versions to get your protocol running on Flex, make sure that your protocol isn't using removed commands or commands whose behavior has changed in a way that may affect your scientific results.\n\nYou also need to specify ``'robotType': 'Flex'``. If you omit ``robotType`` in the ``requirements`` dictionary, the API will assume the protocol is designed for the OT-2.\n\n.. tabs::\n    \n    .. tab:: Original OT-2 code\n    \n        .. code-block:: python\n            :substitutions:\n            \n            from opentrons import protocol_api\n            \n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"description\": \"This protocol uses the OT-2\",\n                \"apiLevel\": \"2.14\" \n            }\n\n    .. tab:: Updated Flex code\n    \n        .. code-block:: python\n            :substitutions:\n            \n            from opentrons import protocol_api\n            \n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"description\": \"This protocol uses the Flex\",\n            }\n\n            requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}",
        "start_char_idx": 842,
        "end_char_idx": 2464,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f62a56d7-421c-448d-8040-45eec0049950": {
      "__data__": {
        "id_": "f62a56d7-421c-448d-8040-45eec0049950",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
          "file_name": "adapting_ot2_flex.rst",
          "file_size": 7048,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "b809786f-0419-4709-9145-e8157d52ba26",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "751564ff3c102751ad766a38b569165858c8ff88c6f2dd11b7bb5c5732b3ed20",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3a432b4f-1d15-4fdb-b22a-60260e79a243",
            "node_type": "1",
            "metadata": {},
            "hash": "11cd0ec371550d21de80f76887faf1ba9445da0c882126a69cfa0e5a608473aa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You also need to specify ``'robotType': 'Flex'``. If you omit ``robotType`` in the ``requirements`` dictionary, the API will assume the protocol is designed for the OT-2.\n\n.. tabs::\n    \n    .. tab:: Original OT-2 code\n    \n        .. code-block:: python\n            :substitutions:\n            \n            from opentrons import protocol_api\n            \n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"description\": \"This protocol uses the OT-2\",\n                \"apiLevel\": \"2.14\" \n            }\n\n    .. tab:: Updated Flex code\n    \n        .. code-block:: python\n            :substitutions:\n            \n            from opentrons import protocol_api\n            \n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"description\": \"This protocol uses the Flex\",\n            }\n\n            requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n\n\nPipettes and Tip-rack Load Names\n================================\n\nFlex uses different types of pipettes and tip racks than OT-2, which have their own load names in the API. If possible, load Flex pipettes of the same capacity or larger than the OT-2 pipettes. See the :ref:`list of pipette API load names <new-pipette-models>` for the valid values of ``instrument_name`` in Flex protocols. And check `Labware Library <https://labware.opentrons.com>`_ or the Opentrons App for the load names of Flex tip racks.\n\n.. note::\n    If you use smaller capacity tips than in the OT-2 protocol, you may need to make further adjustments to avoid running out of tips. Also, the protocol may have more steps and take longer to execute.\n\nThis example converts OT-2 code that uses a P300 Single-Channel GEN2 pipette and 300 uL tips to Flex code that uses a Flex 1-Channel 1000 uL pipette and 1000 uL tips.\n\n.. tabs::\n    \n    .. tab:: Original OT-2 code\n    \n        .. code-block:: python\n\n            def run(protocol: protocol_api.ProtocolContext):\n                tips = protocol.load_labware(\"opentrons_96_tiprack_300ul\", 1)\n                left_pipette = protocol.load_instrument(\n                    \"p300_single_gen2\", \"left\", tip_racks=[tips]\n                )\n                \n    .. tab:: Updated Flex code\n    \n        .. code-block:: python\n\n            def run(protocol: protocol_api.ProtocolContext):\n                tips = protocol.load_labware(\"opentrons_flex_96_tiprack_1000ul\", \"D1\")\n                left_pipette = protocol.load_instrument(\n                    \"flex_1channel_1000\", \"left\", tip_racks[tips]\n                )\n\nDeck Slot Labels\n================\n\nIt's good practice to update numeric labels for :ref:`deck slots <deck-slots>` (which match the labels on an OT-2) to coordinate ones (which match the labels on Flex). This is an optional step, since the two formats are interchangeable.\n\nFor example, the code in the previous section changed the location of the tip rack from ``1`` to ``\"D1\"``.",
        "start_char_idx": 1532,
        "end_char_idx": 4477,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3a432b4f-1d15-4fdb-b22a-60260e79a243": {
      "__data__": {
        "id_": "3a432b4f-1d15-4fdb-b22a-60260e79a243",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
          "file_name": "adapting_ot2_flex.rst",
          "file_size": 7048,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "b809786f-0419-4709-9145-e8157d52ba26",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f62a56d7-421c-448d-8040-45eec0049950",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e0953676d0bda7d1e15f6c4aa4314cfec90246fb33e1bea4065f33606dbd123d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2497c312-b311-4e27-9852-4dfef272acbc",
            "node_type": "1",
            "metadata": {},
            "hash": "2cc0b6860ea25a2b97245d1a6ed985b45f2e67fc8f51a1461f51499674aaa0b9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Module Load Names\n=================\n\nIf your OT-2 protocol uses older generations of the Temperature Module or Thermocycler Module, update the load names you pass to :py:meth:`.load_module` to ones compatible with Flex:\n\n    * ``temperature module gen2``\n    * ``thermocycler module gen2`` or ``thermocyclerModuleV2``\n    \nThe Heater-Shaker Module only has one generation, ``heaterShakerModuleV1``, which is compatible with Flex and OT-2.\n\nThe Magnetic Module is not compatible with Flex. For protocols that load ``magnetic module``, ``magdeck``, or ``magnetic module gen2``, you will need to make further modifications to use the :ref:`Magnetic Block <magnetic-block>` and Flex Gripper instead. This will require reworking some of your protocol steps, and you should verify that your new protocol design achieves similar results.\n\nThis simplified example, taken from a DNA extraction protocol, shows how using the Flex Gripper and the Magnetic Block can save time. Instead of pipetting an entire plate's worth of liquid from the Heater-Shaker to the Magnetic Module and then engaging the module, the gripper moves the plate to the Magnetic Block in one step.",
        "start_char_idx": 4480,
        "end_char_idx": 5639,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2497c312-b311-4e27-9852-4dfef272acbc": {
      "__data__": {
        "id_": "2497c312-b311-4e27-9852-4dfef272acbc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
          "file_name": "adapting_ot2_flex.rst",
          "file_size": 7048,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "b809786f-0419-4709-9145-e8157d52ba26",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1bdb767d459103d11729b81f0788ad6b7b59be186a744cf297d57757462e5a3a",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3a432b4f-1d15-4fdb-b22a-60260e79a243",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0bb78363dac03889463efd30de464f698496f05e87856e7d2a224612c1625dca",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d6aaa9bd-e5dc-4388-a265-0eec11f922d7",
            "node_type": "1",
            "metadata": {},
            "hash": "c3d7cd6e5660bd6e8177426139f44b06f17befe67b6042a3d62782a00929037e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The Magnetic Module is not compatible with Flex. For protocols that load ``magnetic module``, ``magdeck``, or ``magnetic module gen2``, you will need to make further modifications to use the :ref:`Magnetic Block <magnetic-block>` and Flex Gripper instead. This will require reworking some of your protocol steps, and you should verify that your new protocol design achieves similar results.\n\nThis simplified example, taken from a DNA extraction protocol, shows how using the Flex Gripper and the Magnetic Block can save time. Instead of pipetting an entire plate's worth of liquid from the Heater-Shaker to the Magnetic Module and then engaging the module, the gripper moves the plate to the Magnetic Block in one step.\n\n.. tabs::\n    \n    .. tab:: Original OT-2 code\n    \n        .. code-block:: python\n\n            hs_mod.set_and_wait_for_shake_speed(2000)\n            protocol.delay(minutes=5)\n            hs_mod.deactivate_shaker()\n        \n            for i in sample_plate.wells():\n                # mix, transfer, and blow-out all samples\n                pipette.pick_up_tip()\n                pipette.aspirate(100,hs_plate[i])\n                pipette.dispense(100,hs_plate[i])\n                pipette.aspirate(100,hs_plate[i])\n                pipette.air_gap(10)\n                pipette.dispense(pipette.current_volume,mag_plate[i])\n                pipette.aspirate(50,hs_plate[i])\n                pipette.air_gap(10)\n                pipette.dispense(pipette.current_volume,mag_plate[i])\n                pipette.blow_out(mag_plate[i].bottom(0.5))\n                pipette.drop_tip()\n        \n            mag_mod.engage()\n        \n            # perform elution steps\n\n    .. tab:: Updated Flex code\n    \n        .. code-block:: python\n\n            hs_mod.set_and_wait_for_shake_speed(2000)\n            protocol.delay(minutes=5)\n            hs_mod.deactivate_shaker()\n        \n            # move entire plate\n            # no pipetting from Heater-Shaker needed\n            hs_mod.open_labware_latch()\n            protocol.move_labware(sample_plate, mag_block, use_gripper=True)\n        \n            # perform elution steps",
        "start_char_idx": 4920,
        "end_char_idx": 7047,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d6aaa9bd-e5dc-4388-a265-0eec11f922d7": {
      "__data__": {
        "id_": "d6aaa9bd-e5dc-4388-a265-0eec11f922d7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2497c312-b311-4e27-9852-4dfef272acbc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
              "file_name": "adapting_ot2_flex.rst",
              "file_size": 7048,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f366fb67cc98670bd7ddba365103fa6b9004e18295afb9095fae7a6c16ca6148",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7462b66d-9ad6-410f-9ceb-ccc834c899a7",
            "node_type": "1",
            "metadata": {},
            "hash": "8d6af61fa0e66a65fa743b562f1ddbbb39f5e095ae7b875fdece333ac1ddbf92",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Basic commands for working with liquids.\n\n.. _liquid-control:\n\n**************\nLiquid Control\n**************\n\nAfter attaching a tip, your robot is ready to aspirate, dispense, and perform other liquid handling tasks. The API includes methods that help you perform these actions and the following sections show how to use them. The examples used here assume that you've loaded the pipettes and labware from the basic :ref:`protocol template <protocol-template>`. \n\n.. _new-aspirate:\n\nAspirate\n========\n\nTo draw liquid up into a pipette tip, call the :py:meth:`.InstrumentContext.aspirate` method. Using this method, you can specify the aspiration volume in uL, the well location, and pipette flow rate. Other parameters let you position the pipette within a well. For example, this snippet tells the robot to aspirate 200 uL from well location A1.\n\n.. code-block:: python\n\n    pipette.pick_up_tip()\n    pipette.aspirate(200, plate['A1'])\n\nIf the pipette doesn't move, you can specify an additional aspiration action without including a location. To demonstrate, this code snippet pauses the protocol, automatically resumes it, and aspirates a second time from ``plate['A1']``).\n\n.. code-block:: python\n\n    pipette.pick_up_tip()\n    pipette.aspirate(200, plate['A1'])\n    protocol.delay(seconds=5) # pause for 5 seconds\n    pipette.aspirate(100)     # aspirate 100 uL at current position\n\nNow our pipette holds 300 uL.\n\nAspirate by Well or Location\n----------------------------\n\nThe :py:meth:`~.InstrumentContext.aspirate` method includes a ``location`` parameter that accepts either a :py:class:`.Well` or a :py:class:`~.types.Location`. \n\nIf you specify a well, like ``plate['A1']``, the pipette will aspirate from a default position 1 mm above the bottom center of that well.",
        "start_char_idx": 0,
        "end_char_idx": 1793,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7462b66d-9ad6-410f-9ceb-ccc834c899a7": {
      "__data__": {
        "id_": "7462b66d-9ad6-410f-9ceb-ccc834c899a7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d6aaa9bd-e5dc-4388-a265-0eec11f922d7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "a83a5928424032a8e8e0e512f3dcbb0d2a66b79ae37e3d5f53c9ff312942e29e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "75157767-dded-4c39-b43e-88cc72a9bea2",
            "node_type": "1",
            "metadata": {},
            "hash": "bcb51255b44a457bbbbb84e80fd1f97e594351289e64e347a0f6bd8b41455348",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "To demonstrate, this code snippet pauses the protocol, automatically resumes it, and aspirates a second time from ``plate['A1']``).\n\n.. code-block:: python\n\n    pipette.pick_up_tip()\n    pipette.aspirate(200, plate['A1'])\n    protocol.delay(seconds=5) # pause for 5 seconds\n    pipette.aspirate(100)     # aspirate 100 uL at current position\n\nNow our pipette holds 300 uL.\n\nAspirate by Well or Location\n----------------------------\n\nThe :py:meth:`~.InstrumentContext.aspirate` method includes a ``location`` parameter that accepts either a :py:class:`.Well` or a :py:class:`~.types.Location`. \n\nIf you specify a well, like ``plate['A1']``, the pipette will aspirate from a default position 1 mm above the bottom center of that well. To change the default clearance, first set the ``aspirate`` attribute of :py:obj:`.well_bottom_clearance`:: \n\n    pipette.pick_up_tip\n    pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom\n    pipette.aspirate(200, plate['A1'])\n\nYou can also aspirate from a location along the center vertical axis within a well using the :py:meth:`.Well.top` and :py:meth:`.Well.bottom` methods. These methods move the pipette to a specified distance relative to the top or bottom center of a well::\n\n    pipette.pick_up_tip()\n    depth = plate['A1'].bottom(z=2) # tip is 2 mm above well bottom\n    pipette.aspirate(200, depth)\n\nSee also:\n\n- :ref:`new-default-op-positions` for information about controlling pipette height for a particular pipette.\n- :ref:`position-relative-labware` for information about controlling pipette height from within a well.\n- :ref:`move-to` for information about moving a pipette to any reachable deck location.\n\nAspiration Flow Rates\n---------------------\n\nFlex and OT-2 pipettes aspirate at :ref:`default flow rates <new-plunger-flow-rates>` measured in uL/s.",
        "start_char_idx": 1061,
        "end_char_idx": 2893,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "75157767-dded-4c39-b43e-88cc72a9bea2": {
      "__data__": {
        "id_": "75157767-dded-4c39-b43e-88cc72a9bea2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7462b66d-9ad6-410f-9ceb-ccc834c899a7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9f86deee0760d2cc84356810842735aabd70815a4e0fa6d9b55a4858de1464a5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4bc9adf8-6c71-466c-a373-cba39f77d046",
            "node_type": "1",
            "metadata": {},
            "hash": "0016d262d8929334ba6fcc017a2721081922f1f12757ef98006d0ec83f280470",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "These methods move the pipette to a specified distance relative to the top or bottom center of a well::\n\n    pipette.pick_up_tip()\n    depth = plate['A1'].bottom(z=2) # tip is 2 mm above well bottom\n    pipette.aspirate(200, depth)\n\nSee also:\n\n- :ref:`new-default-op-positions` for information about controlling pipette height for a particular pipette.\n- :ref:`position-relative-labware` for information about controlling pipette height from within a well.\n- :ref:`move-to` for information about moving a pipette to any reachable deck location.\n\nAspiration Flow Rates\n---------------------\n\nFlex and OT-2 pipettes aspirate at :ref:`default flow rates <new-plunger-flow-rates>` measured in uL/s. Specifying the ``rate`` parameter multiplies the flow rate by that value. As a best practice, don't set the flow rate higher than 3x the default. For example, this code causes the pipette to aspirate at twice its normal rate::\n\n\n    pipette.aspirate(200, plate['A1'], rate=2.0)\n\n..\n\n.. _new-dispense:\n\nDispense\n========\n\nTo dispense liquid from a pipette tip, call the :py:meth:`.InstrumentContext.dispense` method. Using this method, you can specify the dispense volume in uL, the well location, and pipette flow rate. Other parameters let you position the pipette within a well. For example, this snippet tells the robot to dispense 200 uL into well location B1.\n\n.. code-block:: python\n\n    pipette.dispense(200, plate['B1'])\n\nIf the pipette doesn\u2019t move, you can specify an additional dispense action without including a location. To demonstrate, this code snippet pauses the protocol, automatically resumes it, and dispense a second time from location B1.",
        "start_char_idx": 2199,
        "end_char_idx": 3854,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4bc9adf8-6c71-466c-a373-cba39f77d046": {
      "__data__": {
        "id_": "4bc9adf8-6c71-466c-a373-cba39f77d046",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "75157767-dded-4c39-b43e-88cc72a9bea2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "08182657193bd4212dbdebb8524c994372202893bd63eb0b4ba0f6548aff72fb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4d392551-daf1-4443-abe8-7dac3a5956ef",
            "node_type": "1",
            "metadata": {},
            "hash": "583a65e40b8d26dc120bbd85cd2d6538f2da75dd93662fa9a7c9fdd07863b2ef",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "pipette.aspirate(200, plate['A1'], rate=2.0)\n\n..\n\n.. _new-dispense:\n\nDispense\n========\n\nTo dispense liquid from a pipette tip, call the :py:meth:`.InstrumentContext.dispense` method. Using this method, you can specify the dispense volume in uL, the well location, and pipette flow rate. Other parameters let you position the pipette within a well. For example, this snippet tells the robot to dispense 200 uL into well location B1.\n\n.. code-block:: python\n\n    pipette.dispense(200, plate['B1'])\n\nIf the pipette doesn\u2019t move, you can specify an additional dispense action without including a location. To demonstrate, this code snippet pauses the protocol, automatically resumes it, and dispense a second time from location B1.\n\n.. code-block:: python\n    \n    pipette.dispense(100, plate['B1'])\n    protocol.delay(seconds=5) # pause for 5 seconds\n    pipette.dispense(100)     # dispense 100 uL at current position\n    \nDispense by Well or Location\n----------------------------\n\nThe :py:meth:`~.InstrumentContext.dispense` method includes a ``location`` parameter that accepts either a :py:class:`.Well` or a :py:class:`~.types.Location`.\n\nIf you specify a well, like ``plate['B1']``, the pipette will dispense from a default position 1 mm above the bottom center of that well. To change the default clearance, you would call :py:obj:`.well_bottom_clearance`::\n\n    pipette.well_bottom_clearance.dispense=2 # tip is 2 mm above well bottom\n    pipette.dispense(200, plate['B1'])\n\nYou can also dispense from a location along the center vertical axis within a well using the :py:meth:`.Well.top` and :py:meth:`.Well.bottom` methods.",
        "start_char_idx": 3127,
        "end_char_idx": 4757,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4d392551-daf1-4443-abe8-7dac3a5956ef": {
      "__data__": {
        "id_": "4d392551-daf1-4443-abe8-7dac3a5956ef",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4bc9adf8-6c71-466c-a373-cba39f77d046",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "4192ab5f9796bfd844b134b8672372e1a85900707f4d6ec6e34b988c67dc5f6d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "39a71b21-283f-4275-86b2-ff692afcbea9",
            "node_type": "1",
            "metadata": {},
            "hash": "16d563e3c5305cbf697c02f8bfb4c8d9f6aaeb12bb4b3313bd8d85db2ba609a6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you specify a well, like ``plate['B1']``, the pipette will dispense from a default position 1 mm above the bottom center of that well. To change the default clearance, you would call :py:obj:`.well_bottom_clearance`::\n\n    pipette.well_bottom_clearance.dispense=2 # tip is 2 mm above well bottom\n    pipette.dispense(200, plate['B1'])\n\nYou can also dispense from a location along the center vertical axis within a well using the :py:meth:`.Well.top` and :py:meth:`.Well.bottom` methods. These methods move the pipette to a specified distance relative to the top or bottom center of a well::\n\n    depth = plate['B1'].bottom(z=2) # tip is 2 mm above well bottom\n    pipette.dispense(200, depth)\n\nSee also:\n\n- :ref:`new-default-op-positions` for information about controlling pipette height for a particular pipette.\n- :ref:`position-relative-labware` for formation about controlling pipette height from within a well.\n- :ref:`move-to` for information about moving a pipette to any reachable deck location.\n\nDispense Flow Rates\n-------------------\n\nFlex and OT-2 pipettes dispense at :ref:`default flow rates <new-plunger-flow-rates>` measured in uL/s. Adding a number to the ``rate`` parameter multiplies the flow rate by that value. As a best practice, don't set the flow rate higher than 3x the default. For example, this code causes the pipette to dispense at twice its normal rate::\n\n    pipette.dispense(200, plate['B1'], rate=2.0)\n\n.. Removing the 2 notes here from the original. Covered by new revisions.\n\n..\n\n.. _new-blow-out:\n\n.. _blow-out:\n\nBlow Out\n========\n\nTo blow an extra amount of air through the pipette's tip, call the :py:meth:`.InstrumentContext.blow_out` method. You can use a specific well in a well plate or reservoir as the blowout location.",
        "start_char_idx": 4268,
        "end_char_idx": 6034,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "39a71b21-283f-4275-86b2-ff692afcbea9": {
      "__data__": {
        "id_": "39a71b21-283f-4275-86b2-ff692afcbea9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4d392551-daf1-4443-abe8-7dac3a5956ef",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d416dd1d7827a0a40a38cbe14c99fef33f443e8c4697750ac5c3e7aa21ac8ff3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a41d9aca-7986-4114-8fd6-07a67f82d394",
            "node_type": "1",
            "metadata": {},
            "hash": "29fa07657e9c59f7598917eb00f39726bed284f534b19af0df5999539ebdb5eb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Adding a number to the ``rate`` parameter multiplies the flow rate by that value. As a best practice, don't set the flow rate higher than 3x the default. For example, this code causes the pipette to dispense at twice its normal rate::\n\n    pipette.dispense(200, plate['B1'], rate=2.0)\n\n.. Removing the 2 notes here from the original. Covered by new revisions.\n\n..\n\n.. _new-blow-out:\n\n.. _blow-out:\n\nBlow Out\n========\n\nTo blow an extra amount of air through the pipette's tip, call the :py:meth:`.InstrumentContext.blow_out` method. You can use a specific well in a well plate or reservoir as the blowout location. If no location is specified, the pipette will blowout from its current well position::\n\n    pipette.blow_out()\n\nYou can also specify a particular well as the blowout location::\n\n    pipette.blow_out(plate['B1'])\n\nMany protocols use the trash bin for blowing out the pipette. You can specify the trash bin as the blowout location by using the :py:obj:`.ProtocolContext.fixed_trash` property::\n\n    pipette.blow_out(protocol.fixed_trash['A1'])  \n\n..\n\n.. _touch-tip:\n\nTouch Tip\n=========\n\nThe :py:meth:`.InstrumentContext.touch_tip` method moves the pipette so the tip touches each wall of a well. A touch tip procedure helps knock off any droplets that might cling to the pipette's tip. This method includes optional arguments that allow you to control where the tip will touch the inner walls of a well and the touch speed. Calling :py:meth:`~.InstrumentContext.touch_tip` without arguments causes the pipette to touch the well walls from its current location::\n\n    pipette.touch_tip() \n\nTouch Location\n--------------\n\nThese optional location arguments give you control over where the tip will touch the side of a well.",
        "start_char_idx": 5421,
        "end_char_idx": 7154,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a41d9aca-7986-4114-8fd6-07a67f82d394": {
      "__data__": {
        "id_": "a41d9aca-7986-4114-8fd6-07a67f82d394",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "39a71b21-283f-4275-86b2-ff692afcbea9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9315165af06c753f10bf9eb6b6edb2b7cf2e790c2cd863134561e452ebc084b3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9",
            "node_type": "1",
            "metadata": {},
            "hash": "fb3cfcf87fa2e920b28721ba0062027efa1f2eb0383f0ad746f6676a9dde6d9d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You can specify the trash bin as the blowout location by using the :py:obj:`.ProtocolContext.fixed_trash` property::\n\n    pipette.blow_out(protocol.fixed_trash['A1'])  \n\n..\n\n.. _touch-tip:\n\nTouch Tip\n=========\n\nThe :py:meth:`.InstrumentContext.touch_tip` method moves the pipette so the tip touches each wall of a well. A touch tip procedure helps knock off any droplets that might cling to the pipette's tip. This method includes optional arguments that allow you to control where the tip will touch the inner walls of a well and the touch speed. Calling :py:meth:`~.InstrumentContext.touch_tip` without arguments causes the pipette to touch the well walls from its current location::\n\n    pipette.touch_tip() \n\nTouch Location\n--------------\n\nThese optional location arguments give you control over where the tip will touch the side of a well.\n\nThis example demonstrates touching the tip in a specific well::\n\n    pipette.touch_tip(plate['B1'])\n    \nThis example uses an offset to set the touch tip location 2mm below the top of the current well::\n\n    pipette.touch_tip(v_offset=-2) \n\nThis example moves the pipette 75% of well's total radius and 2 mm below the top of well::\n\n    pipette.touch_tip(plate['B1'], \n                      radius=0.75,\n                      v_offset=-2)\n\nThe ``touch_tip`` feature allows the pipette to touch the edges of a well gently instead of crashing into them. It includes the ``radius`` argument. When ``radius=1`` the robot moves the centerline of the pipette\u2019s plunger axis to the edge of a well. This means a pipette tip may sometimes touch the well wall too early, causing it to bend inwards. A smaller radius helps avoid premature wall collisions and a lower speed produces gentler motion. Different liquid droplets behave differently, so test out these parameters in a single well before performing a full protocol run.\n\n.. warning::\n    *Do not* set the ``radius`` value greater than ``1.0``. When ``radius`` is > ``1.0``, the robot will forcibly move the pipette tip across a well wall or edge.",
        "start_char_idx": 6310,
        "end_char_idx": 8350,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9": {
      "__data__": {
        "id_": "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a41d9aca-7986-4114-8fd6-07a67f82d394",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "de49957df93f6f1e8ba391a1b4e744ed2e3bbdaaafaa880f556bc7cf8bbd6015",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff",
            "node_type": "1",
            "metadata": {},
            "hash": "f9e0c2972ad5101b97ff3ae8a51b0f7066aa0b1197856653cb190356c162f618",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It includes the ``radius`` argument. When ``radius=1`` the robot moves the centerline of the pipette\u2019s plunger axis to the edge of a well. This means a pipette tip may sometimes touch the well wall too early, causing it to bend inwards. A smaller radius helps avoid premature wall collisions and a lower speed produces gentler motion. Different liquid droplets behave differently, so test out these parameters in a single well before performing a full protocol run.\n\n.. warning::\n    *Do not* set the ``radius`` value greater than ``1.0``. When ``radius`` is > ``1.0``, the robot will forcibly move the pipette tip across a well wall or edge. This type of aggressive movement can damage the pipette tip and the pipette.\n\nTouch Speed\n-----------\n\nTouch speed controls how fast the pipette moves in mm/s during a touch tip step. The default movement speed is 60 mm/s, the minimum is 1 mm/s, and the maximum is 80 mm/s. Calling ``touch_tip`` without any arguments moves a tip at the default speed in the current well::\n\n    pipette.touch_tip()\n\nThis example specifies a well location and sets the speed to 20 mm/s::\n\n    pipette.touch_tip(plate['B1'], speed=20)\n\nThis example uses the current well and sets the speed to 80 mm/s::\n\n    pipette.touch_tip(speed=80)\n\n..\n\n.. versionchanged:: 2.4\n    Lowered minimum speed to 1 mm/s.\n\n.. _mix:\n\nMix\n====\n\nThe :py:meth:`~.InstrumentContext.mix` method aspirates and dispenses repeatedly in a single location. It's designed to mix the contents of a well together using a single command rather than using multiple ``aspirate()`` and ``dispense()`` calls. This method includes arguments that let you specify the number of times to mix, the volume (in uL) of liquid, and the well that contains the liquid you want to mix.",
        "start_char_idx": 7708,
        "end_char_idx": 9466,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff": {
      "__data__": {
        "id_": "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
          "file_name": "liquids.rst",
          "file_size": 10903,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4ba4595-9ca7-484e-935b-a055614bda66",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d9ff0368df8a2952390528ee44fbcde15ab43ccbbd3ca4ca43e343f04adb0f75",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3fa608968e8648f513fe50625d0c635a57d41a42f6e9359ea86654798145bec4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d825183c-f2ad-4af6-bd58-5972857c4e21",
            "node_type": "1",
            "metadata": {},
            "hash": "e9aed31f20fa6b725c447e4f128acb19aa1b226035a8283ff2bcd6550002599e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _mix:\n\nMix\n====\n\nThe :py:meth:`~.InstrumentContext.mix` method aspirates and dispenses repeatedly in a single location. It's designed to mix the contents of a well together using a single command rather than using multiple ``aspirate()`` and ``dispense()`` calls. This method includes arguments that let you specify the number of times to mix, the volume (in uL) of liquid, and the well that contains the liquid you want to mix.\n\nThis example draws 100 uL from the current well and mixes it three times::\n\n    pipette.mix(repetitions=3, volume=100)\n\nThis example draws 100 uL from well B1 and mixes it three times::\n\n    pipette.mix(3, 100, plate['B1'])\n\nThis example draws an amount equal to the pipette's maximum rated volume and mixes it three times::\n\n    pipette.mix(repetitions=3)\n\n.. note::\n\n    In API versions 2.2 and earlier, during a mix, the pipette moves up and out of the target well. In API versions 2.3 and later, the pipette does not move while mixing. \n\n..\n\n.. _air-gap:\n\nAir Gap\n=======\n\nThe :py:meth:`.InstrumentContext.air_gap` method tells the pipette to draw in air before or after a liquid. Creating an air gap helps keep liquids from seeping out of a pipette after drawing it from a well. This method includes arguments that give you control over the amount of air to aspirate and the pipette's height (in mm) above the well. By default, the pipette moves 5 mm above a well before aspirating air. Calling :py:meth:`~.InstrumentContext.air_gap` with no arguments uses the entire remaining volume in the pipette.\n\nThis example aspirates 200 uL of air 5 mm above the current well::\n\n    pipette.air_gap(volume=200)\n\nThis example aspirates 200 uL of air 20 mm above the the current well::\n\n    pipette.air_gap(volume=200, height=20)\n\nThis example aspirates enough air to fill the remaining volume in a pipette::\n\n    pipette.air_gap()\n\n..",
        "start_char_idx": 9035,
        "end_char_idx": 10897,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d825183c-f2ad-4af6-bd58-5972857c4e21": {
      "__data__": {
        "id_": "d825183c-f2ad-4af6-bd58-5972857c4e21",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
          "file_name": "pipette_tips.rst",
          "file_size": 5966,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "cd34e14d-a65f-4e21-93f8-c306de702613",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
              "file_name": "liquids.rst",
              "file_size": 10903,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "82aa4c80d12dcf23b1746de9f014629f9112c7b1fc1fb93b46cc33f020b70a60",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0a79d729-0631-4479-a8e9-a660ab1445b3",
            "node_type": "1",
            "metadata": {},
            "hash": "5c7be76da24c1791e1eba950c551cf8717d4687d8d763edb728ad879494568ae",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Basic commands for working with pipette tips.\n\n.. _pipette-tips:\n\n*************************\nManipulating Pipette Tips\n*************************\n\nYour robot needs to attach a disposable tip to the pipette before it can aspirate or dispense liquids. The API provides three basic functions that help the robot attach and manage pipette tips during a protocol run. These methods are :py:meth:`.InstrumentContext.pick_up_tip`, :py:meth:`.InstrumentContext.drop_tip`, and :py:meth:`.InstrumentContext.return_tip`. Respectively, these methods tell the robot to pick up a tip from a tip rack, drop a tip into the trash (or another location), and return a tip to its location in the tip rack.\n\nThe following sections demonstrate how to use each method and include sample code. The examples used here assume that you've loaded the pipettes and labware from the basic :ref:`protocol template <protocol-template>`.\n\nPicking Up a Tip\n================\n\nTo pick up a tip, call the :py:meth:`~.InstrumentContext.pick_up_tip` method without any arguments::\n    \n    pipette.pick_up_tip()\n\nThis simple statement works because the variable ``tiprack_1`` in the sample protocol includes the on-deck location of the tip rack (Flex ``location=\"D3\"``, OT-2 ``location=3``) *and* the ``pipette`` variable includes the argument ``tip_racks=[tiprack_1]``. Given this information, the robot moves to the tip rack and picks up a tip from position A1 in the rack. On subsequent calls to ``pick_up_tip()``, the robot will use the next available tip. For example::\n\n    pipette.pick_up_tip()  # picks up tip from rack location A1\n    pipette.drop_tip()     # drops tip in trash bin\n    pipette.pick_up_tip()  # picks up tip from rack location B1\n    pipette.drop_tip()     # drops tip in trash bin \n\nIf you omit the ``tip_rack`` argument from the ``pipette`` variable, the API will raise an error.",
        "start_char_idx": 0,
        "end_char_idx": 1883,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0a79d729-0631-4479-a8e9-a660ab1445b3": {
      "__data__": {
        "id_": "0a79d729-0631-4479-a8e9-a660ab1445b3",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
          "file_name": "pipette_tips.rst",
          "file_size": 5966,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "cd34e14d-a65f-4e21-93f8-c306de702613",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d825183c-f2ad-4af6-bd58-5972857c4e21",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "47c4f149305ed523a46dc10c3b0e3e3a4da2389e25dadeb032c700c42fc20a3f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "43b96eaa-5ec1-44d6-94c9-52e885e3cea1",
            "node_type": "1",
            "metadata": {},
            "hash": "ad5b6bc43f80d5d371c0e36e94d3868bd688ac4dc0f00d8bd164f893cc146fdc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Given this information, the robot moves to the tip rack and picks up a tip from position A1 in the rack. On subsequent calls to ``pick_up_tip()``, the robot will use the next available tip. For example::\n\n    pipette.pick_up_tip()  # picks up tip from rack location A1\n    pipette.drop_tip()     # drops tip in trash bin\n    pipette.pick_up_tip()  # picks up tip from rack location B1\n    pipette.drop_tip()     # drops tip in trash bin \n\nIf you omit the ``tip_rack`` argument from the ``pipette`` variable, the API will raise an error. You must pass in the tip rack's location to ``pick_up_tip`` like this::\n    \n    pipette.pick_up_tip(tiprack_1['A1'])\n    pipette.drop_tip()\n    pipette.pick_up_tip(tiprack_1['B1']) \n\nIf coding the location of each tip seems inefficient or tedious, try using a ``for`` loop to automate a sequential tip pick up process. When using a loop, the API keeps track of tips and manages tip pickup for you. But ``pick_up_tip`` is still a powerful feature. It gives you direct control over tip use when that\u2019s important in your protocol.\n\n..\n\nAutomating Tip Pick Up\n======================\n\nWhen used with Python's :py:class:`range` class, a ``for`` loop brings automation to the tip pickup and tracking process. It also eliminates the need to call ``pick_up_tip()`` multiple times. For example, this snippet tells the robot to sequentially use all the tips in a 96-tip rack::\n\n    for i in range(96):\n        pipette.pick_up_tip()\n        # liquid handling commands\n        pipette.drop_tip()\n\nIf your protocol requires a lot of tips, add a second tip rack to the protocol. Then, associate it with your pipette and increase the number of repetitions in the loop. The robot will work through both racks.",
        "start_char_idx": 1347,
        "end_char_idx": 3077,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "43b96eaa-5ec1-44d6-94c9-52e885e3cea1": {
      "__data__": {
        "id_": "43b96eaa-5ec1-44d6-94c9-52e885e3cea1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
          "file_name": "pipette_tips.rst",
          "file_size": 5966,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "cd34e14d-a65f-4e21-93f8-c306de702613",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0a79d729-0631-4479-a8e9-a660ab1445b3",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "c64fe720e9748a40901f35cfeabc045b5226631fbd0126d5eab61ac2bb963128",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3436c4b5-7ac3-408f-8bca-c14986fead25",
            "node_type": "1",
            "metadata": {},
            "hash": "0da4faf646053f2d396f5d814a80b4caf031f0520209a211d7c60ec1e96896e9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When using a loop, the API keeps track of tips and manages tip pickup for you. But ``pick_up_tip`` is still a powerful feature. It gives you direct control over tip use when that\u2019s important in your protocol.\n\n..\n\nAutomating Tip Pick Up\n======================\n\nWhen used with Python's :py:class:`range` class, a ``for`` loop brings automation to the tip pickup and tracking process. It also eliminates the need to call ``pick_up_tip()`` multiple times. For example, this snippet tells the robot to sequentially use all the tips in a 96-tip rack::\n\n    for i in range(96):\n        pipette.pick_up_tip()\n        # liquid handling commands\n        pipette.drop_tip()\n\nIf your protocol requires a lot of tips, add a second tip rack to the protocol. Then, associate it with your pipette and increase the number of repetitions in the loop. The robot will work through both racks. \n\nFirst, add another tip rack to the sample protocol::\n\n    tiprack_2 = protocol.load_labware(\n        load_name=\"opentrons_flex_96_tiprack_1000ul\",\n        location=\"C3\"\n    )\n\nNext, append the new tip rack to the pipette's ``tip_rack`` property::\n\n    pipette = protocol.load_instrument(\n        instrument_name=\"flex_1channel_1000\",\n        mount=\"left\",\n        tip_racks=[tiprack_1, tiprack_2],\n    )\n    pipette_1.tip_racks.append(tiprack_2)\n\nFinally, sum the tip count in the range::\n\n    for i in range(192):\n        pipette.pick_up_tip()\n        pipette.drop_tip()\n\nFor a more advanced \"real-world\" example, review the :ref:`off-deck location protocol <off-deck-location>` on the :ref:`moving-labware` page. This example also uses a ``for`` loop to iterate through a tip rack, but it includes other commands that pause the protocol and let you replace an on-deck tip rack with another rack stored in an off-deck location.",
        "start_char_idx": 2204,
        "end_char_idx": 4008,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3436c4b5-7ac3-408f-8bca-c14986fead25": {
      "__data__": {
        "id_": "3436c4b5-7ac3-408f-8bca-c14986fead25",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
          "file_name": "pipette_tips.rst",
          "file_size": 5966,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "cd34e14d-a65f-4e21-93f8-c306de702613",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "43b96eaa-5ec1-44d6-94c9-52e885e3cea1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "7d1c4781ddb1eb956330f216c81b42aa09ddcba66468411f4d7814a3301a6577",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ed810bc0-eb72-45d8-90b2-999a60068a2b",
            "node_type": "1",
            "metadata": {},
            "hash": "4344d859fd1d2dd2d876a706e8e289c99cf1f97def3010c47edabbc3ebc0786d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This example also uses a ``for`` loop to iterate through a tip rack, but it includes other commands that pause the protocol and let you replace an on-deck tip rack with another rack stored in an off-deck location.\n\nDropping a Tip\n==============\n\nTo drop a tip in the trash bin, call the :py:meth:`~.InstrumentContext.drop_tip` method with no arguments::\n    \n    pipette.pick_up_tip()\n\nYou can also specify where to drop the tip by passing in a location. For example, this code drops a tip in the trash bin and returns another tip to to a previously used well in a tip rack::\n\n    pipette.pick_up_tip()            # picks up tip from rack location A1\n    pipette.drop_tip()               # drops tip in trash bin \n    pipette.pick_up_tip()            # picks up tip from rack location B1\n    pipette.drop_tip(tiprack['A1'])  # drops tip in rack location A1\n\n..\n\n.. _pipette-return-tip:\n\nReturning a Tip\n===============\n\nTo return a tip to its original location, call the :py:meth:`~.InstrumentContext.return_tip` method with no arguments::\n\n    pipette.return_tip()\n\nWorking With Used Tips\n======================\n\nCurrently, the API considers tips as \"used\" after being picked up. For example, if the robot picked up a tip from rack location A1 and then returned it to the same location, it will not attempt to pick up this tip again, unless explicitly specified. Instead, the robot will pick up a tip starting from rack location B1. For example::\n\n    pipette.pick_up_tip()                # picks up tip from rack location A1\n    pipette.return_tip()                 # drops tip in rack location A1\n    pipette.pick_up_tip()                # picks up tip from rack location B1\n    pipette.drop_tip()                   # drops tip in trash bin\n    pipette.pick_up_tip(tiprack_1['A1']) # picks up tip from rack location A1\n\nEarly API versions treated returned tips as unused items. They could be picked up again without an explicit argument.",
        "start_char_idx": 3795,
        "end_char_idx": 5735,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ed810bc0-eb72-45d8-90b2-999a60068a2b": {
      "__data__": {
        "id_": "ed810bc0-eb72-45d8-90b2-999a60068a2b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
          "file_name": "pipette_tips.rst",
          "file_size": 5966,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "cd34e14d-a65f-4e21-93f8-c306de702613",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "fd5a8d4c9dced63c000cb257c4fd341d20f7b25522d72f89c8d4851827792d92",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3436c4b5-7ac3-408f-8bca-c14986fead25",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "2ae2b8a0654464114ab883090ec14e256683cd1345c60cf732a13a02a98dab6a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d5868ba2-8879-435c-841a-fe4ecf9e677b",
            "node_type": "1",
            "metadata": {},
            "hash": "41bc0e9c4e061c3095287133d9dcc6eb636152336bf11cb46167d9d7842e0f01",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, if the robot picked up a tip from rack location A1 and then returned it to the same location, it will not attempt to pick up this tip again, unless explicitly specified. Instead, the robot will pick up a tip starting from rack location B1. For example::\n\n    pipette.pick_up_tip()                # picks up tip from rack location A1\n    pipette.return_tip()                 # drops tip in rack location A1\n    pipette.pick_up_tip()                # picks up tip from rack location B1\n    pipette.drop_tip()                   # drops tip in trash bin\n    pipette.pick_up_tip(tiprack_1['A1']) # picks up tip from rack location A1\n\nEarly API versions treated returned tips as unused items. They could be picked up again without an explicit argument. For example:: \n\n    pipette.pick_up_tip()  # picks up tip from rack location A1\n    pipette.return_tip()   # drops tip in rack location A1\n    pipette.pick_up_tip()  # picks up tip from rack location A1\n\n.. versionchanged:: 2.2",
        "start_char_idx": 4976,
        "end_char_idx": 5963,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d5868ba2-8879-435c-841a-fe4ecf9e677b": {
      "__data__": {
        "id_": "d5868ba2-8879-435c-841a-fe4ecf9e677b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
          "file_name": "utilities.rst",
          "file_size": 4365,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fe616abb-7210-4467-8a8e-869cbc31cb91",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "26e69b5e4ecc1ac108a33292ba3b796c01b85ede9ac7cd8845ec7f07fc8bf84f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ed810bc0-eb72-45d8-90b2-999a60068a2b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
              "file_name": "pipette_tips.rst",
              "file_size": 5966,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "6b18248e20e860cef1b45ca0baa652ac249cc6178d78e5816f1ed3bc7e02cd82",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8fcb6784-76ee-4e3d-a540-7140fc8e156f",
            "node_type": "1",
            "metadata": {},
            "hash": "a882a43115b020b8107e19ea31c97d8e39971f90851249321b3c3e84d05d302a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Basic commands for working with robot utility features.\n\n.. _new-utility-commands:\n\n****************\nUtility Commands\n****************\n\nWith utility commands, you can control various robot functions such as pausing or delaying a protocol, checking the robot's door, turning robot lights on/off, and more. The following sections show you how to these utility commands and include sample code. The examples used here assume that you\u2019ve loaded the pipettes and labware from the basic :ref:`protocol template <protocol-template>`.\n\nDelay and Resume\n================\n\nCall the :py:meth:`.ProtocolContext.delay` method to insert a timed delay into your protocol. This method accepts time increments in seconds, minutes, or combinations of both. Your protocol resumes automatically after the specified time expires.\n\nThis example delays a protocol for 10 seconds::\n\n    protocol.delay(seconds=10)\n\nThis example delays a protocol for 5 minutes::\n\n    protocol.delay(minutes=5)\n\nThis example delays a protocol for 5 minutes and 10 seconds::\n\n    protocol.delay(minutes=5, seconds=10)\n\nPause Until Resumed\n===================\n\nCall the :py:meth:`.ProtocolContext.pause` method to stop a protocol at a specific step. Unlike a delay, :py:meth:`~.ProtocolContext.pause` does not restart your protocol automatically. To resume, you'll respond to a prompt on the touchscreen or in the Opentrons App. This method also lets you specify an optional message that provides on-screen or in-app instructions on how to proceed. This example inserts a pause and includes a brief message::\n\n    protocol.pause('Remember to get more pipette tips')\n\n..\n\nHoming\n======\n\nHoming commands the robot to move the gantry, a pipette, or a pipette plunger to a defined position. For example, homing the gantry moves it to the back right of the working area. With the available homing methods you can home the gantry, home the mounted pipette and plunger, and home the pipette plunger. These functions take no arguments.",
        "start_char_idx": 0,
        "end_char_idx": 2000,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8fcb6784-76ee-4e3d-a540-7140fc8e156f": {
      "__data__": {
        "id_": "8fcb6784-76ee-4e3d-a540-7140fc8e156f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
          "file_name": "utilities.rst",
          "file_size": 4365,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fe616abb-7210-4467-8a8e-869cbc31cb91",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "26e69b5e4ecc1ac108a33292ba3b796c01b85ede9ac7cd8845ec7f07fc8bf84f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d5868ba2-8879-435c-841a-fe4ecf9e677b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "caa531074c0e55ca19df3a7e9b332a7de386b524f8c0cec944a390023c215371",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572",
            "node_type": "1",
            "metadata": {},
            "hash": "2420d5417bd9918d69fca0fa591ca89cb1ccc4a4b8a7773b1c877af4cba6968f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Unlike a delay, :py:meth:`~.ProtocolContext.pause` does not restart your protocol automatically. To resume, you'll respond to a prompt on the touchscreen or in the Opentrons App. This method also lets you specify an optional message that provides on-screen or in-app instructions on how to proceed. This example inserts a pause and includes a brief message::\n\n    protocol.pause('Remember to get more pipette tips')\n\n..\n\nHoming\n======\n\nHoming commands the robot to move the gantry, a pipette, or a pipette plunger to a defined position. For example, homing the gantry moves it to the back right of the working area. With the available homing methods you can home the gantry, home the mounted pipette and plunger, and home the pipette plunger. These functions take no arguments.\n\nTo home the gantry, call :py:meth:`.ProtocolContext.home`::\n\n    protocol.home()\n\nTo home a specific pipette's Z axis and plunger, call :py:meth:`.InstrumentContext.home`::\n\n    pipette = protocol.load_instrument('flex_1channel_1000', 'right')\n    pipette.home()\n\nTo home a specific pipette's plunger only, you can call :py:meth:`.InstrumentContext.home_plunger`::\n\n    pipette = protocol.load_instrument('flex_1channel_1000', 'right')\n    pipette.home_plunger()\n\n..\n\nComment\n=======\n\nCall the :py:meth:`.ProtocolContext.comment` method if you want to write and display a brief message in the Opentrons App during a protocol run::\n\n    protocol.comment('Hello, world!')\n\n..\n\nControl and Monitor Robot Rail Lights\n=====================================\n\nCall the :py:meth:`.ProtocolContext.set_rail_lights` method to turn the robot's rail lights on or off during a protocol. This method accepts Boolean ``True`` (lights on) or ``False`` (lights off) arguments. Rail lights are off by default.\n\nThis example turns the rail lights on::\n\n    protocol.set_rail_lights(True)",
        "start_char_idx": 1223,
        "end_char_idx": 3069,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572": {
      "__data__": {
        "id_": "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
          "file_name": "utilities.rst",
          "file_size": 4365,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fe616abb-7210-4467-8a8e-869cbc31cb91",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "26e69b5e4ecc1ac108a33292ba3b796c01b85ede9ac7cd8845ec7f07fc8bf84f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8fcb6784-76ee-4e3d-a540-7140fc8e156f",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "9b68ad146aa482c3c094bb18747fe98e8edf604b819d0fc35d02b2f22818e1d2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d79773d0-4aed-4f57-b8d7-c055a16f53e0",
            "node_type": "1",
            "metadata": {},
            "hash": "954ed8e158a3e053bd67523428bd3c5925531a139e9d6d12cf932be11cf01342",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "..\n\nControl and Monitor Robot Rail Lights\n=====================================\n\nCall the :py:meth:`.ProtocolContext.set_rail_lights` method to turn the robot's rail lights on or off during a protocol. This method accepts Boolean ``True`` (lights on) or ``False`` (lights off) arguments. Rail lights are off by default.\n\nThis example turns the rail lights on::\n\n    protocol.set_rail_lights(True)\n\n\nThis example turns the rail lights off::\n\n    protocol.set_rail_lights(False)\n\n.. versionadded:: 2.5\n\nYou can also check whether the rail lights are on or off in the protocol by using :py:obj:`.ProtocolContext.rail_lights_on`. This method returns ``True`` when lights are on and ``False`` when the lights are off.\n\n.. versionadded:: 2.5\n\n\nOT-2 Door Safety Switch\n=======================\n\nIntroduced with :ref:`robot software version <version-table>` 3.19, the safety switch feature prevents the OT-2, and your protocol, from running if the door is open. To operate properly, the front door and top window of your OT-2 must be closed. You can toggle the door safety switch on or off from **Robot Settings > Advanced > Usage Settings**.\n\nTo check if the robot's door is closed at a specific point during a protocol run, call :py:obj:`.ProtocolContext.door_closed`. It returns a Boolean ``True`` (door closed) or ``False`` (door open) response.\n\n.. code-block:: python\n\n    protocol.door_closed\n\n.. warning::\n\n    :py:obj:`~.ProtocolContext.door_closed` is a status check only. It does not control the robot's behavior. If you wish to implement a custom method to pause or resume a protocol using ``door_closed``, disable the door safety feature first (not recommended).\n\n.. versionadded:: 2.5",
        "start_char_idx": 2673,
        "end_char_idx": 4362,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d79773d0-4aed-4f57-b8d7-c055a16f53e0": {
      "__data__": {
        "id_": "d79773d0-4aed-4f57-b8d7-c055a16f53e0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
              "file_name": "utilities.rst",
              "file_size": 4365,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f89d345c702de832660a64863fbc51d4ab3e4d7eff9470628e25ca4e40195958",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1eba341e-d6ca-44a3-928d-d5bfab234753",
            "node_type": "1",
            "metadata": {},
            "hash": "43cf4981e103cc4eaf6ef560c2d685f643153c0e0b996a9f9ea9b7f83b83d60b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: The order of basic commands that are part of a complex liquid handling commmand in the Python API.\n\n.. _complex-command-order:\n\n*******************\nOrder of Operations\n*******************\n\nComplex commands perform a series of :ref:`building block commands <v2-atomic-commands>` in order. In fact, the run preview for your protocol in the Opentrons App lists all of these commands as separate steps. This lets you examine what effect your complex commands will have before running them. \n\nThis page describes what steps you should expect the robot to perform when using different complex commands with different required and :ref:`optional <complex_params>` parameters.\n\nStep Sequence\n=============\n\nThe order of steps is fixed within complex commands. Aspiration and dispensing are the only required actions. You can enable or disable all of the other actions with :ref:`complex liquid handling parameters <complex_params>`. A complex command designed to perform every possible action will proceed in this order:\n\n    1. Pick up tip\n    2. Mix at source\n    3. Aspirate from source\n    4. Touch tip at source\n    5. Air gap\n    6. Dispense into destination\n    7. Mix at destination\n    8. Touch tip at destination\n    9. Blow out\n    10. Drop tip\n    \nThe command may repeat some or all of these steps in order to move liquid as requested. :py:meth:`.transfer` repeats as many times as there are wells in the longer of its ``source`` or ``dest`` argument. :py:meth:`.distribute` and :py:meth:`.consolidate` try to repeat as few times as possible. See :ref:`complex-tip-refilling` below for how they behave when they do need to repeat.\n\nExample Orders\n==============\n\nThe smallest possible number of steps in a complex command is just two: aspirating and dispensing.",
        "start_char_idx": 0,
        "end_char_idx": 1783,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1eba341e-d6ca-44a3-928d-d5bfab234753": {
      "__data__": {
        "id_": "1eba341e-d6ca-44a3-928d-d5bfab234753",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d79773d0-4aed-4f57-b8d7-c055a16f53e0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c7f140d56569c6025e40c63a74a9ba97c223aa49c3465f59c4e598130acb87db",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "fe100cbc-74d2-41bf-a40b-70d8170d7b31",
            "node_type": "1",
            "metadata": {},
            "hash": "6788238d7ed9fbf15b2d1f3da8c85c6611ae0402384929fed1001a927cd633a2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Aspirate from source\n    4. Touch tip at source\n    5. Air gap\n    6. Dispense into destination\n    7. Mix at destination\n    8. Touch tip at destination\n    9. Blow out\n    10. Drop tip\n    \nThe command may repeat some or all of these steps in order to move liquid as requested. :py:meth:`.transfer` repeats as many times as there are wells in the longer of its ``source`` or ``dest`` argument. :py:meth:`.distribute` and :py:meth:`.consolidate` try to repeat as few times as possible. See :ref:`complex-tip-refilling` below for how they behave when they do need to repeat.\n\nExample Orders\n==============\n\nThe smallest possible number of steps in a complex command is just two: aspirating and dispensing. This is possible by omitting the tip pickup and drop steps::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        new_tip=\"never\",\n    )\n\nHere's another example, a distribute command that adds touch tip steps (and does not turn off tip handling). The code for this command is::\n\n    pipette.distribute(\n        volume=100,\n        source=[plate[\"A1\"]],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        touch_tip=True,\n    )\n    \nCompared to the list of all possible actions, this code will only perform the following:\n\n    1. Pick up tip\n    2. Aspirate from source\n    3. Touch tip at source\n    4. Dispense into destination\n    5. Touch tip at destination\n    6. Blow out\n    7. Drop tip\n    \nLet's unpack this. Picking up and dropping tips is default behavior for ``distribute()``. Specifying ``touch_tip=True`` adds two steps, as it is performed at both the source and destination. And it's also default behavior for ``distribute()`` to aspirate a disposal volume, which is blown out before dropping the tip.",
        "start_char_idx": 1078,
        "end_char_idx": 2848,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "fe100cbc-74d2-41bf-a40b-70d8170d7b31": {
      "__data__": {
        "id_": "fe100cbc-74d2-41bf-a40b-70d8170d7b31",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1eba341e-d6ca-44a3-928d-d5bfab234753",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "a4ce68afdd8d45beaaf902a97833913b3f286fa486e80eed8ae6342933a3b8c8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3e189d7a-020e-46d1-9904-2e908115d370",
            "node_type": "1",
            "metadata": {},
            "hash": "42fe514b248844343be44e8ce771925650e16eeee34fa3b720a56bda09151a17",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Pick up tip\n    2. Aspirate from source\n    3. Touch tip at source\n    4. Dispense into destination\n    5. Touch tip at destination\n    6. Blow out\n    7. Drop tip\n    \nLet's unpack this. Picking up and dropping tips is default behavior for ``distribute()``. Specifying ``touch_tip=True`` adds two steps, as it is performed at both the source and destination. And it's also default behavior for ``distribute()`` to aspirate a disposal volume, which is blown out before dropping the tip. The exact order of steps in the run preview should look similar to this:\n\n.. code-block:: text\n\n    Picking up tip from A1 of tip rack on 3\n    Aspirating 220.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n    Touching tip\n    Dispensing 100.0 uL into B1 of well plate on 2 at 92.86 uL/sec\n    Touching tip\n    Dispensing 100.0 uL into B2 of well plate on 2 at 92.86 uL/sec\n    Touching tip\n    Blowing out at A1 of Opentrons Fixed Trash on 12\n    Dropping tip into A1 of Opentrons Fixed Trash on 12\n    \nSince dispensing and touching the tip are both associated with the destination wells, those steps are performed at each of the two destination wells.\n\n.. _complex-tip-refilling:\n\nTip Refilling\n=============\n\nOne factor that affects the exact order of steps for a complex command is whether the amount of liquid being moved can fit in the tip at once. If it won't fit, you don't have to adjust your command. The API will handle it for you by including additional steps to refill the tip when needed.\n\nFor example, say you need to move 100 uL of liquid from one well to another, but you only have a 50 uL pipette attached to your robot. To accomplish this with building block commands, you'd need multiple aspirates and dispenses.",
        "start_char_idx": 2362,
        "end_char_idx": 4083,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3e189d7a-020e-46d1-9904-2e908115d370": {
      "__data__": {
        "id_": "3e189d7a-020e-46d1-9904-2e908115d370",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "fe100cbc-74d2-41bf-a40b-70d8170d7b31",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e4c42f3409e1483aa58fec22e02b76f7a363420d947df05fcfb147cd56bb5dfd",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0e75adab-8998-455f-b73c-4e13bcb189ab",
            "node_type": "1",
            "metadata": {},
            "hash": "664758ae780cba31b52177ad9d33ffcb179e7761f2da0404aa691a96978e6b76",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _complex-tip-refilling:\n\nTip Refilling\n=============\n\nOne factor that affects the exact order of steps for a complex command is whether the amount of liquid being moved can fit in the tip at once. If it won't fit, you don't have to adjust your command. The API will handle it for you by including additional steps to refill the tip when needed.\n\nFor example, say you need to move 100 uL of liquid from one well to another, but you only have a 50 uL pipette attached to your robot. To accomplish this with building block commands, you'd need multiple aspirates and dispenses. ``aspirate(volume=100)`` would raise an error, since it exceeds the tip's volume. But you can accomplish this with a single transfer command::\n\n    pipette50.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n    )\n\nTo effect the transfer, the API will aspirate and dispense the maximum volume of the pipette (50 uL) twice:\n\n.. code-block:: text\n\n\tPicking up tip from A1 of tip rack on D3\n\tAspirating 50.0 uL from A1 of well plate on D2 at 57 uL/sec\n\tDispensing 50.0 uL into B1 of well plate on D2 at 57 uL/sec\n\tAspirating 50.0 uL from A1 of well plate on D2 at 57 uL/sec\n\tDispensing 50.0 uL into B1 of well plate on D2 at 57 uL/sec\n\tDropping tip into A1 of Opentrons Fixed Trash on A3\n\nYou can change ``volume`` to any value (above the minimum volume of the pipette) and the API will automatically calculate how many times the pipette needs to aspirate and dispense. ``volume=50`` would require just one repetition. ``volume=75`` would require two, split into 50 uL and 25 uL. ``volume=1000`` would repeat 20 times \u2014 not very efficient, but perhaps more useful than having to swap to a different pipette!",
        "start_char_idx": 3506,
        "end_char_idx": 5222,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0e75adab-8998-455f-b73c-4e13bcb189ab": {
      "__data__": {
        "id_": "0e75adab-8998-455f-b73c-4e13bcb189ab",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3e189d7a-020e-46d1-9904-2e908115d370",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "5e9857d757742afe506b3336bf7ab25007cf091afae3da575e1c7bccfd87fe97",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1e92140d-6f5e-46bb-9a95-f0f06f5746db",
            "node_type": "1",
            "metadata": {},
            "hash": "98762ab1f0beb81c290ee0da6ec2f535b4381801bdb2be39e6a7b29626b5fbe9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "``volume=50`` would require just one repetition. ``volume=75`` would require two, split into 50 uL and 25 uL. ``volume=1000`` would repeat 20 times \u2014 not very efficient, but perhaps more useful than having to swap to a different pipette!\n\nRemember that ``distribute()`` includes a disposal volume by default, and this can affect the number of times the pipette refills its tip. Say you want to distribute 80 uL to each of the 12 wells in row A of a plate. That's 960 uL total \u2014 less than the capacity of the pipette \u2014 but the 100 uL disposal volume will cause the pipette to refill.\n\n.. code-block:: text\n\n    Picking up tip from A1 of tip rack on 3\n    Aspirating 980.0 uL from A1 of well plate on 2 at 274.7 uL/sec\n    Dispensing 80.0 uL into B1 of well plate on 2 at 274.7 uL/sec\n    Dispensing 80.0 uL into B2 of well plate on 2 at 274.7 uL/sec\n    ... \n    Dispensing 80.0 uL into B11 of well plate on 2 at 274.7 uL/sec\n    Blowing out at A1 of Opentrons Fixed Trash on 12\n    Aspirating 180.0 uL from A1 of well plate on 2 at 274.7 uL/sec\n    Dispensing 80.0 uL into B12 of well plate on 2 at 274.7 uL/sec\n    Blowing out at A1 of Opentrons Fixed Trash on 12\n    Dropping tip into A1 of Opentrons Fixed Trash on 12\n    \nThis command will blow out 200 total uL of liquid in the trash. If you need to conserve liquid, use :ref:`complex liquid handling parameters <complex_params>` to reduce or eliminate the :ref:`disposal volume <param-disposal-volume>`, or to :ref:`blow out <param-blow-out>` in a location other than the trash.",
        "start_char_idx": 4985,
        "end_char_idx": 6519,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1e92140d-6f5e-46bb-9a95-f0f06f5746db": {
      "__data__": {
        "id_": "1e92140d-6f5e-46bb-9a95-f0f06f5746db",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0e75adab-8998-455f-b73c-4e13bcb189ab",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0c9d29232fef8438013a77fce320abbce59127515445b067e701e4c50b2a7408",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "43773776-973f-420d-ad88-aef356e711c9",
            "node_type": "1",
            "metadata": {},
            "hash": "56560e57cb0ab706c608e1ee598aec5c48c276d17925f35a4e31694ae98065b8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you need to conserve liquid, use :ref:`complex liquid handling parameters <complex_params>` to reduce or eliminate the :ref:`disposal volume <param-disposal-volume>`, or to :ref:`blow out <param-blow-out>` in a location other than the trash.\n\n.. _distribute-consolidate-volume-list:\n.. _complex-list-volumes:\n\nList of Volumes\n===============\n\nComplex commands can aspirate or dispense different amounts for different wells, rather than the same amount across all wells. To do this, set the ``volume`` parameter to a list of volumes instead of a single number. The list must be the same length as the longer of ``source`` or ``dest``, or the API will raise an error. For example, this command transfers a different amount of liquid into each of wells B1, B2, and B3::\n\n    pipette.transfer(\n        volume=[20, 40, 60],\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"], plate[\"B3\"]],\n    )\n\n.. versionadded: 2.0\n\nSetting any item in the list to ``0`` will skip aspirating and dispensing for the corresponding well. This example takes the command from above and skips B2::\n\n    pipette.transfer(\n        volume=[20, 0, 60],\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"], plate[\"B3\"]],\n    )\n    \nThe pipette dispenses in B1 and B3, and does not move to B2 at all.",
        "start_char_idx": 6275,
        "end_char_idx": 7578,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "43773776-973f-420d-ad88-aef356e711c9": {
      "__data__": {
        "id_": "43773776-973f-420d-ad88-aef356e711c9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1e92140d-6f5e-46bb-9a95-f0f06f5746db",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d15326e1b3c1cbb6b748cf72bbc7a6befd82ed62d77c31be5b46610b067f8b16",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2117b6f5-f483-45bf-ab97-a8379528a517",
            "node_type": "1",
            "metadata": {},
            "hash": "2377bc633575b688f9b685c11549b1c03bd5c70f3f351fd23fbaf6e401bd0c14",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, this command transfers a different amount of liquid into each of wells B1, B2, and B3::\n\n    pipette.transfer(\n        volume=[20, 40, 60],\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"], plate[\"B3\"]],\n    )\n\n.. versionadded: 2.0\n\nSetting any item in the list to ``0`` will skip aspirating and dispensing for the corresponding well. This example takes the command from above and skips B2::\n\n    pipette.transfer(\n        volume=[20, 0, 60],\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"], plate[\"B3\"]],\n    )\n    \nThe pipette dispenses in B1 and B3, and does not move to B2 at all.\n\n.. code-block:: text\n\n\tPicking up tip from A1 of tip rack on 3\n\tAspirating 20.0 uL from A1 of well plate on 2 at 274.7 uL/sec\n\tDispensing 20.0 uL into B1 of well plate on 2 at 274.7 uL/sec\n\tAspirating 60.0 uL from A1 of well plate on 2 at 274.7 uL/sec\n\tDispensing 60.0 uL into B3 of well plate on 2 at 274.7 uL/sec\n\tDropping tip into A1 of Opentrons Fixed Trash on 12\n\nThis is such a simple example that you might prefer to use two ``transfer()`` commands instead. Lists of volumes become more useful when they are longer than a couple elements. For example, you can specify ``volume`` as a list with 96 items and ``dest=plate.wells()`` to individually control amounts to dispense (and wells to skip) across an entire plate.\n\t\n.. note::\n    When the optional ``new_tip`` parameter is set to ``\"always\"``, the pipette will pick up and drop a tip even for skipped wells. If you don't want to waste tips, pre-process your list of sources or destinations and use the result as the argument of your complex command.",
        "start_char_idx": 6944,
        "end_char_idx": 8590,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2117b6f5-f483-45bf-ab97-a8379528a517": {
      "__data__": {
        "id_": "2117b6f5-f483-45bf-ab97-a8379528a517",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
          "file_name": "order_operations.rst",
          "file_size": 8717,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f55f850c-bb5d-4c65-8b9c-92f35de143e1",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bb529e9281a5843d1618cb03d3edba28112602431bb6f1d76f6412c3aca43da9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "43773776-973f-420d-ad88-aef356e711c9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "63a8b1b9f7e48d310533234af4e6eba8cde9eda7290c5fdb3cf67448b1a92e9d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "58074a32-3c79-41fd-b1f4-33e803d124af",
            "node_type": "1",
            "metadata": {},
            "hash": "3326594428b59487d8b334d3ffbdaa43f65b019324d26d34f7788d14d864f1f2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Lists of volumes become more useful when they are longer than a couple elements. For example, you can specify ``volume`` as a list with 96 items and ``dest=plate.wells()`` to individually control amounts to dispense (and wells to skip) across an entire plate.\n\t\n.. note::\n    When the optional ``new_tip`` parameter is set to ``\"always\"``, the pipette will pick up and drop a tip even for skipped wells. If you don't want to waste tips, pre-process your list of sources or destinations and use the result as the argument of your complex command.\n\n..\n    Skip wells for ``transfer()`` and ``distribute()``.\n.. versionadded:: 2.8\n    Skip wells for ``consolidate()``.",
        "start_char_idx": 8045,
        "end_char_idx": 8710,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "58074a32-3c79-41fd-b1f4-33e803d124af": {
      "__data__": {
        "id_": "58074a32-3c79-41fd-b1f4-33e803d124af",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2117b6f5-f483-45bf-ab97-a8379528a517",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
              "file_name": "order_operations.rst",
              "file_size": 8717,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "2a06ffdc25a46346641c4050bc0cde0f600ebb4a57d3296ef5c2e91c6736f9c1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a33e930e-3141-491d-bb88-4cc2fde13111",
            "node_type": "1",
            "metadata": {},
            "hash": "0b397d19dc2e783a52986096c1d06bc5d36c8fa7d91f219e926dec858400571f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Parameters for fine-tuning complex liquid handling behavior in the Python API.\n\n.. _complex_params:\n\n**********************************\nComplex Liquid Handling Parameters\n**********************************\n\nComplex commands accept a number of optional parameters that give you greater control over the exact steps they perform.  \n\nThis page describes the accepted values and behavior of each parameter. The parameters are organized in the order that they first add a step. Some parameters, such as ``touch_tip``, add multiple steps. See :ref:`complex-command-order` for more details on the sequence of steps performed by complex commands.\n\nThe API reference entry for :py:meth:`.InstrumentContext.transfer` also lists the parameters and has more information on their implementation as keyword arguments.\n\n.. _param-tip-handling:\n\nTip Handling\n============\n\nThe ``new_tip`` parameter controls if and when complex commands pick up new tips from the pipette's tip racks. It has three possible values:\n\n.. list-table::\n   :header-rows: 1\n\n   * - Value\n     - Behavior\n   * - ``\"once\"``\n     - \n        - Pick up a tip at the start of the command.\n        - Use the tip for all liquid handling.\n        - Drop the tip at the end of the command.\n   * - ``\"always\"``\n     - Pick up and drop a tip for each set of aspirate and dispense steps.\n   * - ``\"never\"``\n     - Do not pick up or drop tips at all.\n     \n``\"once\"`` is the default behavior for all complex commands.\n\n..\n     \nTip Handling Requirements\n-------------------------\n     \n``\"once\"`` and ``\"always\"`` require that the pipette has an :ref:`associated tip rack <pipette-tip-racks>`, or the API will raise an error (because it doesn't know where to pick up a tip from). If the pipette already has a tip attached, the API will also raise an error when it tries to pick up a tip.",
        "start_char_idx": 0,
        "end_char_idx": 1850,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a33e930e-3141-491d-bb88-4cc2fde13111": {
      "__data__": {
        "id_": "a33e930e-3141-491d-bb88-4cc2fde13111",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "58074a32-3c79-41fd-b1f4-33e803d124af",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7af536eaa76018a94ba7e6cd8c5ae2fa05b88e1a60fafce6e89fbebbc8216813",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5e5d5c28-e238-485a-88b0-46cea135634e",
            "node_type": "1",
            "metadata": {},
            "hash": "407fccae8971f87cccbdff139fdd640768929e0f9ac3c9768591496e4bb34802",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- Use the tip for all liquid handling.\n        - Drop the tip at the end of the command.\n   * - ``\"always\"``\n     - Pick up and drop a tip for each set of aspirate and dispense steps.\n   * - ``\"never\"``\n     - Do not pick up or drop tips at all.\n     \n``\"once\"`` is the default behavior for all complex commands.\n\n..\n     \nTip Handling Requirements\n-------------------------\n     \n``\"once\"`` and ``\"always\"`` require that the pipette has an :ref:`associated tip rack <pipette-tip-racks>`, or the API will raise an error (because it doesn't know where to pick up a tip from). If the pipette already has a tip attached, the API will also raise an error when it tries to pick up a tip. \n\n.. code-block:: python\n\n    pipette.pick_up_tip()\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"], plate[\"B3\"]],\n        new_tip=\"never\",  # \"once\", \"always\", or None will error\n    )\n\nConversely, ``\"never\"`` requires that the pipette has picked up a tip, or the API will raise an error (because it will attempt to aspirate without a tip attached).\n\nAvoiding Cross-Contamination\n----------------------------\n\nOne reason to set ``new_tip=\"always\"`` is to avoid cross-contamination between wells. However, you should always do a dry run of your protocol to test that the pipette is picking up and dropping tips in the way that your application requires.\n\n:py:meth:`~.InstrumentContext.transfer` will pick up a new tip before *every* aspirate when ``new_tip=\"always\"``. This includes when :ref:`tip refilling <complex-tip-refilling>` requires multiple aspirations from a single source well.\n\n:py:meth:`~.InstrumentContext.distribute` and :py:meth:`~.InstrumentContext.consolidate` only pick up one tip, even when ``new_tip=\"always\"``.",
        "start_char_idx": 1168,
        "end_char_idx": 2945,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5e5d5c28-e238-485a-88b0-46cea135634e": {
      "__data__": {
        "id_": "5e5d5c28-e238-485a-88b0-46cea135634e",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a33e930e-3141-491d-bb88-4cc2fde13111",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3c414c14d00ecd2d628017e9176e55ff74a3d8149cdd4125f0edb5788855fcd9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "845f2b9d-770b-4274-9e68-8c56039832e4",
            "node_type": "1",
            "metadata": {},
            "hash": "835226a351b953681fb3eab87994822ed56764610a071e8489bac6090a631916",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Avoiding Cross-Contamination\n----------------------------\n\nOne reason to set ``new_tip=\"always\"`` is to avoid cross-contamination between wells. However, you should always do a dry run of your protocol to test that the pipette is picking up and dropping tips in the way that your application requires.\n\n:py:meth:`~.InstrumentContext.transfer` will pick up a new tip before *every* aspirate when ``new_tip=\"always\"``. This includes when :ref:`tip refilling <complex-tip-refilling>` requires multiple aspirations from a single source well.\n\n:py:meth:`~.InstrumentContext.distribute` and :py:meth:`~.InstrumentContext.consolidate` only pick up one tip, even when ``new_tip=\"always\"``. For example, this distribute command returns to the source well a second time, because the amount to be distributed (400 uL total plus disposal volume) exceeds the pipette capacity (300 uL)::\n\n    pipette.distribute(\n        volume=200,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        new_tip=\"always\",\n    )\n    \nBut it *does not* pick up a new tip after dispensing into B1:\n\n.. code-block:: text\n\n    Picking up tip from A1 of tip rack on 3\n    Aspirating 220.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n    Dispensing 200.0 uL into B1 of well plate on 2 at 92.86 uL/sec\n    Blowing out at A1 of Opentrons Fixed Trash on 12\n    Aspirating 220.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n    Dispensing 200.0 uL into B2 of well plate on 2 at 92.86 uL/sec\n    Blowing out at A1 of Opentrons Fixed Trash on 12\n    Dropping tip into A1 of Opentrons Fixed Trash on 12\n\nIf this poses a contamination risk, you can work around it in a few ways:\n\n    * Use ``transfer()`` with ``new_tip=\"always\"`` instead.",
        "start_char_idx": 2264,
        "end_char_idx": 3983,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "845f2b9d-770b-4274-9e68-8c56039832e4": {
      "__data__": {
        "id_": "845f2b9d-770b-4274-9e68-8c56039832e4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5e5d5c28-e238-485a-88b0-46cea135634e",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9ee0e4f682a133060b7a617bb6e4b04ad68cebca3503b2b0933d0ec16c527395",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cb58775b-b524-407b-b9fc-2ab8eeb52c4c",
            "node_type": "1",
            "metadata": {},
            "hash": "eaff7168b41cd5506de686c6afffce2e244554ea7e65384b7d9812b037265460",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "* Set :py:obj:`.well_bottom_clearance` high enough that the tip doesn't contact liquid in the destination well.\n    * Use :ref:`building block commands <v2-atomic-commands>` instead of complex commands.\n\n\n.. _param-mix-before:\n\nMix Before\n==========\n\nThe ``mix_before`` parameter controls mixing in source wells before each aspiration. Its value must be a :py:class:`tuple` with two numeric values. The first value is the number of repetitions, and the second value is the amount of liquid to mix in uL.\n\nFor example, this transfer command will mix 50 uL of liquid 3 times before each of its aspirations::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        mix_before=(3, 50),\n    )\n    \n..\n\nMixing occurs before every aspiration, including when :ref:`tip refilling <complex-tip-refilling>` is required.\n\n.. note::\n    :py:meth:`~.InstrumentContext.consolidate` ignores any value of ``mix_before``. Mixing on the second and subsequent aspirations of a consolidate command would defeat its purpose: to aspirate multiple times in a row, from different wells, *before* dispensing.\n    \n.. _param-disposal-volume:\n\nDisposal Volume\n===============\n\nThe ``disposal_volume`` parameter controls how much extra liquid is aspirated as part of a :py:meth:`~.InstrumentContext.distribute` command. Including a disposal volume can improve the accuracy of each dispense. The pipette blows out the disposal volume of liquid after dispensing. To skip aspirating and blowing out extra liquid, set ``disposal_volume=0``.",
        "start_char_idx": 3988,
        "end_char_idx": 5559,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cb58775b-b524-407b-b9fc-2ab8eeb52c4c": {
      "__data__": {
        "id_": "cb58775b-b524-407b-b9fc-2ab8eeb52c4c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "845f2b9d-770b-4274-9e68-8c56039832e4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1458e19204558e87ceea1189d7ff5deace89836e010a500f86401cca55355841",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d6693392-0548-4317-8f58-471434dd9e7c",
            "node_type": "1",
            "metadata": {},
            "hash": "ddc7f12bdc720da8877009d0c4ab6de5d3c26d3b3301f342639fa65088d18616",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. note::\n    :py:meth:`~.InstrumentContext.consolidate` ignores any value of ``mix_before``. Mixing on the second and subsequent aspirations of a consolidate command would defeat its purpose: to aspirate multiple times in a row, from different wells, *before* dispensing.\n    \n.. _param-disposal-volume:\n\nDisposal Volume\n===============\n\nThe ``disposal_volume`` parameter controls how much extra liquid is aspirated as part of a :py:meth:`~.InstrumentContext.distribute` command. Including a disposal volume can improve the accuracy of each dispense. The pipette blows out the disposal volume of liquid after dispensing. To skip aspirating and blowing out extra liquid, set ``disposal_volume=0``.\n\nBy default, ``disposal_volume`` is the :ref:`minimum volume <new-pipette-models>` of the pipette, but you can set it to any amount::\n\n    pipette.distribute(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        disposal_volume=10,  # reduce from default 20 uL to 10 uL\n    )\n    \n..\n    \nIf the amount to aspirate plus the disposal volume exceeds the tip's capacity, ``distribute()`` will use a :ref:`tip refilling strategy <complex-tip-refilling>`. In such cases, the pipette will aspirate and blow out the disposal volume *for each aspiration*. For example, this command will require tip refilling with a 1000 uL pipette::\n    \n    pipette.distribute(\n        volume=120,\n        source=reservoir[\"A1\"],\n        dest=[plate.columns()[0]],\n        disposal_volume=50,\n    )\n    \nThe amount to dispense in the destination is 960 uL (120 uL for each of 8 wells in the column). Adding the 50 uL disposal volume exceeds the 1000 uL capacity of the tip. The command will be split across two aspirations, each with the full disposal volume of 50 uL. The pipette will dispose *a total of 100 uL* during the command.",
        "start_char_idx": 4862,
        "end_char_idx": 6714,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d6693392-0548-4317-8f58-471434dd9e7c": {
      "__data__": {
        "id_": "d6693392-0548-4317-8f58-471434dd9e7c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cb58775b-b524-407b-b9fc-2ab8eeb52c4c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "039e7efcd3d0601d494c5b33aaf4d7a9d33d47922436228c38b5cd2591b4838e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "18dcc255-3559-4715-b452-baedecc77545",
            "node_type": "1",
            "metadata": {},
            "hash": "56b547b83bb48227e606f0d55ccc0da0d29aae3bbdb40b4b3344f1506d220ead",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In such cases, the pipette will aspirate and blow out the disposal volume *for each aspiration*. For example, this command will require tip refilling with a 1000 uL pipette::\n    \n    pipette.distribute(\n        volume=120,\n        source=reservoir[\"A1\"],\n        dest=[plate.columns()[0]],\n        disposal_volume=50,\n    )\n    \nThe amount to dispense in the destination is 960 uL (120 uL for each of 8 wells in the column). Adding the 50 uL disposal volume exceeds the 1000 uL capacity of the tip. The command will be split across two aspirations, each with the full disposal volume of 50 uL. The pipette will dispose *a total of 100 uL* during the command.\n\n.. note::\n    :py:meth:`~.InstrumentContext.transfer` will not aspirate additional liquid if you set ``disposal_volume``. However, it will perform a very small blow out after each dispense.\n    \n    :py:meth:`~.InstrumentContext.consolidate` ignores ``disposal_volume`` completely.\n\n.. _param-touch-tip:\n\nTouch Tip\n=========\n\nThe ``touch_tip`` parameter accepts a Boolean value. When ``True``, a touch tip step occurs after every aspirate and dispense.\n\nFor example, this transfer command aspirates, touches the tip at the source, dispenses, and touches the tip at the destination::\n\n    pipette.transfer(\n        volume=100,\n        dest=plate[\"A1\"],\n        source=plate[\"B1\"],\n        touch_tip=True,\n    )\n\n..\n\nTouch tip occurs after every aspiration, including when :ref:`tip refilling <complex-tip-refilling>` is required.\n\nThis parameter always uses default motion behavior for touch tip. Use the :ref:`touch tip building block command <touch-tip>` if you need to:\n\n    * Only touch the tip after aspirating or dispensing, but not both.\n    * Control the speed, radius, or height of the touch tip motion.\n\n.. _param-air-gap:\n\nAir Gap\n=======\n\nThe ``air_gap`` parameter controls how much air to aspirate and hold in the bottom of the tip when it contains liquid. The parameter's value is the amount of air to aspirate in uL.",
        "start_char_idx": 6055,
        "end_char_idx": 8046,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "18dcc255-3559-4715-b452-baedecc77545": {
      "__data__": {
        "id_": "18dcc255-3559-4715-b452-baedecc77545",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d6693392-0548-4317-8f58-471434dd9e7c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "86a6a91a8dc1e87d9aff6d791469164c09165146c264becad4d87cd4034792c9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bce02060-3326-43af-870e-a03cad701b05",
            "node_type": "1",
            "metadata": {},
            "hash": "8888543479bc940f9244da925c5ea966913ed141e14cf0d9071dbe159ebeb310",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This parameter always uses default motion behavior for touch tip. Use the :ref:`touch tip building block command <touch-tip>` if you need to:\n\n    * Only touch the tip after aspirating or dispensing, but not both.\n    * Control the speed, radius, or height of the touch tip motion.\n\n.. _param-air-gap:\n\nAir Gap\n=======\n\nThe ``air_gap`` parameter controls how much air to aspirate and hold in the bottom of the tip when it contains liquid. The parameter's value is the amount of air to aspirate in uL.\n\nAir-gapping behavior is different for each complex command. The different behaviors all serve the same purpose, which is to never leave the pipette holding liquid at the very bottom of the tip. This helps keep liquids from seeping out of the pipette.\n\n.. list-table::\n   :header-rows: 1\n\n   * - Method\n     - Air-gapping behavior\n   * - ``transfer()``\n     - \n       - Air gap after each aspiration.\n       - Pipette is empty after dispensing.\n   * - ``distribute()``\n     - \n       - Air gap after each aspiration.\n       - Air gap after dispensing if the pipette isn't empty.\n   * - ``consolidate()``\n     - \n       - Air gap after each aspiration. This may create multiple air gaps within the tip.\n       - Pipette is empty after dispensing.\n\nFor example, this transfer command will create a 20 uL air gap after each of its aspirations. When dispensing, it will clear the air gap and dispense the full 100 uL of liquid::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        air_gap=20,\n    )\n    \n..\n\nWhen consolidating, air gaps still occur after every aspiration.",
        "start_char_idx": 7546,
        "end_char_idx": 9168,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bce02060-3326-43af-870e-a03cad701b05": {
      "__data__": {
        "id_": "bce02060-3326-43af-870e-a03cad701b05",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "18dcc255-3559-4715-b452-baedecc77545",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7a0457362cd9761745ef3eab738eb41b3337dd2401f8284712e3695df665e485",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e3dd77e5-4225-4b6f-921e-9db7edc76117",
            "node_type": "1",
            "metadata": {},
            "hash": "ad9911e3f59d0f8c3b08832dc24521ef8c3da01946177640c934d4c896344f46",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- Pipette is empty after dispensing.\n   * - ``distribute()``\n     - \n       - Air gap after each aspiration.\n       - Air gap after dispensing if the pipette isn't empty.\n   * - ``consolidate()``\n     - \n       - Air gap after each aspiration. This may create multiple air gaps within the tip.\n       - Pipette is empty after dispensing.\n\nFor example, this transfer command will create a 20 uL air gap after each of its aspirations. When dispensing, it will clear the air gap and dispense the full 100 uL of liquid::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        air_gap=20,\n    )\n    \n..\n\nWhen consolidating, air gaps still occur after every aspiration. In this example, the tip will use 210 uL of its capacity (50 uL of liquid followed by 20 uL of air, repeated three times)::\n\n    pipette.consolidate(\n        volume=50,\n        source=[plate[\"A1\"], plate[\"A2\"], plate[\"A3\"]],\n        dest=plate[\"B1\"],\n        air_gap=20,\n    )\n\n.. code-block:: text\n\n    Picking up tip from A1 of tip rack on 3\n    Aspirating 50.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n    Air gap\n        Aspirating 20.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n    Aspirating 50.0 uL from A2 of well plate on 2 at 92.86 uL/sec\n    Air gap\n        Aspirating 20.0 uL from A2 of well plate on 2 at 92.86 uL/sec\n    Aspirating 50.0 uL from A3 of well plate on 2 at 92.86 uL/sec\n    Air gap\n        Aspirating 20.0 uL from A3 of well plate on 2 at 92.86 uL/sec\n    Dispensing 210.0 uL into B1 of well plate on 2 at 92.86 uL/sec\n    Dropping tip into A1 of Opentrons Fixed Trash on 12\n    \nIf adding an air gap would exceed the pipette's maximum volume, the complex command will use a :ref:`tip refilling strategy <complex-tip-refilling>`.",
        "start_char_idx": 8455,
        "end_char_idx": 10234,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e3dd77e5-4225-4b6f-921e-9db7edc76117": {
      "__data__": {
        "id_": "e3dd77e5-4225-4b6f-921e-9db7edc76117",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bce02060-3326-43af-870e-a03cad701b05",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "828f3cf7def5356914caa032b593a698c9750841fd8e0f1e467071e076bfc4a4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e",
            "node_type": "1",
            "metadata": {},
            "hash": "6038e9aa45ceda94fc787000817b83f48bffd359f48da3f41c352dbf9006efd2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, this command uses a 300 uL pipette to transfer 300 uL of liquid plus an air gap::\n\n    pipette.transfer(\n        volume=300,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        air_gap=20,\n    )\n\nAs a result, the transfer is split into two aspirates of 150 uL, each with their own 20 uL air gap:\n\n.. code-block:: text\n\n\tPicking up tip from A1 of tip rack on 3\n\tAspirating 150.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n\tAir gap\n\t\tAspirating 20.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n\tDispensing 170.0 uL into B1 of well plate on 2 at 92.86 uL/sec\n\tAspirating 150.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n\tAir gap\n\t\tAspirating 20.0 uL from A1 of well plate on 2 at 92.86 uL/sec\n\tDispensing 170.0 uL into B1 of well plate on 2 at 92.86 uL/sec\n\tDropping tip into A1 of Opentrons Fixed Trash on 12\n\n.. _param-mix-after:\n\nMix After\n=========\n\nThe ``mix_after`` parameter controls mixing in source wells after each dispense. Its value must be a :py:class:`tuple` with two numeric values. The first value is the number of repetitions, and the second value is the amount of liquid to mix in uL.\n\nFor example, this transfer command will mix 50 uL of liquid 3 times after each of its dispenses::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        mix_after=(3, 50),\n    )\n    \n..\n\n.. note::\n    :py:meth:`~.InstrumentContext.distribute` ignores any value of ``mix_after``.",
        "start_char_idx": 10235,
        "end_char_idx": 11710,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e": {
      "__data__": {
        "id_": "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e3dd77e5-4225-4b6f-921e-9db7edc76117",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c7adf01c1ff7c0e9f8f1fdba90da89319fb03472e7e544ba8649f1e647e8d81f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d195d40c-58be-4647-a367-c03fec0b3b70",
            "node_type": "1",
            "metadata": {},
            "hash": "0629b32559e3997b3979f2ec5ebc18e5e76a73f010ab9ac634e2fa7586012b67",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Its value must be a :py:class:`tuple` with two numeric values. The first value is the number of repetitions, and the second value is the amount of liquid to mix in uL.\n\nFor example, this transfer command will mix 50 uL of liquid 3 times after each of its dispenses::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        mix_after=(3, 50),\n    )\n    \n..\n\n.. note::\n    :py:meth:`~.InstrumentContext.distribute` ignores any value of ``mix_after``. Mixing after dispensing would combine (and potentially contaminate) the remaining source liquid with liquid present at the destination.\n\n.. _param-blow-out:\n\nBlow Out\n========\n\nThere are two parameters that control whether and where the pipette blows out liquid. The ``blow_out`` parameter accepts a Boolean value. When ``True``, the pipette blows out remaining liquid when the tip is empty or only contains the disposal volume. The ``blowout_location`` parameter controls in which of three locations these blowout actions occur. The default blowout location is the trash. Blowout behavior is different for each complex command. \n\n.. list-table::\n   :header-rows: 1\n\n   * - Method\n     - Blowout behavior and location\n   * - ``transfer()``\n     -\n       - Blow out after each dispense.\n       - Valid locations: ``\"trash\"``, ``\"source well\"``, ``\"destination well\"``\n   * - ``distribute()``\n     - \n       - Blow out after the final dispense.\n       - Valid locations: ``\"trash\"``, ``\"source well\"``\n   * - ``consolidate()``\n     - \n       - Blow out after the only dispense.",
        "start_char_idx": 11198,
        "end_char_idx": 12786,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d195d40c-58be-4647-a367-c03fec0b3b70": {
      "__data__": {
        "id_": "d195d40c-58be-4647-a367-c03fec0b3b70",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ca7b7f805dae4b13c017c0a818225cb7c4aafa230eb087fb6b919046917a1c54",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "85311773-cc40-40c8-9184-15ff45fba6dd",
            "node_type": "1",
            "metadata": {},
            "hash": "f72aa2df7f743dddf71b2b0d5a1f6bbf6c47bf95e3a645150f2dbd7a7d98032f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When ``True``, the pipette blows out remaining liquid when the tip is empty or only contains the disposal volume. The ``blowout_location`` parameter controls in which of three locations these blowout actions occur. The default blowout location is the trash. Blowout behavior is different for each complex command. \n\n.. list-table::\n   :header-rows: 1\n\n   * - Method\n     - Blowout behavior and location\n   * - ``transfer()``\n     -\n       - Blow out after each dispense.\n       - Valid locations: ``\"trash\"``, ``\"source well\"``, ``\"destination well\"``\n   * - ``distribute()``\n     - \n       - Blow out after the final dispense.\n       - Valid locations: ``\"trash\"``, ``\"source well\"``\n   * - ``consolidate()``\n     - \n       - Blow out after the only dispense.\n       - Valid locations: ``\"trash\"``, ``\"destination well\"``\n\nFor example, this transfer command will blow out liquid in the trash twice, once after each dispense into a destination well::\n\n    pipette.transfer(\n        volume=100,\n        source=[plate[\"A1\"], plate[\"A2\"]],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        blow_out=True,\n    )\n\n..\n\nSet ``blowout_location`` when you don't want to waste any liquid by blowing it out into the trash. For example, you may want to make sure that every last bit of a sample is moved into a destination well. Or you may want to return every last bit of an expensive reagent to the source for use in later pipetting. \n\nIf you need to blow out in a different well, or at a specific location within a well, use the :ref:`blow out building block command <blow-out>` instead.",
        "start_char_idx": 12026,
        "end_char_idx": 13603,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "85311773-cc40-40c8-9184-15ff45fba6dd": {
      "__data__": {
        "id_": "85311773-cc40-40c8-9184-15ff45fba6dd",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d195d40c-58be-4647-a367-c03fec0b3b70",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "896c1ccfc4f8c66904c39e588b3b7a727b30780de6baea4748cab8fb3a67e49a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995",
            "node_type": "1",
            "metadata": {},
            "hash": "c06b6b8c9e517bc290706d70d7dfadadcaec7fee74dc9ab2cc5252862afcfd06",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- Valid locations: ``\"trash\"``, ``\"destination well\"``\n\nFor example, this transfer command will blow out liquid in the trash twice, once after each dispense into a destination well::\n\n    pipette.transfer(\n        volume=100,\n        source=[plate[\"A1\"], plate[\"A2\"]],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        blow_out=True,\n    )\n\n..\n\nSet ``blowout_location`` when you don't want to waste any liquid by blowing it out into the trash. For example, you may want to make sure that every last bit of a sample is moved into a destination well. Or you may want to return every last bit of an expensive reagent to the source for use in later pipetting. \n\nIf you need to blow out in a different well, or at a specific location within a well, use the :ref:`blow out building block command <blow-out>` instead.\n\nWhen setting a blowout location, you *must* also set ``blow_out=True``, or the location will be ignored::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        blow_out=True,  # required to set location\n        blowout_location=\"destination well\",\n    )\n\n.. versionadded:: 2.8\n\nWith ``transfer()``, the pipette will not blow out at all if you only set ``blowout_location``.\n\n``blow_out=True`` is also required for distribute commands that blow out by virtue of having a disposal volume::\n\n    pipette.distribute(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        disposal_volume=50,  # causes blow out\n        blow_out=True,       # still required to set location!\n        blowout_location=\"source well\",\n    )\n\nWith ``distribute()``, the pipette will still blow out if you only set ``blowout_location``, but in the default location of the trash.\n\n.. note::\n    If the tip already contains liquid before the complex command, the default blowout location will shift away from the trash.",
        "start_char_idx": 12794,
        "end_char_idx": 14688,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995": {
      "__data__": {
        "id_": "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
          "file_name": "parameters.rst",
          "file_size": 15847,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "63e31b90-e708-4b24-89cc-1e383bb9f237",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6cca697e534eee5ccf1eeefa20ac077c7231babdf440b8d135f13844a6963e8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "85311773-cc40-40c8-9184-15ff45fba6dd",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "76da647c262f1cb9b2c6cf043b0841009a27f87b853ae948827e9d6056bde4fd",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "48346ec0-5a70-4849-95c6-46a53791dbda",
            "node_type": "1",
            "metadata": {},
            "hash": "f3741d86a5bbc01f9c4fa84058bd9bff333a929cc77470700788ddb063ca0853",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "``blow_out=True`` is also required for distribute commands that blow out by virtue of having a disposal volume::\n\n    pipette.distribute(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=[plate[\"B1\"], plate[\"B2\"]],\n        disposal_volume=50,  # causes blow out\n        blow_out=True,       # still required to set location!\n        blowout_location=\"source well\",\n    )\n\nWith ``distribute()``, the pipette will still blow out if you only set ``blowout_location``, but in the default location of the trash.\n\n.. note::\n    If the tip already contains liquid before the complex command, the default blowout location will shift away from the trash. ``transfer()`` and ``distribute()`` shift to the source well, and ``consolidate()`` shifts to the destination well. For example, this transfer command will blow out in well B1 because it's the source::\n    \n        pipette.pick_up_tip()\n        pipette.aspirate(100, plate[\"A1\"])    \n        pipette.transfer(\n            volume=100,\n            source=plate[\"B1\"],\n            dest=plate[\"C1\"],\n            new_tip=\"never\",\n            blow_out=True,\n            # no blowout_location\n        )\n        pipette.drop_tip()\n\n    This only occurs when you aspirate and then perform a complex command with ``new_tip=\"never\"`` and ``blow_out=True``.\n\n.. _param-trash:\n\nTrash Tips\n==========\n\nThe ``trash`` parameter controls what the pipette does with tips at the end of complex commands. When ``True``, the pipette drops tips into the trash. When ``False``, the pipette returns tips to their original locations in their tip rack. \n\nThe default is ``True``, so you only have to set ``trash`` when you want the tip-returning behavior::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"B1\"],\n        trash=False,\n    )\n\n..",
        "start_char_idx": 14031,
        "end_char_idx": 15847,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "48346ec0-5a70-4849-95c6-46a53791dbda": {
      "__data__": {
        "id_": "48346ec0-5a70-4849-95c6-46a53791dbda",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
              "file_name": "parameters.rst",
              "file_size": 15847,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bfec6248b612d99f4cdbbc63d38d8d4bd1d73892e1dd22afddae0b15d7df3faf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7",
            "node_type": "1",
            "metadata": {},
            "hash": "d505114519e8d505653c4e38e0a435e60d852e5f20613f13790dfcee4927f5df",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How the Opentrons Python API moves liquids between wells when using complex commands.\n\n.. _complex-source-dest:\n\n************************\nSources and Destinations\n************************\n\nThe :py:meth:`.InstrumentContext.transfer`, :py:meth:`.InstrumentContext.distribute`, and :py:meth:`.InstrumentContext.consolidate` methods form the family of complex liquid handling commands. These methods require ``source`` and ``dest`` (destination) arguments to move liquid from one well, or group of wells, to another. In contrast, the :ref:`building block commands <v2-atomic-commands>` :py:meth:`~.InstrumentContext.aspirate` and :py:meth:`~.InstrumentContext.dispense` only operate in a single location.\n\nFor example, this command performs a simple transfer between two wells on a plate::\n\n    pipette.transfer(\n        volume=100,\n        source=plate[\"A1\"],\n        dest=plate[\"A2\"],\n    )\n\n..\n\nThis page covers the restrictions on sources and destinations for complex commands, their different patterns of aspirating and dispensing, and how to optimize them for different use cases.\n\n\n.. _source-dest-args:\n\nSource and Destination Arguments\n================================\n\nAs noted above, the :py:meth:`~.InstrumentContext.transfer`, :py:meth:`~.InstrumentContext.distribute`, and :py:meth:`~.InstrumentContext.consolidate` methods require ``source`` and ``dest`` (destination) arguments to aspirate and dispense liquid. However, each method handles liquid sources and destinations differently. Understanding how complex commands work with source and destination wells is essential to using these methods effectively.\n\n:py:meth:`~.InstrumentContext.transfer` is the most versatile complex liquid handling function, because it has the fewest restrictions on what wells it can operate on. You will likely use transfer commands in many of your protocols.\n\nCertain liquid handling cases focus on moving liquid to or from a single well. :py:meth:`~.InstrumentContext.distribute` limits its source to a single well, while :py:meth:`~.InstrumentContext.consolidate` limits its destination to a single well. Distribute commands also make  changes to liquid-handling behavior to improve the accuracy of dispensing.\n\nThe following table summarizes the source and destination restrictions for each method.",
        "start_char_idx": 0,
        "end_char_idx": 2313,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7": {
      "__data__": {
        "id_": "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "48346ec0-5a70-4849-95c6-46a53791dbda",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "410634def26ee2b6b33e31952fb1b8b8b21e7de75f0e4e595c9441657f5ff15e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0655b0e4-6783-4fd6-a9a8-d6eee5b45921",
            "node_type": "1",
            "metadata": {},
            "hash": "2e7540d1eaa8e59148305757ad480da4a91e2fa1f18849332dac54796f91e1aa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "However, each method handles liquid sources and destinations differently. Understanding how complex commands work with source and destination wells is essential to using these methods effectively.\n\n:py:meth:`~.InstrumentContext.transfer` is the most versatile complex liquid handling function, because it has the fewest restrictions on what wells it can operate on. You will likely use transfer commands in many of your protocols.\n\nCertain liquid handling cases focus on moving liquid to or from a single well. :py:meth:`~.InstrumentContext.distribute` limits its source to a single well, while :py:meth:`~.InstrumentContext.consolidate` limits its destination to a single well. Distribute commands also make  changes to liquid-handling behavior to improve the accuracy of dispensing.\n\nThe following table summarizes the source and destination restrictions for each method.\n\n.. list-table::\n   :header-rows: 1\n\n   * - Method\n     - Accepted wells\n   * - ``transfer()``\n     - \n       - **Source:** Any number of wells.\n       - **Destination:** Any number of wells.\n       - The larger group of wells must be evenly divisible by the smaller group.\n   * - ``distribute()``\n     - \n       - **Source:** Exactly one well.\n       - **Destination:** Any number of wells.\n   * - ``consolidate()``\n     - \n       - **Source:** Any number of wells.\n       - **Destination:** Exactly one well.\n\nA single well can be passed by itself or as a list with one item: ``source=plate['A1']`` and ``source=[plate['A1']]`` are equivalent.\n    \nThe section on :ref:`many-to-many transfers <many-to-many>` below covers how ``transfer()`` works when specifying sources and destinations of different sizes. However, if they don't meet the even divisibility requirement, the API will raise an error. You can work around such situations by making multiple calls to ``transfer()`` in sequence or by using a :ref:`list of volumes <complex-list-volumes>` to skip certain wells.\n\nFor distributing and consolidating, the API will not raise an error if you use a list of wells as the argument that is limited to exactly one well. Instead, the API will ignore everything except the first well in the list.",
        "start_char_idx": 1440,
        "end_char_idx": 3613,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0655b0e4-6783-4fd6-a9a8-d6eee5b45921": {
      "__data__": {
        "id_": "0655b0e4-6783-4fd6-a9a8-d6eee5b45921",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d8e72d3131f8740f2ae22e27fb78b9da8390cd46e26d546f1cd31c470f382471",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef",
            "node_type": "1",
            "metadata": {},
            "hash": "2bef9b6367a21f78a45a50f0a09846b984f0a7e3956454d53f6070bc9524ec4e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- **Destination:** Exactly one well.\n\nA single well can be passed by itself or as a list with one item: ``source=plate['A1']`` and ``source=[plate['A1']]`` are equivalent.\n    \nThe section on :ref:`many-to-many transfers <many-to-many>` below covers how ``transfer()`` works when specifying sources and destinations of different sizes. However, if they don't meet the even divisibility requirement, the API will raise an error. You can work around such situations by making multiple calls to ``transfer()`` in sequence or by using a :ref:`list of volumes <complex-list-volumes>` to skip certain wells.\n\nFor distributing and consolidating, the API will not raise an error if you use a list of wells as the argument that is limited to exactly one well. Instead, the API will ignore everything except the first well in the list. For example, the following command will only aspirate from well A1::\n\n    pipette.distribute(\n        volume=100,\n        source=[plate[\"A1\"], plate[\"A2\"]],  # A2 ignored\n        dest=plate.columns()[1],\n    )\n\nOn the other hand, a transfer command with the same arguments would aspirate from both A1 and A2. The next section examines the exact order of aspiration and dispensing for all three methods.\n\n.. _complex-transfer-patterns:\n\nTransfer Patterns\n=================\n\nEach complex command uses a different pattern of aspiration and dispensing. In addition, when you provide multiple wells as both the source and destination for ``transfer()``, it maps the source list onto the destination list in a certain way.\n\nAspirating and Dispensing\n-------------------------\n\n``transfer()`` always alternates between aspirating and dispensing, regardless of how many wells are in the source and destination. Its default behavior is:\n\n    1. Pick up a tip.\n    2. Aspirate from the first source well.\n    3. Dispense in the first destination well.\n    4. Repeat the pattern of aspirating and dispensing, as needed.\n    5. Drop the tip in the trash.",
        "start_char_idx": 2788,
        "end_char_idx": 4756,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef": {
      "__data__": {
        "id_": "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0655b0e4-6783-4fd6-a9a8-d6eee5b45921",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "012b8d99f5aa6d10810819f3c43359c4bab33a74c500085a294d23b5f5dfee43",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180",
            "node_type": "1",
            "metadata": {},
            "hash": "16d652368f66e1819e5ca07140583d0a8eca7d2507508e8d7cf7ad21ef3c6de4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The next section examines the exact order of aspiration and dispensing for all three methods.\n\n.. _complex-transfer-patterns:\n\nTransfer Patterns\n=================\n\nEach complex command uses a different pattern of aspiration and dispensing. In addition, when you provide multiple wells as both the source and destination for ``transfer()``, it maps the source list onto the destination list in a certain way.\n\nAspirating and Dispensing\n-------------------------\n\n``transfer()`` always alternates between aspirating and dispensing, regardless of how many wells are in the source and destination. Its default behavior is:\n\n    1. Pick up a tip.\n    2. Aspirate from the first source well.\n    3. Dispense in the first destination well.\n    4. Repeat the pattern of aspirating and dispensing, as needed.\n    5. Drop the tip in the trash.\n    \n.. figure:: ../../img/complex_commands/transfer.png\n    :name: Transfer\n    :scale: 35%\n    :align: center\n    \n    This transfer aspirates six times and dispenses six times.\n    \n``distribute()`` always fills the tip with as few aspirations as possible, and then dispenses to the destination wells in order. Its default behavior is:\n\n    1. Pick up a tip.\n    2. Aspirate enough to dispense in all the destination wells. This aspirate includes a disposal volume.\n    3. Dispense in the first destination well.\n    4. Continue to dispense in destination wells.\n    5. Drop the tip in the trash.\n    \nSee :ref:`complex-tip-refilling` below for cases where the total amount to be dispensed is greater than the capacity of the tip.\n    \n.. figure:: ../../img/complex_commands/robot_distribute.png\n    :name: Transfer\n    :scale: 35%\n    :align: center\n    \n    This distribute aspirates one time and dispenses three times.\n    \n``consolidate()`` aspirates multiple times in a row, and then dispenses as few times as possible in the destination well. Its default behavior is:\n\n    1. Pick up a tip.\n    2. Aspirate from the first source well.\n    3. Continue aspirating from source wells.\n    4.",
        "start_char_idx": 3923,
        "end_char_idx": 5953,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180": {
      "__data__": {
        "id_": "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d038f59150a56ad2b931cc76bd236bf7b1bc7c658baccdf64708220205520fcb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "db03df28-87cf-49a7-8db2-91abd8f871eb",
            "node_type": "1",
            "metadata": {},
            "hash": "45ccb9dff028364797346d5729b4f6cd7c86613a2a1f4051e0a74dfccd1bf36c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This aspirate includes a disposal volume.\n    3. Dispense in the first destination well.\n    4. Continue to dispense in destination wells.\n    5. Drop the tip in the trash.\n    \nSee :ref:`complex-tip-refilling` below for cases where the total amount to be dispensed is greater than the capacity of the tip.\n    \n.. figure:: ../../img/complex_commands/robot_distribute.png\n    :name: Transfer\n    :scale: 35%\n    :align: center\n    \n    This distribute aspirates one time and dispenses three times.\n    \n``consolidate()`` aspirates multiple times in a row, and then dispenses as few times as possible in the destination well. Its default behavior is:\n\n    1. Pick up a tip.\n    2. Aspirate from the first source well.\n    3. Continue aspirating from source wells.\n    4. Dispense in the destination well.\n    5. Drop the tip in the trash.\n    \nSee :ref:`complex-tip-refilling` below for cases where the total amount to be aspirated is greater than the capacity of the tip.\n\n.. figure:: ../../img/complex_commands/robot_consolidate.png\n    :name: Transfer\n    :scale: 35%\n    :align: center\n    \n    This consolidate aspirates three times and dispenses one time.\n    \n.. note::\n    By default, all three commands begin by picking up a tip and conclude by dropping a tip. In general, don't call :py:meth:`.pick_up_tip` just before a complex command, or the API will raise an error. You can override this behavior with the :ref:`tip handling complex parameter <param-tip-handling>`, by setting ``new_tip=\"never\"``.\n\n\n.. _many-to-many:\n\nMany-to-Many\n------------\n\n``transfer()`` lets you specify both ``source`` and ``dest`` arguments that contain multiple wells. This section covers how the method determines which wells to aspirate from and dispense to in these cases.\n\nWhen the source and destination both contain the same number of wells, the mapping between wells is straightforward.",
        "start_char_idx": 5184,
        "end_char_idx": 7067,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "db03df28-87cf-49a7-8db2-91abd8f871eb": {
      "__data__": {
        "id_": "db03df28-87cf-49a7-8db2-91abd8f871eb",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f6a1849581565aeb966b3f3f76eaffcde00a0122a9b70158fddce03b2401448d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a",
            "node_type": "1",
            "metadata": {},
            "hash": "472a0a4e1cb4b1f7c0796b7005699516886add734f2e205226bb855966b1f14b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. note::\n    By default, all three commands begin by picking up a tip and conclude by dropping a tip. In general, don't call :py:meth:`.pick_up_tip` just before a complex command, or the API will raise an error. You can override this behavior with the :ref:`tip handling complex parameter <param-tip-handling>`, by setting ``new_tip=\"never\"``.\n\n\n.. _many-to-many:\n\nMany-to-Many\n------------\n\n``transfer()`` lets you specify both ``source`` and ``dest`` arguments that contain multiple wells. This section covers how the method determines which wells to aspirate from and dispense to in these cases.\n\nWhen the source and destination both contain the same number of wells, the mapping between wells is straightforward. You can imagine writing out the two lists one above each other, with each unique well in the source list paired to a unique well in the destination list. For example, here is the code for using one row as the source and another row as the destination, and the resulting correspondence between wells::\n\n    pipette.transfer(\n        volume=50,\n        source=plate.rows()[0],\n        dest=plate.rows()[1],\n    )\n\n.. list-table::\n    :stub-columns: 1\n\n    * - Source\n      - A1\n      - A2\n      - A3\n      - A4\n      - A5\n      - A6\n      - A7\n      - A8\n      - A9\n      - A10\n      - A11\n      - A12\n    * - Destination\n      - B1\n      - B2\n      - B3\n      - B4\n      - B5\n      - B6\n      - B7\n      - B8\n      - B9\n      - B10\n      - B11\n      - B12\n\nThere's no requirement that the source and destination lists be mutually exclusive.",
        "start_char_idx": 6350,
        "end_char_idx": 7907,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a": {
      "__data__": {
        "id_": "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "db03df28-87cf-49a7-8db2-91abd8f871eb",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7cf5618ebe26201238390680fc610be62cc062f3c255f38cd5d8a45b84e269b2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e3dc24c2-7188-4e06-8c16-95b620d60c9c",
            "node_type": "1",
            "metadata": {},
            "hash": "4f32bea5b7e4286d900edc0cebbb6be9f9977c3362eddb687e9c1f055528892c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In fact, this command adapted from the :ref:`tutorial <tutorial>` deliberately uses slices of the same list, saved to the variable ``row``, with the effect that each aspiration happens in the same location as the previous dispense::\n\n    row = plate.rows()[0]\n    pipette.transfer(\n        volume=50, \n        source=row[:11], \n        dest=row[1:],\n    )\n\n.. list-table::\n    :stub-columns: 1\n\n    * - Source\n      - A1\n      - A2\n      - A3\n      - A4\n      - A5\n      - A6\n      - A7\n      - A8\n      - A9\n      - A10\n      - A11\n    * - Destination\n      - A2\n      - A3\n      - A4\n      - A5\n      - A6\n      - A7\n      - A8\n      - A9\n      - A10\n      - A11\n      - A12\n      \nWhen the source and destination lists contain different numbers of wells, ``transfer()`` will always aspirate and dispense as many times as there are wells in the *longer* list. The shorter list will be \"stretched\" to cover the length of the longer list.",
        "start_char_idx": 7908,
        "end_char_idx": 8846,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e3dc24c2-7188-4e06-8c16-95b620d60c9c": {
      "__data__": {
        "id_": "e3dc24c2-7188-4e06-8c16-95b620d60c9c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9ebfe518702be9744d609642a60f350c0225b404d36eff4507fa4d07e10948be",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1",
            "node_type": "1",
            "metadata": {},
            "hash": "0d62119af3f5da25500b1885bbf089bab906ca656ee22caec1ef005c34a0a882",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The shorter list will be \"stretched\" to cover the length of the longer list. Here is an example of transferring from 3 wells to a full row of 12 wells:: \n\n    pipette.transfer(\n        volume=50,\n        source=[plate[\"A1\"], plate[\"A2\"], plate[\"A3\"]],\n        dest=plate.rows()[1],\n    )\n\n.. list-table::\n    :stub-columns: 1\n\n    * - Source\n      - A1\n      - A1\n      - A1\n      - A1\n      - A2\n      - A2\n      - A2\n      - A2\n      - A3\n      - A3\n      - A3\n      - A3\n    * - Destination\n      - B1\n      - B2\n      - B3\n      - B4\n      - B5\n      - B6\n      - B7\n      - B8\n      - B9\n      - B10\n      - B11\n      - B12\n\nThis is why the longer list must be evenly divisible by the shorter list. Changing the destination in this example to a column instead of a row will cause the API to raise an error, because 8 is not evenly divisible by 3::\n\n    pipette.transfer(\n        volume=50,\n        source=[plate[\"A1\"], plate[\"A2\"], plate[\"A3\"]],\n        dest=plate.columns()[3],  # labware column 4\n    )\n    # error: source and destination lists must be divisible\n    \nThe API raises this error rather than presuming which wells to aspirate from three times and which only two times. If you want to aspirate three times from A1, three times from A2, and two times from A3, use multiple ``transfer()`` commands in sequence::\n\n    pipette.transfer(50, plate[\"A1\"], plate.columns()[3][:3])\n    pipette.transfer(50, plate[\"A2\"], plate.columns()[3][3:6])\n    pipette.transfer(50, plate[\"A3\"], plate.columns()[3][6:])\n    \nFinally, be aware of the ordering of source and destination lists when constructing them with :ref:`well accessor methods <well-accessor-methods>`.",
        "start_char_idx": 8770,
        "end_char_idx": 10440,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1": {
      "__data__": {
        "id_": "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e3dc24c2-7188-4e06-8c16-95b620d60c9c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "140c9542600307e8cc157f3e4c0a34252e78db97ebc257af45ae5ad7945dfe39",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c7cc85c8-d045-4646-a3cf-ecb33f0e261b",
            "node_type": "1",
            "metadata": {},
            "hash": "60a9fc0bb5a14e8bcbc25fe6336545811f258a1a99a4be981355b1c34291b903",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you want to aspirate three times from A1, three times from A2, and two times from A3, use multiple ``transfer()`` commands in sequence::\n\n    pipette.transfer(50, plate[\"A1\"], plate.columns()[3][:3])\n    pipette.transfer(50, plate[\"A2\"], plate.columns()[3][3:6])\n    pipette.transfer(50, plate[\"A3\"], plate.columns()[3][6:])\n    \nFinally, be aware of the ordering of source and destination lists when constructing them with :ref:`well accessor methods <well-accessor-methods>`. For example, at first glance this code may appear to take liquid from each well in the first row of a plate and move it to each of the other wells in the same column::\n\n    pipette.transfer(\n        volume=20,\n        source=plate.rows()[0],\n        dest=plate.rows()[1:],\n    )\n    \nHowever, because the well ordering of :py:meth:`.Labware.rows` goes *across* the plate instead of *down* the plate, liquid from A1 will be dispensed in B1\u2013B7, liquid from A2 will be dispensed in B8\u2013C2, etc. The intended task is probably better accomplished by repeating transfers in a ``for`` loop::\n\n    for i in range(12):        \n        pipette.transfer(\n            volume=20,\n            source=plate.rows()[0][i],\n            dest=plate.columns()[i][1:],\n        )\n\nHere the repeat index ``i`` picks out:\n\n    - The individual well in the first row, for the source.\n    - The corresponding column, which is sliced to form the destination.\n\n.. _complex-optimizing-patterns:\n\nOptimizing Patterns\n-------------------\n\nChoosing the right complex command optimizes gantry movement and helps save time in your protocol. For example, say you want to take liquid from a reservoir and put 50 uL in each well of the first row of a plate. You could use ``transfer()``, like this::\n\n    pipette.transfer(\n        volume=50,\n        source=reservoir[\"A1\"],\n        destination=plate.rows()[0],\n    )\n    \nThis will produce 12 aspirate steps and 12 dispense steps.",
        "start_char_idx": 9960,
        "end_char_idx": 11882,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c7cc85c8-d045-4646-a3cf-ecb33f0e261b": {
      "__data__": {
        "id_": "c7cc85c8-d045-4646-a3cf-ecb33f0e261b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
          "file_name": "sources_destinations.rst",
          "file_size": 12777,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "faed24a6-41f4-4f3b-8fd8-b4944af402ee",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0ecd6e23107ae28322079325c4ef5f4f32dc29bb304f0e36562b22a62f4f660",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3d8b6bd2d0dd629f5358661eafb5e764b657685209a0a6d562b900e20f20aa97",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "31bffcaa-ca8d-4ffe-890b-a31409513851",
            "node_type": "1",
            "metadata": {},
            "hash": "b1bf523f538736ad28a0297c5e6082131f8264e81594bbeebf8881a9949b3da2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- The corresponding column, which is sliced to form the destination.\n\n.. _complex-optimizing-patterns:\n\nOptimizing Patterns\n-------------------\n\nChoosing the right complex command optimizes gantry movement and helps save time in your protocol. For example, say you want to take liquid from a reservoir and put 50 uL in each well of the first row of a plate. You could use ``transfer()``, like this::\n\n    pipette.transfer(\n        volume=50,\n        source=reservoir[\"A1\"],\n        destination=plate.rows()[0],\n    )\n    \nThis will produce 12 aspirate steps and 12 dispense steps. The steps alternate, with the pipette moving back and forth between the reservoir and plate each time. Using ``distribute()`` with the same arguments is more optimal in this scenario::\n\n    pipette.distribute(\n        volume=50,\n        source=reservoir[\"A1\"],\n        destination=plate.rows()[0],\n    )\n    \nThis will produce *just 1* aspirate step and 12 dispense steps (when using a 1000 uL pipette). The pipette will aspirate enough liquid to fill all the wells, plus a disposal volume. Then it will move to A1 of the plate, dispense, move the short distance to A2, dispense, and so on. This greatly reduces gantry movement and the time to perform this action. And even if you're using a smaller pipette, ``distribute()`` will fill the pipette, dispense as many times as possible, and only then return to the reservoir to refill (see :ref:`complex-tip-refilling` for more information).",
        "start_char_idx": 11302,
        "end_char_idx": 12772,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "31bffcaa-ca8d-4ffe-890b-a31409513851": {
      "__data__": {
        "id_": "31bffcaa-ca8d-4ffe-890b-a31409513851",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
          "file_name": "deck_slots.rst",
          "file_size": 2316,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "61435d27-a0f0-491e-b0ae-21c5a06674fe",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
              "file_name": "deck_slots.rst",
              "file_size": 2316,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "a21d14a12154e631235e36ffb552bf582b27e67242bee401aca73f53fe678e1d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c7cc85c8-d045-4646-a3cf-ecb33f0e261b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
              "file_name": "sources_destinations.rst",
              "file_size": 12777,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "90fdc75c5c53b58f355dc170e9a416605ecd3bed313ee178b05a145e20d08ad8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "08459d71-4c98-469d-a923-2c7913612f4a",
            "node_type": "1",
            "metadata": {},
            "hash": "4fd58d4f406558542fc5642fea63530d95eb118f18ec2b9240a5d7a42f7b7e0f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to specify deck slots in the Python Protocol API.\n\n..\n    Allow concise cross-referencing to ProtocolContext.load_labware() et. al., without barfing out the whole import path.\n.. py:currentmodule:: opentrons.protocol_api\n\n\n.. _deck-slots:\n\n**********\nDeck Slots\n**********\n\nWhen you load an item onto the robot's deck, like with :py:obj:`ProtocolContext.load_labware()` or :py:obj:`ProtocolContext.load_module()`, you need to specify which slot to put it in. The API accepts values that correspond to the physical deck slot labels on an OT-2 or Flex robot.\n\nPhysical Deck Labels\n====================\n\nThe Opentrons Flex uses a coordinate labeling system for slots A1 (back left) through D3 (front right).\n\nThe Opentrons OT-2 uses a numeric labeling system for slots 1 (front left) through 11 (back center). The back right slot is occupied by the fixed trash.\n\n.. image:: ../img/Flex-and-OT-2-decks.svg\n   :width: 100%",
        "start_char_idx": 0,
        "end_char_idx": 938,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "08459d71-4c98-469d-a923-2c7913612f4a": {
      "__data__": {
        "id_": "08459d71-4c98-469d-a923-2c7913612f4a",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
          "file_name": "deck_slots.rst",
          "file_size": 2316,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "61435d27-a0f0-491e-b0ae-21c5a06674fe",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
              "file_name": "deck_slots.rst",
              "file_size": 2316,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "a21d14a12154e631235e36ffb552bf582b27e67242bee401aca73f53fe678e1d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "31bffcaa-ca8d-4ffe-890b-a31409513851",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
              "file_name": "deck_slots.rst",
              "file_size": 2316,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "e3303ef960deb79a60df0969f4389d0fbdffb1b1542fde34b11e87716e663c56",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2260fb63-9f1d-43ec-b992-7857a3a39610",
            "node_type": "1",
            "metadata": {},
            "hash": "8fd873624b3295768d4c375e7ac46d1866efa4b8a9f83746793f652b55a6c8e8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _deck-slots:\n\n**********\nDeck Slots\n**********\n\nWhen you load an item onto the robot's deck, like with :py:obj:`ProtocolContext.load_labware()` or :py:obj:`ProtocolContext.load_module()`, you need to specify which slot to put it in. The API accepts values that correspond to the physical deck slot labels on an OT-2 or Flex robot.\n\nPhysical Deck Labels\n====================\n\nThe Opentrons Flex uses a coordinate labeling system for slots A1 (back left) through D3 (front right).\n\nThe Opentrons OT-2 uses a numeric labeling system for slots 1 (front left) through 11 (back center). The back right slot is occupied by the fixed trash.\n\n.. image:: ../img/Flex-and-OT-2-decks.svg\n   :width: 100%\n\n\nAPI Deck Labels\n===============\n\nSpecify a slot in either the Flex or OT-2 format:\n\n* A coordinate like ``\"A1\"``. This format must be a string.\n* A number like ``\"10\"`` or ``10``. This format can be a string or an integer.\n\nAs of API version 2.15, the Flex and OT-2 formats are interchangeable. You can use either format, regardless of which robot your protocol is for. You could even mix and match formats within a protocol, although this is not recommended.\n\nFor example, these two ``load_labware()`` commands are equivalent:\n\n.. code-block:: python\n\n    protocol.load_labware(\"nest_96_wellplate_200ul_flat\", \"A1\")\n    \n.. versionadded:: 2.15\n\n.. code-block:: python\n\n    protocol.load_labware(\"nest_96_wellplate_200ul_flat\", 10)\n    \n..\n\nBoth of these commands would require you to load the well plate in the back left slot of the robot.\n\nThe correspondence between deck labels is based on the relative locations of the slots. The full list of slot equivalencies is as follows:\n\n.. list-table::\n    :stub-columns: 1\n\n    * - Flex\n      - A1\n      - A2\n      - A3\n      - B1\n      - B2\n      - B3\n      - C1\n      - C2\n      - C3\n      - D1\n      - D2\n      - D3\n    * - OT-2\n      - 10\n      - 11\n      - Trash\n      - 7\n      - 8\n      - 9\n      - 4\n      - 5\n      - 6\n      - 1\n      - 2\n      - 3\n\n.. TODO staging slots and error handling of A4\u2013D4 in OT-2 protocols",
        "start_char_idx": 244,
        "end_char_idx": 2313,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2260fb63-9f1d-43ec-b992-7857a3a39610": {
      "__data__": {
        "id_": "2260fb63-9f1d-43ec-b992-7857a3a39610",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "08459d71-4c98-469d-a923-2c7913612f4a",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
              "file_name": "deck_slots.rst",
              "file_size": 2316,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "dcd7af26a7cc68cd4de1418f5d1bca293e81751fd81fa12fe345d32b675ef60f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2537259a-f63b-444c-82c0-039bc9586ed9",
            "node_type": "1",
            "metadata": {},
            "hash": "ed3fc68962afc2cdd8050b32aceb29236e5d55c216974a2e56bad87d0421c61c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: The Opentrons Python Protocol API is a Python framework that makes it easy to write automated biology lab protocols that use Opentrons robots and hardware modules.\n\n=======\nWelcome\n=======\n\n.. toctree::\n\n    self\n    tutorial\n    versioning\n    new_labware\n    moving_labware\n    new_modules\n    deck_slots\n    new_pipette\n    new_atomic_commands\n    new_complex_commands\n    robot_position\n    new_advanced_running\n    new_examples\n    adapting_ot2_flex\n    new_protocol_api\n\nThe Opentrons Python Protocol API is a Python framework designed to make it easy to write automated biology lab protocols. Python protocols can control Opentrons Flex and OT-2 robots, their pipettes, and optional hardware modules. We've designed the API to be accessible to anyone with basic Python and wet-lab skills. \n\nAs a bench scientist, you should be able to code your protocols in a way that reads like a lab notebook. You can write a fully functional protocol just by listing the equipment you'll use (modules, labware, and pipettes) and the exact sequence of movements the robot should make.\n\nAs a programmer, you can leverage the full power of Python for advanced automation in your protocols. Perform calculations, manage external data, use built-in and imported Python modules, and more to implement your custom lab workflow.\n\n\nGetting Started\n---------------\n\n**New to Python protocols?** Check out the :ref:`tutorial` to learn about the different parts of a protocol file and build a working protocol from scratch. \n\nIf you want to **dive right into code**, take a look at our :ref:`new-examples` and the comprehensive :ref:`protocol-api-reference`.\n\nWhen you're ready to **try out a protocol**, download the `Opentrons App <https://www.opentrons.com/ot-app>`_, import the protocol file, and run it on your robot.\n\n\n.. _overview-section-v2:\n\nHow the API Works\n-----------------\n\nThe design goal of this API is to make code readable and easy to understand. A protocol, in its most basic form:\n\n1. Provides some information about who made the protocol and what it is for.\n2. Specifies which type of robot the protocol should run on.\n3.",
        "start_char_idx": 0,
        "end_char_idx": 2141,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2537259a-f63b-444c-82c0-039bc9586ed9": {
      "__data__": {
        "id_": "2537259a-f63b-444c-82c0-039bc9586ed9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2260fb63-9f1d-43ec-b992-7857a3a39610",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "4931cd11eb4be60478c7c0db9fa372c2907c0085d52736e960824da98f3de2a6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8fa8b23f-b3fe-4699-bf32-79fa856199af",
            "node_type": "1",
            "metadata": {},
            "hash": "4957a81263323c1dcc7d8a19028f860177c7a92ebf2e9b587b9fcac2c3e66f86",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Getting Started\n---------------\n\n**New to Python protocols?** Check out the :ref:`tutorial` to learn about the different parts of a protocol file and build a working protocol from scratch. \n\nIf you want to **dive right into code**, take a look at our :ref:`new-examples` and the comprehensive :ref:`protocol-api-reference`.\n\nWhen you're ready to **try out a protocol**, download the `Opentrons App <https://www.opentrons.com/ot-app>`_, import the protocol file, and run it on your robot.\n\n\n.. _overview-section-v2:\n\nHow the API Works\n-----------------\n\nThe design goal of this API is to make code readable and easy to understand. A protocol, in its most basic form:\n\n1. Provides some information about who made the protocol and what it is for.\n2. Specifies which type of robot the protocol should run on.\n3. Tells the robot where to find labware, pipettes, and (optionally) hardware modules.\n4. Commands the robot to manipulate its attached hardware.",
        "start_char_idx": 1334,
        "end_char_idx": 2284,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8fa8b23f-b3fe-4699-bf32-79fa856199af": {
      "__data__": {
        "id_": "8fa8b23f-b3fe-4699-bf32-79fa856199af",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2537259a-f63b-444c-82c0-039bc9586ed9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "348e6ca74a7eacdf6ccdf301e0c0e119c36508e4dba04139e75ed9fa3b12cea3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ddf7e5b0-98af-4830-9f58-1e4dbc326df8",
            "node_type": "1",
            "metadata": {},
            "hash": "1a3e3599dda654e4dda851f96426f18fae3156949d76cbf2c85653dbc9de0454",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _overview-section-v2:\n\nHow the API Works\n-----------------\n\nThe design goal of this API is to make code readable and easy to understand. A protocol, in its most basic form:\n\n1. Provides some information about who made the protocol and what it is for.\n2. Specifies which type of robot the protocol should run on.\n3. Tells the robot where to find labware, pipettes, and (optionally) hardware modules.\n4. Commands the robot to manipulate its attached hardware.\n\nFor example, if we wanted to transfer liquid from well A1 to well B1 on a plate, our protocol would look like:\n\t\n.. tabs::\n    \n    .. tab:: Flex\n    \n        .. code-block:: python\n            :substitutions:\n            \n            from opentrons import protocol_api\n            \n            # metadata\n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"author\": \"Name <opentrons@example.com>\",\n                \"description\": \"Simple protocol to get started using the Flex\",\n            }\n            \n            # requirements\n            requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n            \n            # protocol run function\n            def run(protocol: protocol_api.ProtocolContext):\n                # labware\n                plate = protocol.load_labware(\n                    \"corning_96_wellplate_360ul_flat\", location=\"D1\"\n                )\n                tiprack = protocol.load_labware(\n                    \"opentrons_flex_96_tiprack_200ul\", location=\"D2\"\n                )\n            \n                # pipettes\n                left_pipette = protocol.load_instrument(\n                    \"flex_1channel_1000\", mount=\"left\", tip_racks=[tiprack]\n                )\n            \n                # commands\n                left_pipette.pick_up_tip()\n                left_pipette.aspirate(100, plate[\"A1\"])\n                left_pipette.dispense(100, plate[\"B2\"])\n                left_pipette.drop_tip()\n        \n        This example proceeds completely linearly. Following it line-by-line, you can see that it has the following effects:\n\n        1. Gives the name, contact information, and a brief description for the protocol. \n        2. Indicates the protocol should run on a Flex robot, using API version |apiLevel|.\n        3.",
        "start_char_idx": 1824,
        "end_char_idx": 4091,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ddf7e5b0-98af-4830-9f58-1e4dbc326df8": {
      "__data__": {
        "id_": "ddf7e5b0-98af-4830-9f58-1e4dbc326df8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8fa8b23f-b3fe-4699-bf32-79fa856199af",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "5ca27499b181533a821c31f11379c2d06678266b177a5bc7db3a9804f53e6dfd",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6672c195-0f1d-407e-9fea-615b357ef033",
            "node_type": "1",
            "metadata": {},
            "hash": "08546407bc42acb28e561e92f58da348d6fa2d5e755f9509be02af996fa2fe33",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Following it line-by-line, you can see that it has the following effects:\n\n        1. Gives the name, contact information, and a brief description for the protocol. \n        2. Indicates the protocol should run on a Flex robot, using API version |apiLevel|.\n        3. Tells the robot that there is:\n            a. A 96-well flat plate in slot D1.\n            b. A rack of 300 uL tips in slot D2.\n            c. A 1-channel 1000 uL pipette attached to the left mount, which should pick up tips from the aforementioned rack.\n        4. Tells the robot to act by:\n            a. Picking up the first tip from the tip rack.\n            b. Aspirating 100 uL of liquid from well A1 of the plate.\n            c. Dispensing 100 uL of liquid into well B1 of the plate.\n            d. Dropping the tip in the trash.\n\n\n    .. tab:: OT-2\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            # metadata\n            metadata = {\n                \"protocolName\": \"My Protocol\",\n                \"author\": \"Name <opentrons@example.com>\",\n                \"description\": \"Simple protocol to get started using the OT-2\",\n            }\n\n            # requirements\n            requirements = {\"robotType\": \"OT-2\", \"apiLevel\": \"2.14\"}\n\n            # protocol run function\n            def run(protocol: protocol_api.ProtocolContext):\n                # labware\n                plate = protocol.load_labware(\n                    \"corning_96_wellplate_360ul_flat\", location=\"1\"\n                )\n                tiprack = protocol.load_labware(\n                    \"opentrons_96_tiprack_300ul\", location=\"2\"\n                )\n\n                # pipettes\n                left_pipette = protocol.load_instrument(\n                    \"p300_single\", mount=\"left\", tip_racks=[tiprack]\n                )\n\n                # commands\n                left_pipette.pick_up_tip()\n                left_pipette.aspirate(100, plate[\"A1\"])\n                left_pipette.dispense(100, plate[\"B2\"])\n                left_pipette.drop_tip()\n\n        This example proceeds completely linearly.",
        "start_char_idx": 3823,
        "end_char_idx": 5936,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6672c195-0f1d-407e-9fea-615b357ef033": {
      "__data__": {
        "id_": "6672c195-0f1d-407e-9fea-615b357ef033",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ddf7e5b0-98af-4830-9f58-1e4dbc326df8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "35f61ff214ff2991ae5cd2af42a45222cc412c522adf58f8ce8db99222d7bed5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c7bf92fe-774f-43ce-a757-092e1c88e11d",
            "node_type": "1",
            "metadata": {},
            "hash": "e17cd57b1be8d3bf5252f35a8f928f268019a953ffecf048dce69239b737e889",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Following it line-by-line, you can see that it has the following effects:\n\n        1. Gives the name, contact information, and a brief description for the protocol.\n        2. Indicates the protocol should run on an OT-2 robot, using API version 2.14.\n        3. Tells the robot that there is:\n            a. A 96-well flat plate in slot 1.\n            b. A rack of 300 uL tips in slot 2.\n            c. A single-channel 300 uL pipette attached to the left mount, which should pick up tips from the aforementioned rack.\n        4. Tells the robot to act by:\n            a. Picking up the first tip from the tip rack.\n            b. Aspirating 100 uL of liquid from well A1 of the plate.\n            c. Dispensing 100 uL of liquid into well B1 of the plate.\n            d. Dropping the tip in the trash.\n\n\t\nThere is much more that Opentrons robots and the API can do! The :ref:`v2-atomic-commands`, :ref:`v2-complex-commands`, and :ref:`new_modules` pages cover many of these functions.",
        "start_char_idx": 5937,
        "end_char_idx": 6922,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c7bf92fe-774f-43ce-a757-092e1c88e11d": {
      "__data__": {
        "id_": "c7bf92fe-774f-43ce-a757-092e1c88e11d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6672c195-0f1d-407e-9fea-615b357ef033",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "083f85388d21f1b43f69ecfcb48e88cd9dc8af1780c7028139f9641e9e1adfc0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "39e9e7d7-6ecc-4065-a99d-b93be3d88231",
            "node_type": "1",
            "metadata": {},
            "hash": "24af259ccf3420e7688c70514896708f0fb7bb78c01443457394caf20c88282a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "3. Tells the robot that there is:\n            a. A 96-well flat plate in slot 1.\n            b. A rack of 300 uL tips in slot 2.\n            c. A single-channel 300 uL pipette attached to the left mount, which should pick up tips from the aforementioned rack.\n        4. Tells the robot to act by:\n            a. Picking up the first tip from the tip rack.\n            b. Aspirating 100 uL of liquid from well A1 of the plate.\n            c. Dispensing 100 uL of liquid into well B1 of the plate.\n            d. Dropping the tip in the trash.\n\n\t\nThere is much more that Opentrons robots and the API can do! The :ref:`v2-atomic-commands`, :ref:`v2-complex-commands`, and :ref:`new_modules` pages cover many of these functions.\n\n\nMore Resources\n--------------\n\nOpentrons App\n+++++++++++++\n\nThe `Opentrons App <https://opentrons.com/ot-app/>`_ is the easiest way to run your Python protocols. The app `supports <https://support.opentrons.com/en/articles/2687536-get-started-supported-operating-systems-for-the-opentrons-app>`_ the latest versions of macOS, Windows, and Ubuntu.\n\nSupport\n+++++++\n\nQuestions about setting up your robot, using Opentrons software, or troubleshooting? Check out our `support articles <https://support.opentrons.com/s/>`_ or `get in touch directly <https://support.opentrons.com/s/article/Getting-help-from-Opentrons-Support>`_ with Opentrons Support.\n\nCustom Protocol Service\n+++++++++++++++++++++++\n\nDon't have the time or resources to write your own protocols? The `Opentrons Custom Protocols <https://shop.opentrons.com/opentrons-remote-custom-protocol-development/>`_ service can get you set up in as little as a week. \n\nContributing\n++++++++++++\n\nOpentrons software, including the Python API and this documentation, is open source. If you have an improvement or an interesting idea, you can create an issue on GitHub by following our `guidelines`__.\n\n__ https://github.com/Opentrons/opentrons/blob/edge/CONTRIBUTING.md#opening-issues",
        "start_char_idx": 6197,
        "end_char_idx": 8161,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "39e9e7d7-6ecc-4065-a99d-b93be3d88231": {
      "__data__": {
        "id_": "39e9e7d7-6ecc-4065-a99d-b93be3d88231",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
          "file_name": "index.rst",
          "file_size": 8316,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "14b4ef16b0fe6f417e6bacdfed882f0edbe7617ef4493163bb183e78a0b799a0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c7bf92fe-774f-43ce-a757-092e1c88e11d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "94c7f2216843f59261b6e5ae7c60a69aceaa389cc3763f63b9af349cce0861ce",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9da0aea8-af9c-49a1-97e3-517097b0d6c1",
            "node_type": "1",
            "metadata": {},
            "hash": "17155eb1bf11f39590bbe104ea16e24da093a0fddb5c4218ad25d1e8cd4ee812",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That guide also includes more information on how to `directly contribute code`__.\n\n__ https://github.com/Opentrons/opentrons/blob/edge/CONTRIBUTING.md",
        "start_char_idx": 8164,
        "end_char_idx": 8314,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9da0aea8-af9c-49a1-97e3-517097b0d6c1": {
      "__data__": {
        "id_": "9da0aea8-af9c-49a1-97e3-517097b0d6c1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "39e9e7d7-6ecc-4065-a99d-b93be3d88231",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
              "file_name": "index.rst",
              "file_size": 8316,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f0a332fdb2e97bda718908d27859eceffaa142b408edd73b72b7c5944313a561",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b81ce6cf-58a1-46bd-95ef-7de922157172",
            "node_type": "1",
            "metadata": {},
            "hash": "d96de235486943f6de494adcd2ec917c773c4f02b2eab105f3c2bbdde22e364e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to use the Heater-Shaker Module in a Python protocol, and where it can be safely placed on the deck.\n\n.. _heater-shaker-module:\n\n********************\nHeater-Shaker Module\n********************\n\nThe Heater-Shaker Module provides on-deck heating and orbital shaking. The module can heat from 37 to 95 \u00b0C, and can shake samples from 200 to 3000 rpm.\n\nThe Heater-Shaker Module is represented in code by a :py:class:`.HeaterShakerContext` object. For example::\n\n    def run(protocol: protocol_api.ProtocolContext):\n         hs_mod = protocol.load_module(\n          module_name='heaterShakerModuleV1',\n          location=\"D1\")\n\n.. versionadded:: 2.13\n\nDeck Slots\n==========\n\nThe supported deck slot positions for the Heater-Shaker depend on the robot you\u2019re using. \n\n.. list-table::\n   :widths: 30 80\n   :header-rows: 1\n\n   * - Robot Model\n     - Heater-Shaker Deck Placement\n   * - Flex\n     - In any deck slot in column 1 or 3. The module can go in slot A3, but you need to move the trash bin first.\n   * - OT-2\n     - In deck slot 1, 3, 4, 6, 7, or 10.\n     \nOT-2 Placement Restrictions\n===========================\n\nOn OT-2, you need to restrict placement of other modules and labware around the Heater-Shaker. On Flex, the module is installed below-deck in a caddy and there is more space between deck slots, so these restrictions don't apply.\n\nIn general, it's best to leave all slots adjacent to the Heater-Shaker empty. If your protocol requires filling those slots, observe the following restrictions to avoid physical crashes involving the Heater-Shaker.\n\nAdjacent Modules\n----------------\n\nDo not place other modules next to the Heater-Shaker. Keeping adjacent deck slots clear helps prevents collisions during shaking and while opening the labware latch. Loading a module next to the Heater-Shaker on OT-2 will raise a ``DeckConflictError``.\n\nTall Labware\n------------\n\nDo not place labware taller than 53 mm to the left or right of the Heater-Shaker.",
        "start_char_idx": 0,
        "end_char_idx": 1976,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b81ce6cf-58a1-46bd-95ef-7de922157172": {
      "__data__": {
        "id_": "b81ce6cf-58a1-46bd-95ef-7de922157172",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9da0aea8-af9c-49a1-97e3-517097b0d6c1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ea5a91d8c5fcf9f00e2770a9a0d6d133a80aeb275493b96e866ce8fb11f48cf3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "739e7a32-21db-4a05-9e76-acd0271cc3d4",
            "node_type": "1",
            "metadata": {},
            "hash": "551e51444914f6aa682af96b8d4bc4aafac238bc006467541365237adfe7c3aa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "OT-2 Placement Restrictions\n===========================\n\nOn OT-2, you need to restrict placement of other modules and labware around the Heater-Shaker. On Flex, the module is installed below-deck in a caddy and there is more space between deck slots, so these restrictions don't apply.\n\nIn general, it's best to leave all slots adjacent to the Heater-Shaker empty. If your protocol requires filling those slots, observe the following restrictions to avoid physical crashes involving the Heater-Shaker.\n\nAdjacent Modules\n----------------\n\nDo not place other modules next to the Heater-Shaker. Keeping adjacent deck slots clear helps prevents collisions during shaking and while opening the labware latch. Loading a module next to the Heater-Shaker on OT-2 will raise a ``DeckConflictError``.\n\nTall Labware\n------------\n\nDo not place labware taller than 53 mm to the left or right of the Heater-Shaker. This prevents the Heater-Shaker\u2019s latch from colliding with the adjacent labware. Common labware that exceed the height limit include Opentrons tube racks and Opentrons 1000 uL tip racks. Loading tall labware to the right or left of the Heater-Shaker on OT-2 will raise a ``DeckConflictError``.\n\n8-Channel Pipettes\n------------------\n\nYou can't perform pipetting actions in `any` slots adjacent to the Heater-Shaker if you're using a GEN2 or GEN1 8-channel pipette. This prevents the pipette ejector from crashing on the module housing or labware latch. Using an 8-channel pipette will raise a ``PipetteMovementRestrictedByHeaterShakerError``.\n\nThere is one exception: to the front or back of the Heater-Shaker, an 8-channel pipette can access tip racks only. Attempting to pipette to non-tip-rack labware will also raise a ``PipetteMovementRestrictedByHeaterShakerError``.\n\nLatch Control\n=============\n\nTo add and remove labware from the Heater-Shaker, control the module's labware latch from your protocol using :py:meth:`.open_labware_latch` and :py:meth:`.close_labware_latch`.",
        "start_char_idx": 1076,
        "end_char_idx": 3058,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "739e7a32-21db-4a05-9e76-acd0271cc3d4": {
      "__data__": {
        "id_": "739e7a32-21db-4a05-9e76-acd0271cc3d4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b81ce6cf-58a1-46bd-95ef-7de922157172",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "534e10e5747a916d7db41a8728ffc577aabccf4325846c6457e7c028284d05b2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b35d6054-3c4a-4bc5-acad-48d3e2306141",
            "node_type": "1",
            "metadata": {},
            "hash": "dc0c9dc2479aea0700473d65095f91fce6fdc6e4f6e1d963b1bfeae2f4d4b68a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "8-Channel Pipettes\n------------------\n\nYou can't perform pipetting actions in `any` slots adjacent to the Heater-Shaker if you're using a GEN2 or GEN1 8-channel pipette. This prevents the pipette ejector from crashing on the module housing or labware latch. Using an 8-channel pipette will raise a ``PipetteMovementRestrictedByHeaterShakerError``.\n\nThere is one exception: to the front or back of the Heater-Shaker, an 8-channel pipette can access tip racks only. Attempting to pipette to non-tip-rack labware will also raise a ``PipetteMovementRestrictedByHeaterShakerError``.\n\nLatch Control\n=============\n\nTo add and remove labware from the Heater-Shaker, control the module's labware latch from your protocol using :py:meth:`.open_labware_latch` and :py:meth:`.close_labware_latch`. Shaking requires the labware latch to be closed, so you may want to issue a close command before the first shake command in your protocol:\n\n.. code-block:: python\n\n    hs_mod.close_labware_latch()\n    hs_mod.set_and_wait_for_shake_speed(500)\n\nIf the labware latch is already closed, ``close_labware_latch()`` will succeed immediately; you don\u2019t have to check the status of the latch before opening or closing it.\n\nTo prepare the deck before running a protocol, use the labware latch controls in the Opentrons App or run these methods in Jupyter notebook.\n\nLoading Labware\n===============\n\nLike with all modules, use the Heater-Shaker\u2019s :py:meth:`~.HeaterShakerContext.load_labware` method to specify what you will place on the module. For the Heater-Shaker, you must use a definition that describes the combination of a thermal adapter and labware that fits it.  See the :ref:`load-labware-module` section for an example of how to place labware on a module.\n\nCurrently, the `Opentrons Labware Library <https://labware.opentrons.com/>`_ includes several pre-configured adapter\u2013labware combinations and standalone adapter definitions that help make the Heater-Shaker ready to use right out of the box.",
        "start_char_idx": 2273,
        "end_char_idx": 4258,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b35d6054-3c4a-4bc5-acad-48d3e2306141": {
      "__data__": {
        "id_": "b35d6054-3c4a-4bc5-acad-48d3e2306141",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "739e7a32-21db-4a05-9e76-acd0271cc3d4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c33e0fd2f47b13d21895d62a24f5fe6d25711a25c03f8e484da3446f806e71e6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "09153e46-075d-438f-91f2-2e7537d2f550",
            "node_type": "1",
            "metadata": {},
            "hash": "8608e4ef059377e1268b4902cf6deb091557e3dd36e8a57b5e8e0f4a85a74306",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "To prepare the deck before running a protocol, use the labware latch controls in the Opentrons App or run these methods in Jupyter notebook.\n\nLoading Labware\n===============\n\nLike with all modules, use the Heater-Shaker\u2019s :py:meth:`~.HeaterShakerContext.load_labware` method to specify what you will place on the module. For the Heater-Shaker, you must use a definition that describes the combination of a thermal adapter and labware that fits it.  See the :ref:`load-labware-module` section for an example of how to place labware on a module.\n\nCurrently, the `Opentrons Labware Library <https://labware.opentrons.com/>`_ includes several pre-configured adapter\u2013labware combinations and standalone adapter definitions that help make the Heater-Shaker ready to use right out of the box. See :ref:`labware-on-adapters` for examples of loading labware on modules.\n\nPre-configured Combinations\n---------------------------\n\nThe Heater-Shaker supports these thermal adapter and labware combinations by default. These let you load the adapter and labware with a single definition.",
        "start_char_idx": 3473,
        "end_char_idx": 4546,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "09153e46-075d-438f-91f2-2e7537d2f550": {
      "__data__": {
        "id_": "09153e46-075d-438f-91f2-2e7537d2f550",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b35d6054-3c4a-4bc5-acad-48d3e2306141",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b8f1803d136a5c6488b1221af68aaac4950db8f0f947ea648175e1d3eea14607",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f9ca7807-3a62-4021-8141-7967ea91bd1c",
            "node_type": "1",
            "metadata": {},
            "hash": "d6b9a134d7bb466cd1bb19130b8aa57761d5f05bf131f356aa26a5d90902729e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For the Heater-Shaker, you must use a definition that describes the combination of a thermal adapter and labware that fits it.  See the :ref:`load-labware-module` section for an example of how to place labware on a module.\n\nCurrently, the `Opentrons Labware Library <https://labware.opentrons.com/>`_ includes several pre-configured adapter\u2013labware combinations and standalone adapter definitions that help make the Heater-Shaker ready to use right out of the box. See :ref:`labware-on-adapters` for examples of loading labware on modules.\n\nPre-configured Combinations\n---------------------------\n\nThe Heater-Shaker supports these thermal adapter and labware combinations by default. These let you load the adapter and labware with a single definition.\n\n.. list-table::\n   :header-rows: 1\n\n   * - Adapter/Labware Combination\n     - API Load Name\n   * - Opentrons 96 Deep Well Adapter with NEST Deep Well Plate 2 mL\n     - ``opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep``\n   * - Opentrons 96 Flat Bottom Adapter with NEST 96 Well Plate 200 uL Flat\n     - ``opentrons_96_flat_bottom_adapter_nest_wellplate_200ul_flat``\n   * - Opentrons 96 PCR Adapter with Armadillo Well Plate 200 uL\n     - ``opentrons_96_pcr_adapter_armadillo_wellplate_200ul``\n   * - Opentrons 96 PCR Adapter with NEST Well Plate 100 uL\n     - ``opentrons_96_pcr_adapter_nest_wellplate_100ul_pcr_full_skirt``\n   * - Opentrons Universal Flat Adapter with Corning 384 Well Plate 112 uL Flat\n     - ``opentrons_universal_flat_adapter_corning_384_wellplate_112ul_flat``\n\nStandalone Well-Plate Adapters\n------------------------------\n\nYou can use these standalone adapter definitions to load Opentrons verified or custom labware on top of the Heater-Shaker.",
        "start_char_idx": 3794,
        "end_char_idx": 5523,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f9ca7807-3a62-4021-8141-7967ea91bd1c": {
      "__data__": {
        "id_": "f9ca7807-3a62-4021-8141-7967ea91bd1c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "09153e46-075d-438f-91f2-2e7537d2f550",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "a9285c5472399cd120e6fdab023aa9dded6f31be7c04d6c9b462f2891f50338d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1",
            "node_type": "1",
            "metadata": {},
            "hash": "abc224e7f0f143120187d527bc807e72d029228e24ae196d49b5e2143947bea7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. list-table::\n   :header-rows: 1\n\n   * - Adapter Type\n     - API Load Name\n   * - Opentrons Universal Flat Adapter\n     - ``opentrons_universal_flat_adapter``\n   * - Opentrons 96 PCR Adapter\n     - ``opentrons_96_pcr_adapter``\n   * - Opentrons 96 Deep Well Adapter\n     - ``opentrons_96_deep_well_adapter``\n   * - Opentrons 96 Flat Bottom Adapter\n     - ``opentrons_96_flat_bottom_adapter``\n\nCustom Flat-Bottom Labware\n--------------------------\n\nCustom flat-bottom labware can be used with the Universal Flat Adapter. See the support article `Requesting a Custom Labware Definition <https://support.opentrons.com/s/article/Requesting-a-custom-labware-definition>`_ if you need assistance creating custom labware definitions for the Heater-Shaker.\n\nHeating and Shaking\n===================\n\nThe API treats heating and shaking as separate, independent activities due to the amount of time they take.\n\nIncreasing or reducing shaking speed takes a few seconds, so the API treats these actions as *blocking* commands. All other commands cannot run until the module reaches the required speed.\n\nHeating the module, or letting it passively cool, takes more time than changing the shaking speed. As a result, the API gives you the flexibility to perform other pipetting actions while waiting for the module to reach a target temperature. When holding at temperature, you can design your protocol to run in a blocking or non-blocking manner.\n\n.. note::\n\n\tSince API version 2.13, only the Heater-Shaker Module supports non-blocking command execution. All other modules' methods are blocking commands.\n\nBlocking commands\n-----------------\n\nThis example uses a blocking command and shakes a sample for one minute. No other commands will execute until a minute has elapsed. The three commands in this example start the shake, wait for one minute, and then stop the shake::\n\n    hs_mod.set_and_wait_for_shake_speed(500)\n    protocol.delay(minutes=1)\n    hs_mod.deactivate_shaker()\n\nThese actions will take about 65 seconds total.",
        "start_char_idx": 5525,
        "end_char_idx": 7542,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1": {
      "__data__": {
        "id_": "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f9ca7807-3a62-4021-8141-7967ea91bd1c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "2b9341ed9a83bab3d47a40af089a8b391126cddec68497740f134583b8504b1b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0843f367-b0f1-49e1-a25e-38e3df5f4da9",
            "node_type": "1",
            "metadata": {},
            "hash": "bed5ece7c22aa043aa79640be045393b99657d9ef94aca62da880135583496cf",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Heating the module, or letting it passively cool, takes more time than changing the shaking speed. As a result, the API gives you the flexibility to perform other pipetting actions while waiting for the module to reach a target temperature. When holding at temperature, you can design your protocol to run in a blocking or non-blocking manner.\n\n.. note::\n\n\tSince API version 2.13, only the Heater-Shaker Module supports non-blocking command execution. All other modules' methods are blocking commands.\n\nBlocking commands\n-----------------\n\nThis example uses a blocking command and shakes a sample for one minute. No other commands will execute until a minute has elapsed. The three commands in this example start the shake, wait for one minute, and then stop the shake::\n\n    hs_mod.set_and_wait_for_shake_speed(500)\n    protocol.delay(minutes=1)\n    hs_mod.deactivate_shaker()\n\nThese actions will take about 65 seconds total. Compare this with similar-looking commands for holding a sample at a temperature for one minute:\n\n.. code-block:: python\n\n    hs_mod.set_and_wait_for_temperature(75)\n    protocol.delay(minutes=1)\n    hs_mod.deactivate_heater()\n\nThis may take much longer, depending on the thermal block used, the volume and type of liquid contained in the labware, and the initial temperature of the module. \n\nNon-blocking commands\n---------------------\n\nTo pipette while the Heater-Shaker is heating, use :py:meth:`~.HeaterShakerContext.set_target_temperature` and :py:meth:`~.HeaterShakerContext.wait_for_temperature` instead of :py:meth:`~.HeaterShakerContext.set_and_wait_for_temperature`:\n\n.. code-block:: python\n\n    hs_mod.set_target_temperature(75)\n    pipette.pick_up_tip()   \n    pipette.aspirate(50, plate['A1'])\n    pipette.dispense(50, plate['B1'])\n    pipette.drop_tip()\n    hs_mod.wait_for_temperature()\n    protocol.delay(minutes=1)\n    hs_mod.deactivate_heater()\n\nThis example would likely take just as long as the blocking version above; it\u2019s unlikely that one aspirate and one dispense action would take longer than the time for the module to heat.",
        "start_char_idx": 6616,
        "end_char_idx": 8693,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0843f367-b0f1-49e1-a25e-38e3df5f4da9": {
      "__data__": {
        "id_": "0843f367-b0f1-49e1-a25e-38e3df5f4da9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "a7c4d3c2fb1a3773c7aebebddbf6dfb6dc504879519a42d4035f09c1f71e6181",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "45b5b822-819a-4a0b-a28a-fa937e4aba70",
            "node_type": "1",
            "metadata": {},
            "hash": "72813627dc1749ce85904c62890fbe6f1ef67ea415f5b89470900cef9d305632",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Non-blocking commands\n---------------------\n\nTo pipette while the Heater-Shaker is heating, use :py:meth:`~.HeaterShakerContext.set_target_temperature` and :py:meth:`~.HeaterShakerContext.wait_for_temperature` instead of :py:meth:`~.HeaterShakerContext.set_and_wait_for_temperature`:\n\n.. code-block:: python\n\n    hs_mod.set_target_temperature(75)\n    pipette.pick_up_tip()   \n    pipette.aspirate(50, plate['A1'])\n    pipette.dispense(50, plate['B1'])\n    pipette.drop_tip()\n    hs_mod.wait_for_temperature()\n    protocol.delay(minutes=1)\n    hs_mod.deactivate_heater()\n\nThis example would likely take just as long as the blocking version above; it\u2019s unlikely that one aspirate and one dispense action would take longer than the time for the module to heat. However, be careful when putting a lot of commands between a ``set_target_temperature()`` call and a ``delay()`` call. In this situation, you\u2019re relying on ``wait_for_temperature()`` to resume execution of commands once heating is complete. But if the temperature has already been reached, the delay will begin later than expected and the Heater-Shaker will hold at its target temperature longer than intended.\n\nAdditionally, if you want to pipette while the module holds a temperature for a certain length of time, you need to track the holding time yourself. One of the simplest ways to do this is with Python\u2019s ``time`` module. First, add ``import time`` at the start of your protocol. Then, use :py:func:`time.monotonic` to set a reference time when the target is reached.",
        "start_char_idx": 7936,
        "end_char_idx": 9470,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "45b5b822-819a-4a0b-a28a-fa937e4aba70": {
      "__data__": {
        "id_": "45b5b822-819a-4a0b-a28a-fa937e4aba70",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0843f367-b0f1-49e1-a25e-38e3df5f4da9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "37929136a75f6c4db5f7ab3870bd6320f6b5bfeece5499c2cbde8f6eabc9cd22",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c9440268-ea98-463c-80ca-52fbb14b37a3",
            "node_type": "1",
            "metadata": {},
            "hash": "6f380daa389932defc1e0e4621a6df19587dd8f8b65943b4e81c2056f4a7d5f9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "However, be careful when putting a lot of commands between a ``set_target_temperature()`` call and a ``delay()`` call. In this situation, you\u2019re relying on ``wait_for_temperature()`` to resume execution of commands once heating is complete. But if the temperature has already been reached, the delay will begin later than expected and the Heater-Shaker will hold at its target temperature longer than intended.\n\nAdditionally, if you want to pipette while the module holds a temperature for a certain length of time, you need to track the holding time yourself. One of the simplest ways to do this is with Python\u2019s ``time`` module. First, add ``import time`` at the start of your protocol. Then, use :py:func:`time.monotonic` to set a reference time when the target is reached. Finally, add a delay that calculates how much holding time is remaining after the pipetting actions:\n\n.. code-block:: python\n\n    hs_mod.set_and_wait_for_temperature(75)\n    start_time = time.monotonic()  # set reference time\n    pipette.pick_up_tip()   \n    pipette.aspirate(50, plate['A1'])\n    pipette.dispense(50, plate['B1'])\n    pipette.drop_tip()\n    # delay for the difference between now and 60 seconds after the reference time\n    protocol.delay(max(0, start_time+60 - time.monotonic()))\n    hs_mod.deactivate_heater()\n\nProvided that the parallel pipetting actions don\u2019t take more than one minute, this code will deactivate the heater one minute after its target was reached. If more than one minute has elapsed, the value passed to ``protocol.delay()`` will equal 0, and the protocol will continue immediately.\n\nDeactivating\n============\n\nDeactivating the heater and shaker are done separately using the :py:meth:`~.HeaterShakerContext.deactivate_heater` and :py:meth:`~.HeaterShakerContext.deactivate_shaker` methods, respectively. There is no method to deactivate both simultaneously. Call the two methods in sequence if you need to stop both heating and shaking.\n\n.. note:: \n\n    The robot will not automatically deactivate the Heater-Shaker at the end of a protocol.",
        "start_char_idx": 8694,
        "end_char_idx": 10752,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c9440268-ea98-463c-80ca-52fbb14b37a3": {
      "__data__": {
        "id_": "c9440268-ea98-463c-80ca-52fbb14b37a3",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
          "file_name": "heater_shaker.rst",
          "file_size": 10980,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2c67dda2-cebc-4bcb-90b0-a136cb824e1c",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "57be4b8a0e2c137bddef8aae14b875e6b0f3ce5a6dd95051002e08fee5783ea4",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "45b5b822-819a-4a0b-a28a-fa937e4aba70",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9f77332b02a5ffad288fa35b2637209096db370d49c7e465d84b0c9cb4f6fa06",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b1dfac79-06c5-401c-ac7f-81564dc6e7df",
            "node_type": "1",
            "metadata": {},
            "hash": "c2fe5a2243c7272c2c797d4932ecaafd2a7409c3ccd6d2f7835b18cc94d3fecf",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If more than one minute has elapsed, the value passed to ``protocol.delay()`` will equal 0, and the protocol will continue immediately.\n\nDeactivating\n============\n\nDeactivating the heater and shaker are done separately using the :py:meth:`~.HeaterShakerContext.deactivate_heater` and :py:meth:`~.HeaterShakerContext.deactivate_shaker` methods, respectively. There is no method to deactivate both simultaneously. Call the two methods in sequence if you need to stop both heating and shaking.\n\n.. note:: \n\n    The robot will not automatically deactivate the Heater-Shaker at the end of a protocol. If you need to deactivate the module after a protocol is completed or canceled, use the Heater-Shaker module controls on the device detail page in the Opentrons App or run these methods in Jupyter notebook.",
        "start_char_idx": 10157,
        "end_char_idx": 10959,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b1dfac79-06c5-401c-ac7f-81564dc6e7df": {
      "__data__": {
        "id_": "b1dfac79-06c5-401c-ac7f-81564dc6e7df",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_block.rst",
          "file_name": "magnetic_block.rst",
          "file_size": 1580,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "3e618721-6933-4289-8f44-2c3a522560f2",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_block.rst",
              "file_name": "magnetic_block.rst",
              "file_size": 1580,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "3dc7fc04432b070d7a16ce4ee9272e309977c3283260d1a0a448dddfb06a88c2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c9440268-ea98-463c-80ca-52fbb14b37a3",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
              "file_name": "heater_shaker.rst",
              "file_size": 10980,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7b9df3789117e8c41ee1f259338f64416ad65e31c31eef27e535c50edca40f5b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "58503ed9-8447-469f-9d86-49495fbb0874",
            "node_type": "1",
            "metadata": {},
            "hash": "e2b7c576da5c929f3ef0619b4d802c251b6920d985144b570fbc2e5f913a8777",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to use the Magnetic Block with the Flex Gripper in a Python protocol.\n\n.. _magnetic-block:\n\n**************\nMagnetic Block\n**************\n\n.. note::\n   The Magnetic Block is compatible with Opentrons Flex only. If you have an OT-2, use the :ref:`Magnetic Module <magnetic-module>`.\n\nThe Magnetic Block is an unpowered, 96-well plate that holds labware close to its high-strength neodymium magnets. This module is suitable for many magnetic bead-based protocols, but does not move beads up or down in solution.\n\nBecause the Magnetic Block is unpowered, neither your robot nor the Opentrons App aware of this module. You \"control\" it via protocols to load labware onto the module and use the Opentrons Flex Gripper to move labware on and off the module. See :ref:`moving-labware` for more information.\n\nThe Magnetic Block is represented by a :py:class:`~opentrons.protocol_api.MagneticBlockContext` object which lets you load labware on top of the module.\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        \n        # Load the Magnetic Block in deck slot D1\n        magnetic_block = protocol.load_module(\n          module_name='magneticBlockV1',\n          location='D1')\n        \n        # Load a 96-well plate on the magnetic block\n        well_plate = magnetic_block.load_labware(\n          name=\"biorad_96_wellplate_200ul_pcr\")\n\n        # Use the Gripper to move labware\n        protocol.move_labware(well_plate,\n                         new_location=\"B2\",\n                         use_gripper=True)\n\n.. versionadded:: 2.15",
        "start_char_idx": 0,
        "end_char_idx": 1579,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "58503ed9-8447-469f-9d86-49495fbb0874": {
      "__data__": {
        "id_": "58503ed9-8447-469f-9d86-49495fbb0874",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
          "file_name": "magnetic_module.rst",
          "file_size": 5781,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "070060f9-be83-493c-bbfd-5213611eb59e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b1dfac79-06c5-401c-ac7f-81564dc6e7df",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_block.rst",
              "file_name": "magnetic_block.rst",
              "file_size": 1580,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "56fa961f0301ee9ad435ec3c0c88d6a4ab9b564cb16027567b900a93293afdee",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4e45d12d-0e82-4d54-a423-82057b75c96c",
            "node_type": "1",
            "metadata": {},
            "hash": "4eb05e8c2d70c7339dd25e2e672f262810a1aadd42a16c9b0b0c1e9046aeec59",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to engage and disengage the Magnetic Module for the OT-2 in a Python protocol.\n\n.. _magnetic-module:\n\n***************\nMagnetic Module\n***************\n\n.. note::\n   The Magnetic Module is compatible with the OT-2 only. If you have a Flex, use the :ref:`Magnetic Block <magnetic-block>`.\n\nThe Magnetic Module controls a set of permanent magnets which can move vertically to induce a magnetic field in the labware loaded on the module. \n\nThe Magnetic Module is represented by a :py:class:`.MagneticModuleContext` object, which has methods for engaging (raising) and disengaging (lowering) its magnets.\n\nThe examples in this section apply to an OT-2 with a Magnetic Module GEN2 loaded in slot 6:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        mag_mod = protocol.load_module(\n          module_name='magnetic module gen2',\n          location='6')\n        plate = mag_mod.load_labware(\n          name='nest_96_wellplate_100ul_pcr_full_skirt')\n\n.. versionadded:: 2.3\n\nLoading Labware\n===============\n\nLike with all modules, use the Magnetic Module\u2019s :py:meth:`~.MagneticModuleContext.load_labware` method to specify what you will place on the module. The Magnetic Module supports 96-well PCR plates and deep well plates. For the best compatibility, use a labware definition that specifies how far the magnets should move when engaging with the labware.",
        "start_char_idx": 0,
        "end_char_idx": 1404,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4e45d12d-0e82-4d54-a423-82057b75c96c": {
      "__data__": {
        "id_": "4e45d12d-0e82-4d54-a423-82057b75c96c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
          "file_name": "magnetic_module.rst",
          "file_size": 5781,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "070060f9-be83-493c-bbfd-5213611eb59e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "58503ed9-8447-469f-9d86-49495fbb0874",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d88358f75a9ab0e113bdfef4334cb6c6ae9b2d2c25c3c96873d9cad47d8b44f5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "55101789-8dc2-429d-9a8b-d5623c1ba66d",
            "node_type": "1",
            "metadata": {},
            "hash": "7e1187db31a170b68e030ea26a979b7b66fe3c71aefc656ae120f853c8a02b6d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The examples in this section apply to an OT-2 with a Magnetic Module GEN2 loaded in slot 6:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        mag_mod = protocol.load_module(\n          module_name='magnetic module gen2',\n          location='6')\n        plate = mag_mod.load_labware(\n          name='nest_96_wellplate_100ul_pcr_full_skirt')\n\n.. versionadded:: 2.3\n\nLoading Labware\n===============\n\nLike with all modules, use the Magnetic Module\u2019s :py:meth:`~.MagneticModuleContext.load_labware` method to specify what you will place on the module. The Magnetic Module supports 96-well PCR plates and deep well plates. For the best compatibility, use a labware definition that specifies how far the magnets should move when engaging with the labware. The following plates in the `Opentrons Labware Library <https://labware.opentrons.com/>`_ include this measurement:\n\n.. list-table::\n   :widths: 50 50\n   :header-rows: 1\n\n   * - Labware Name\n     - API Load Name\n   * - Bio-Rad 96 Well Plate 200 uL PCR\n     - ``biorad_96_wellplate_200ul_pcr``\n   * - NEST 96 Well Plate 100 uL PCR Full Skirt\n     - ``nest_96_wellplate_100ul_pcr_full_skirt``\n   * - NEST 96 Deep Well Plate 2mL\n     - ``nest_96_wellplate_2ml_deep``\n   * - Thermo Scientific Nunc 96 Well Plate 1300 uL\n     - ``thermoscientificnunc_96_wellplate_1300ul``\n   * - Thermo Scientific Nunc 96 Well Plate 2000 uL\n     - ``thermoscientificnunc_96_wellplate_2000ul``\n   * - USA Scientific 96 Deep Well Plate 2.4 mL\n     - ``usascientific_96_wellplate_2.4ml_deep``\n\nTo check whether a custom labware definition specifies this measurement, load the labware and query its :py:attr:`~.Labware.magdeck_engage_height` property.",
        "start_char_idx": 621,
        "end_char_idx": 2331,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "55101789-8dc2-429d-9a8b-d5623c1ba66d": {
      "__data__": {
        "id_": "55101789-8dc2-429d-9a8b-d5623c1ba66d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
          "file_name": "magnetic_module.rst",
          "file_size": 5781,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "070060f9-be83-493c-bbfd-5213611eb59e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4e45d12d-0e82-4d54-a423-82057b75c96c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0e1a13de613e3ace0b3db6789e2e9261e47abdaac15e0d8987159d17d06424d6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c3a44332-4b51-4967-81e8-369507b503c8",
            "node_type": "1",
            "metadata": {},
            "hash": "13784f0ff9388d2a8fe12415ea56608197351ac6bc47413e0c81327a056f9819",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If has a numerical value, the labware is ready for use with the Magnetic Module.\n\n.. _magnetic-module-engage:\n\nEngaging and Disengaging\n========================\n\nRaise and lower the module's magnets with the  :py:meth:`~.MagneticModuleContext.engage` and :py:meth:`~.MagneticModuleContext.disengage` functions, respectively.\n\nIf your loaded labware is fully compatible with the Magnetic Module, you can call ``engage()`` with no argument:\n\n  .. code-block:: python\n\n      mag_mod.engage()\n\n  ..\n\nThis will move the magnets upward to the default height for the labware, which should be close to the bottom of the labware's wells. If your loaded labware doesn't specify a default height, this will raise an ``ExceptionInProtocolError``.\n\nFor certain applications, you may want to move the magnets to a different height. The recommended way is to use the ``height_from_base`` parameter, which represents the distance above the base of the labware (its lowest point, where it rests on the module). Setting ``height_from_base=0`` should move the tops of the magnets level with the base of the labware. Alternatively, you can use the ``offset`` parameter, which represents the distance above *or below* the labware's default position (close to the bottom of its wells). Like using ``engage()`` with no argument, this will raise an error if there is no default height for the loaded labware.\n\n.. note::\n    There is up to 1 mm of manufacturing variance across Magnetic Module units, so observe the exact position and adjust as necessary before running your protocol.\n\nHere are some examples of where the magnets will move when using the different parameters in combination with the loaded NEST PCR plate, which specifies a default height of 20 mm:\n\n  .. code-block:: python\n\n      mag_mod.engage(height_from_base=13.5)  # 13.5 mm\n      mag_mod.engage(offset=-2)              # 15.5 mm\n\nNote that ``offset`` takes into account the fact that the magnets' home position is measured as \u22122.5 mm for GEN2 modules.\n\n  ..\n  .. versionchanged:: 2.2\n     Added the ``height_from_base`` parameter.",
        "start_char_idx": 2332,
        "end_char_idx": 4411,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c3a44332-4b51-4967-81e8-369507b503c8": {
      "__data__": {
        "id_": "c3a44332-4b51-4967-81e8-369507b503c8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
          "file_name": "magnetic_module.rst",
          "file_size": 5781,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "070060f9-be83-493c-bbfd-5213611eb59e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "55101789-8dc2-429d-9a8b-d5623c1ba66d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "22760ae4295c2a4c002523bbfeee378f323875e705fd8100fc6988554dff33e8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b5e6b215-0d07-4033-8507-9df9bdbf1159",
            "node_type": "1",
            "metadata": {},
            "hash": "5d847fd1559a30d898e6b7bdb598ddee96b1055007897248915fe5992ffbccb4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Like using ``engage()`` with no argument, this will raise an error if there is no default height for the loaded labware.\n\n.. note::\n    There is up to 1 mm of manufacturing variance across Magnetic Module units, so observe the exact position and adjust as necessary before running your protocol.\n\nHere are some examples of where the magnets will move when using the different parameters in combination with the loaded NEST PCR plate, which specifies a default height of 20 mm:\n\n  .. code-block:: python\n\n      mag_mod.engage(height_from_base=13.5)  # 13.5 mm\n      mag_mod.engage(offset=-2)              # 15.5 mm\n\nNote that ``offset`` takes into account the fact that the magnets' home position is measured as \u22122.5 mm for GEN2 modules.\n\n  ..\n  .. versionchanged:: 2.2\n     Added the ``height_from_base`` parameter.\n\nWhen you need to retract the magnets back to their home position, call :py:meth:`~.MagneticModuleContext.disengage`. \n\n  .. code-block:: python\n\n      mag_mod.disengage()  # -2.5 mm\n\n..\n\nIf at any point you need to check whether the magnets are engaged or not, use the :py:obj:`~.MagneticModuleContext.status` property. This will return either the string ``engaged`` or ``disengaged``, not the exact height of the magnets.\n\n.. note:: \n\n    The OT-2 will not automatically deactivate the Magnetic Module at the end of a protocol. If you need to deactivate the module after a protocol is completed or canceled, use the Magnetic Module controls on the device detail page in the Opentrons App or run ``deactivate()`` in Jupyter notebook.\n    \nChanges with the GEN2 Magnetic Module\n=====================================\n\nThe GEN2 Magnetic Module uses smaller magnets than the GEN1 version. This change helps mitigate an issue with the magnets attracting beads from their retracted position, but it also takes longer for the GEN2 module to attract beads. The recommended attraction time is 5 minutes for liquid volumes up to 50 uL and 7 minutes for volumes greater than 50 uL.",
        "start_char_idx": 3596,
        "end_char_idx": 5583,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b5e6b215-0d07-4033-8507-9df9bdbf1159": {
      "__data__": {
        "id_": "b5e6b215-0d07-4033-8507-9df9bdbf1159",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
          "file_name": "magnetic_module.rst",
          "file_size": 5781,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "070060f9-be83-493c-bbfd-5213611eb59e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "01ff5c871e406c5e5ce3973281527479b3022e24eef9faaf1ce4a08c6613c240",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c3a44332-4b51-4967-81e8-369507b503c8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3de742b6c4696581f39a29628104e58b4fe4139196cae6f4ca6b23b88a32a0fc",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8785c7d6-0d25-45a2-81af-e74acec0b17d",
            "node_type": "1",
            "metadata": {},
            "hash": "995ce054a431d30d146ec110b9fada59f1de8f20997828446114b88b29b715bb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This will return either the string ``engaged`` or ``disengaged``, not the exact height of the magnets.\n\n.. note:: \n\n    The OT-2 will not automatically deactivate the Magnetic Module at the end of a protocol. If you need to deactivate the module after a protocol is completed or canceled, use the Magnetic Module controls on the device detail page in the Opentrons App or run ``deactivate()`` in Jupyter notebook.\n    \nChanges with the GEN2 Magnetic Module\n=====================================\n\nThe GEN2 Magnetic Module uses smaller magnets than the GEN1 version. This change helps mitigate an issue with the magnets attracting beads from their retracted position, but it also takes longer for the GEN2 module to attract beads. The recommended attraction time is 5 minutes for liquid volumes up to 50 uL and 7 minutes for volumes greater than 50 uL. If your application needs additional magnetic strength to attract beads within these timeframes, use the available `Adapter Magnets <https://support.opentrons.com/s/article/Adapter-magnets>`_.",
        "start_char_idx": 4733,
        "end_char_idx": 5776,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8785c7d6-0d25-45a2-81af-e74acec0b17d": {
      "__data__": {
        "id_": "8785c7d6-0d25-45a2-81af-e74acec0b17d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
          "file_name": "multiple_same_type.rst",
          "file_size": 3245,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
              "file_name": "multiple_same_type.rst",
              "file_size": 3245,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "1a9e7b576c4f9e974465c3164d41e5c2a086924e0a0db2b073b586c27815e0a6",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b5e6b215-0d07-4033-8507-9df9bdbf1159",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
              "file_name": "magnetic_module.rst",
              "file_size": 5781,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "4f87040dde2e9c81bf801c3a576adf4c18b4af2f93435f8910dc007a4018cabb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d9344f98-b8dc-44e4-ab86-8c23b7d646cc",
            "node_type": "1",
            "metadata": {},
            "hash": "8dcce8079c5d16298b4c309e2741d0ee2a05d44ecbb7f2b64cf68bcecb7f3930",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to load and control multiple modules of the same type in a Python protocol.\n\n.. _moam:\n\n*********************************\nMultiple Modules of the Same Type\n*********************************\n\nYou can use multiple modules of the same type within a single protocol. The exception is the Thermocycler Module, which has only one supported deck location because of its size. Running protocols with multiple modules of the same type requires version 4.3 or newer of the Opentrons App and robot server. \n\nWhen working with multiple modules of the same type, load them in your protocol according to their USB port number. Deck coordinates are required by the :py:meth:`~.ProtocolContext.load_labware` method, but location does not determine which module loads first. Your robot will use the module with the lowest USB port number *before* using a module of the same type that's connected to higher numbered USB port. The USB port number (not deck location) determines module load sequence, starting with the lowest port number first.\n\n.. Recommend being formal-ish with protocol code samples.\n\n.. tabs::\n  \n  .. tab:: Flex\n\n    In this example, ``temperature_module_1`` loads first because it's connected to USB port 2. ``temperature_module_2`` loads next because it's connected to USB port 6.\n\n    .. code-block:: python\n      :substitutions:\n      \n      from opentrons import protocol_api\n      \n      requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n\n      def run(protocol: protocol_api.ProtocolContext):\n        # Load Temperature Module 1 in deck slot D1 on USB port 2\n        temperature_module_1 = protocol.load_module(\n          module_name='temperature module gen2',\n          location=\"D1\")\n\n        # Load Temperature Module 2 in deck slot C1 on USB port 6\n        temperature_module_2 = protocol.load_module(\n          module_name='temperature module gen2',\n          location=\"C1\")\n        \n    The Temperature Modules are connected as shown here:\n\n    .. image:: ../../img/modules/flex-usb-order.png\n       :width: 250\n\n  .. tab:: OT-2\n\n    In this example, ``temperature_module_1`` loads first because it's connected to USB port 1.",
        "start_char_idx": 0,
        "end_char_idx": 2174,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d9344f98-b8dc-44e4-ab86-8c23b7d646cc": {
      "__data__": {
        "id_": "d9344f98-b8dc-44e4-ab86-8c23b7d646cc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
          "file_name": "multiple_same_type.rst",
          "file_size": 3245,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
              "file_name": "multiple_same_type.rst",
              "file_size": 3245,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "1a9e7b576c4f9e974465c3164d41e5c2a086924e0a0db2b073b586c27815e0a6",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8785c7d6-0d25-45a2-81af-e74acec0b17d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
              "file_name": "multiple_same_type.rst",
              "file_size": 3245,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "8041e726cf467ad05d577bfce9edb8beb0975231a6c70e3a2e4e59d794f6bdec",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2bc15fee-b800-42db-8473-d85696cfe92d",
            "node_type": "1",
            "metadata": {},
            "hash": "575c2127b64af6729108140565921a1d74a1eb5ba00731f24bb367910602d521",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. code-block:: python\n      :substitutions:\n      \n      from opentrons import protocol_api\n      \n      requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n\n      def run(protocol: protocol_api.ProtocolContext):\n        # Load Temperature Module 1 in deck slot D1 on USB port 2\n        temperature_module_1 = protocol.load_module(\n          module_name='temperature module gen2',\n          location=\"D1\")\n\n        # Load Temperature Module 2 in deck slot C1 on USB port 6\n        temperature_module_2 = protocol.load_module(\n          module_name='temperature module gen2',\n          location=\"C1\")\n        \n    The Temperature Modules are connected as shown here:\n\n    .. image:: ../../img/modules/flex-usb-order.png\n       :width: 250\n\n  .. tab:: OT-2\n\n    In this example, ``temperature_module_1`` loads first because it's connected to USB port 1. ``temperature_module_2`` loads next because it's connected to USB port 3.\n\n    .. code-block:: python\n\n      from opentrons import protocol_api\n\n      metadata = { 'apiLevel': '2.14'}\n\n      def run(protocol: protocol_api.ProtocolContext):\n        # Load Temperature Module 1 in deck slot C1 on USB port 1\n        temperature_module_1 = protocol.load_module(\n          load_name='temperature module gen2',\n          location=\"1\")\n\n        # Load Temperature Module 2 in deck slot D3 on USB port 2\n        temperature_module_2 = protocol.load_module(\n          load_name='temperature module gen2',\n          location=\"3\")\n        \n    The Temperature Modules are connected as shown here:\n    \n    .. image:: ../../img/modules/multiples_of_a_module.svg\n\n\nBefore running your protocol, it's a good idea to use the module controls in the Opentrons App to check that commands are being sent where you expect.\n\nSee the support article `Using Modules of the Same Type <https://support.opentrons.com/s/article/Using-modules-of-the-same-type-on-the-OT-2>`_ for more information.",
        "start_char_idx": 1311,
        "end_char_idx": 3244,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2bc15fee-b800-42db-8473-d85696cfe92d": {
      "__data__": {
        "id_": "2bc15fee-b800-42db-8473-d85696cfe92d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
          "file_name": "setup.rst",
          "file_size": 7565,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d9344f98-b8dc-44e4-ab86-8c23b7d646cc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
              "file_name": "multiple_same_type.rst",
              "file_size": 3245,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "a40e1b5eb9c534edacace6560dbf28964927e43cb97fb472502bc9656a96a7ae",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cb40370d-5c8f-45ec-8093-73c8448a02fc",
            "node_type": "1",
            "metadata": {},
            "hash": "efab9eefe1e276910b3efd3eae514d86703b071de8466c1da189e2e16914c7db",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to load Opentrons hardware modules with adapters and labware in a Python protocol.\n\n.. _module-setup:\n\n************\nModule Setup\n************\n\nLoading Modules onto the Deck\n=============================\n\nSimilar to labware and pipettes, you must inform the API about the modules you want to use in your protocol. Even if you don't use the module anywhere else in your protocol, the Opentrons App and the robot won't let you start the protocol run until all loaded modules that use power are connected via USB and turned on.\n\nUse :py:meth:`.ProtocolContext.load_module` to load a module. \n\n.. tabs::\n    \n    .. tab:: Flex\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel': '|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext): \n                # Load a Heater-Shaker Module GEN1 in deck slot D1.\n                heater_shaker = protocol.load_module(\n                  module_name='heaterShakerModuleV1', location='D1')\n         \n                # Load a Temperature Module GEN2 in deck slot D3.\n                temperature_module = protocol.load_module(\n                  module_name='temperature module gen2', location='D3')\n\n        After the ``load_module()`` method loads the modules into your protocol, it returns the :py:class:`~opentrons.protocol_api.HeaterShakerContext` and :py:class:`~opentrons.protocol_api.TemperatureModuleContext` objects.",
        "start_char_idx": 0,
        "end_char_idx": 1514,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cb40370d-5c8f-45ec-8093-73c8448a02fc": {
      "__data__": {
        "id_": "cb40370d-5c8f-45ec-8093-73c8448a02fc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
          "file_name": "setup.rst",
          "file_size": 7565,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2bc15fee-b800-42db-8473-d85696cfe92d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "7788c55374bea969349f6818472b72015f29efe4528413a8aaf93dedad1fc3ea",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "807c6ec8-5a3b-4098-82ed-1d4270438790",
            "node_type": "1",
            "metadata": {},
            "hash": "bc40b9568457874a0cc893ef81ff95f8f5a3ceed209fff8115f69bb128288e4b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. tabs::\n    \n    .. tab:: Flex\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel': '|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext): \n                # Load a Heater-Shaker Module GEN1 in deck slot D1.\n                heater_shaker = protocol.load_module(\n                  module_name='heaterShakerModuleV1', location='D1')\n         \n                # Load a Temperature Module GEN2 in deck slot D3.\n                temperature_module = protocol.load_module(\n                  module_name='temperature module gen2', location='D3')\n\n        After the ``load_module()`` method loads the modules into your protocol, it returns the :py:class:`~opentrons.protocol_api.HeaterShakerContext` and :py:class:`~opentrons.protocol_api.TemperatureModuleContext` objects.\n        \n    .. tab:: OT-2\n        \n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n            \n            metadata = {'apiLevel': '2.14'}\n            \n            def run(protocol: protocol_api.ProtocolContext): \n                # Load a Magnetic Module GEN2 in deck slot 1.\n                magnetic_module = protocol.load_module(\n                  module_name='magnetic module gen2', location=1)\n         \n                # Load a Temperature Module GEN1 in deck slot 3.\n                temperature_module = protocol.load_module(\n                  module_name='temperature module', location=3)\n\n        After the ``load_module()`` method loads the modules into your protocol, it returns the :py:class:`~opentrons.protocol_api.MagneticModuleContext` and :py:class:`~opentrons.protocol_api.TemperatureModuleContext` objects.\n\n\n..\n\n.. _available_modules:\n\nAvailable Modules\n-----------------\n\nThe first parameter of :py:meth:`.ProtocolContext.load_module` is the module's  *API load name*. The load name tells your robot which module you're going to use in a protocol. The table below lists the API load names for the currently available modules.",
        "start_char_idx": 610,
        "end_char_idx": 2721,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "807c6ec8-5a3b-4098-82ed-1d4270438790": {
      "__data__": {
        "id_": "807c6ec8-5a3b-4098-82ed-1d4270438790",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
          "file_name": "setup.rst",
          "file_size": 7565,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cb40370d-5c8f-45ec-8093-73c8448a02fc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "4b58ae107e37950baa79a7f21931bec04904ae65420c1fbd179457a8111bad79",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "016d159f-293f-45d9-af26-9be407742d5e",
            "node_type": "1",
            "metadata": {},
            "hash": "19c58749a6e9425e77326401102b4cb853ee7b121d435a7dfbfbd58de56d56b2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "..\n\n.. _available_modules:\n\nAvailable Modules\n-----------------\n\nThe first parameter of :py:meth:`.ProtocolContext.load_module` is the module's  *API load name*. The load name tells your robot which module you're going to use in a protocol. The table below lists the API load names for the currently available modules.\n\n.. table::\n   :widths: 4 5 2\n   \n   +--------------------+-------------------------------+---------------------------+\n   | Module             | API Load Name                 | Introduced in API Version |\n   +====================+===============================+===========================+\n   | Temperature Module | ``temperature module``        | 2.0                       |\n   | GEN1               | or ``tempdeck``               |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Temperature Module | ``temperature module gen2``   | 2.3                       |\n   | GEN2               |                               |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Magnetic Module    | ``magnetic module``           | 2.0                       |\n   | GEN1               | or ``magdeck``                |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Magnetic Module    | ``magnetic module gen2``      | 2.3                       |\n   | GEN2               |                               |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Thermocycler       | ``thermocycler module``       | 2.0                       |\n   | Module GEN1        | or ``thermocycler``           |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Thermocycler       | ``thermocycler module gen2``  | 2.13                      |\n   | Module GEN2        | or ``thermocyclerModuleV2``   |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Heater-Shaker      | ``heaterShakerModuleV1``      | 2.13                      |\n   | Module GEN1        |                               |                           |\n   +--------------------+-------------------------------+---------------------------+\n   | Magnetic Block     | ``magneticBlockV1``           | 2.15                      |\n   | GEN1               |                               |                           |\n   +--------------------+-------------------------------+---------------------------+\n\nSome modules were added to our Python API later than others, and others span multiple hardware generations.",
        "start_char_idx": 2403,
        "end_char_idx": 5186,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "016d159f-293f-45d9-af26-9be407742d5e": {
      "__data__": {
        "id_": "016d159f-293f-45d9-af26-9be407742d5e",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
          "file_name": "setup.rst",
          "file_size": 7565,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "807c6ec8-5a3b-4098-82ed-1d4270438790",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "b8fd0f1dc233717012a46073357d24f1b4d02b7c0dad600a4e4951c1ccdde92d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2414e950-98b7-436d-ba18-de3485c35513",
            "node_type": "1",
            "metadata": {},
            "hash": "317b1758f0099b03602b7fa683436363891e0da6d635e0f0a7ea03b54a875787",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When writing a protocol that requires a module, make sure your ``requirements`` or ``metadata`` code block specifies an :ref:`API version <v2-versioning>` high enough to support all the module generations you want to use.\n\n.. _load-labware-module:\n\nLoading Labware onto a Module\n=============================\n\nUse the ``load_labware()`` method on the module context to load labware on a module. For example, to load the `Opentrons 24 Well Aluminum Block <https://labware.opentrons.com/opentrons_24_aluminumblock_generic_2ml_screwcap?category=aluminumBlock>`_ on top of a Temperature Module::\n\n    def run(protocol: protocol_api.ProtocolContext):\n        temp_mod = protocol.load_module(\n          module_name=\"temperature module gen2\",\n          location=\"D1\")\n        temp_labware = temp_mod.load_labware(\n            name=\"opentrons_24_aluminumblock_generic_2ml_screwcap\",\n            label=\"Temperature-Controlled Tubes\")\n\n..\n\nWhen you load labware on a module, you don\u2019t need to specify the deck slot. In the above example, the ``load_module()`` method already specifies where the module is on the deck: ``location= \"D1\"``.\n\nAny :ref:`custom labware <v2-custom-labware>` added to your Opentrons App is also accessible when loading labware onto a module. You can find and copy its load name by going to its card on the Labware page.\n\n.. versionadded:: 2.1\n\nModule and Labware Compatibility\n--------------------------------\n\nIt's your responsibility to ensure the labware and module combinations you load together work together. The Protocol API won't raise a warning or error if you load an unusual combination, like placing a tube rack on a Thermocycler. See `What labware can I use with my modules? <https://support.opentrons.com/s/article/What-labware-can-I-use-with-my-modules>`_ for more information about labware/module combinations.",
        "start_char_idx": 5187,
        "end_char_idx": 7029,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2414e950-98b7-436d-ba18-de3485c35513": {
      "__data__": {
        "id_": "2414e950-98b7-436d-ba18-de3485c35513",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
          "file_name": "setup.rst",
          "file_size": 7565,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "f5b125bfcafc2157968fef60a5d4fd996cd21d8136f5db9da345ca3c48068eb9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "016d159f-293f-45d9-af26-9be407742d5e",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "43a54e3f22163ecac1cf6b016128c3cc90e3f93b3a93a5e42792f2eb7f3d7995",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d545e65f-9b87-41d1-b840-12f95d36c6eb",
            "node_type": "1",
            "metadata": {},
            "hash": "7bbd564f76f2a14bf2905d5e8f9390ecca65a82bd0cdd17e3461e686eab16e61",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In the above example, the ``load_module()`` method already specifies where the module is on the deck: ``location= \"D1\"``.\n\nAny :ref:`custom labware <v2-custom-labware>` added to your Opentrons App is also accessible when loading labware onto a module. You can find and copy its load name by going to its card on the Labware page.\n\n.. versionadded:: 2.1\n\nModule and Labware Compatibility\n--------------------------------\n\nIt's your responsibility to ensure the labware and module combinations you load together work together. The Protocol API won't raise a warning or error if you load an unusual combination, like placing a tube rack on a Thermocycler. See `What labware can I use with my modules? <https://support.opentrons.com/s/article/What-labware-can-I-use-with-my-modules>`_ for more information about labware/module combinations.\n\n\nAdditional Labware Parameters\n-----------------------------\n\nIn addition to the mandatory ``load_name`` argument, you can also specify additional parameters. For example, if you specify a ``label``, this name will appear in the Opentrons App and the run log instead of the load name. For labware that has multiple definitions, you can specify ``version`` and ``namespace`` (though most of the time you won't have to). The :py:meth:`~.ProtocolContext.load_labware` methods of all module contexts accept these additional parameters.",
        "start_char_idx": 6193,
        "end_char_idx": 7562,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d545e65f-9b87-41d1-b840-12f95d36c6eb": {
      "__data__": {
        "id_": "d545e65f-9b87-41d1-b840-12f95d36c6eb",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
          "file_name": "temperature_module.rst",
          "file_size": 3205,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "12e8891c-1c03-4329-81e7-fe1963b9703e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
              "file_name": "temperature_module.rst",
              "file_size": 3205,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "c74e399df799a3b923b3724bbc7befa0ce820153911e8d3797374b7347bac6c1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2414e950-98b7-436d-ba18-de3485c35513",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
              "file_name": "setup.rst",
              "file_size": 7565,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "14307561160f77d71ce963610b86ab4cc2105e0295cdc310e99bd1177db7ca01",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5491c5ab-7e6e-43e3-821a-8441a9ef7519",
            "node_type": "1",
            "metadata": {},
            "hash": "b4fb9848c6cd9ddcc8bb728027fa939533d21d5deeaef4f76eb53df9c893f1ea",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to heat and cool with the Temperature Module in a Python protocol.\n\n.. _temperature-module:\n\n******************\nTemperature Module\n******************\n\nThe Temperature Module acts as both a cooling and heating device. It can control the temperature of its deck between 4 \u00b0C and 95 \u00b0C with a resolution of 1 \u00b0C.\n\nThe Temperature Module is represented in code by a :py:class:`.TemperatureModuleContext` object, which has methods for setting target temperatures and reading the module's status. This example demonstrates loading a Temperature Module GEN2 and loading a well plate on top of it.\n\n.. code-block:: python\n    :substitutions:\n\n    def run(protocol: protocol_api.ProtocolContext):\n        temp_mod = protocol.load_module(\n          module_name='temperature module gen2',\n          location='D3')\n        plate = temp_mod.load_labware(\n          name='corning_96_wellplate_360ul_flat')\n\n.. versionadded:: 2.3\n\nTemperature Control\n===================\n\nThe primary function of the module is to control the temperature of its deck, using :py:meth:`~.TemperatureModuleContext.set_temperature`, which takes one parameter: ``celsius``. For example, to set the Temperature Module to 4 \u00b0C:\n\n.. code-block:: python\n\n    temp_mod.set_temperature(celsius=4)\n\nWhen using ``set_temperature()``, your protocol will wait until the target temperature is reached before proceeding to further commands. In other words, you can pipette to or from the Temperature Module when it is holding at a temperature or idle, but not while it is actively changing temperature. Whenever the module reaches its target temperature, it will hold the temperature until you set a different target or call :py:meth:`~.TemperatureModuleContext.deactivate`, which will stop heating or cooling and will turn off the fan.\n\n.. note::\n\n    Your robot will not automatically deactivate the Temperature Module at the end of a protocol. If you need to deactivate the module after a protocol is completed or canceled, use the Temperature Module controls on the device detail page in the Opentrons App or run ``deactivate()`` in Jupyter notebook.",
        "start_char_idx": 0,
        "end_char_idx": 2125,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5491c5ab-7e6e-43e3-821a-8441a9ef7519": {
      "__data__": {
        "id_": "5491c5ab-7e6e-43e3-821a-8441a9ef7519",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
          "file_name": "temperature_module.rst",
          "file_size": 3205,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "12e8891c-1c03-4329-81e7-fe1963b9703e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
              "file_name": "temperature_module.rst",
              "file_size": 3205,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "c74e399df799a3b923b3724bbc7befa0ce820153911e8d3797374b7347bac6c1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d545e65f-9b87-41d1-b840-12f95d36c6eb",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
              "file_name": "temperature_module.rst",
              "file_size": 3205,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "92c7ccd18c77c497ed1bcaf4c77c098588311a857433a153dd58fbe262598b9a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4",
            "node_type": "1",
            "metadata": {},
            "hash": "43f4e2bcdbedd7fb0175de3e4d90bbb709cdb3d986f3c87f4d53e8e46d2d6877",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, to set the Temperature Module to 4 \u00b0C:\n\n.. code-block:: python\n\n    temp_mod.set_temperature(celsius=4)\n\nWhen using ``set_temperature()``, your protocol will wait until the target temperature is reached before proceeding to further commands. In other words, you can pipette to or from the Temperature Module when it is holding at a temperature or idle, but not while it is actively changing temperature. Whenever the module reaches its target temperature, it will hold the temperature until you set a different target or call :py:meth:`~.TemperatureModuleContext.deactivate`, which will stop heating or cooling and will turn off the fan.\n\n.. note::\n\n    Your robot will not automatically deactivate the Temperature Module at the end of a protocol. If you need to deactivate the module after a protocol is completed or canceled, use the Temperature Module controls on the device detail page in the Opentrons App or run ``deactivate()`` in Jupyter notebook.\n\n..\n\nTemperature Status\n==================\n\nIf you need to confirm in software whether the Temperature Module is holding at a temperature or is idle, use the :py:obj:`~.TemperatureModuleContext.status` property:\n\n.. code-block:: python\n\n    temp_mod.set_temperature(celsius=90)\n    temp_mod.status  # 'holding at target'\n    temp_mod.deactivate()\n    temp_mod.status  # 'idle'\n    \nIf you don't need to use the status value in your code, and you have physical access to the module, you can read its status and temperature from the LED and display on the module.\n    \n..\n\nChanges with the GEN2 Temperature Module\n========================================\n\nAll methods of :py:class:`.TemperatureModuleContext` work with both the GEN1 and GEN2 Temperature Module. Physically, the GEN2 module has a plastic insulating rim around the plate, and plastic insulating shrouds designed to fit over Opentrons aluminum blocks. This mitigates an issue where the GEN1 module would have trouble cooling to very low temperatures, especially if it shared the deck with a running Thermocycler.",
        "start_char_idx": 1157,
        "end_char_idx": 3200,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4": {
      "__data__": {
        "id_": "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5491c5ab-7e6e-43e3-821a-8441a9ef7519",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
              "file_name": "temperature_module.rst",
              "file_size": 3205,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "be41d46d6e41a23a6b0a0b26a093400f90d8e78500874029be065aa94f137c5e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "97dc403d-dd4a-4474-9732-5961f25413b0",
            "node_type": "1",
            "metadata": {},
            "hash": "818ac069e196503952bbc5707151bbf96869b6146116793e8b4af2d866058c2f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to control the lid, block, and temperature profile of the Thermocycler Module in a Python protocol.\n\n.. _thermocycler-module:\n\n*******************\nThermocycler Module\n*******************\n\nThe Thermocycler Module provides on-deck, fully automated thermocycling, and can heat and cool very quickly during operation. The module's block can reach and maintain temperatures between 4 and 99 \u00b0C. The module's lid can heat up to 110 \u00b0C.\n\nThe Thermocycler is represented in code by a :py:class:`.ThermocyclerContext` object, which has methods for controlling the lid, controlling the block, and setting *profiles* \u2014 timed heating and cooling routines that can be repeated automatically. \n\nThe examples in this section will use a Thermocycler Module GEN2 loaded as follows:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tc_mod = protocol.load_module(module_name='thermocyclerModuleV2')\n        plate = tc_mod.load_labware(name='nest_96_wellplate_100ul_pcr_full_skirt')\n\n.. versionadded:: 2.13\n\nLid Control\n===========\n\nThe Thermocycler can control the position and temperature of its lid. \n\nTo change the lid position, use :py:meth:`~.ThermocyclerContext.open_lid` and :py:meth:`~.ThermocyclerContext.close_lid`. When the lid is open, the pipettes can access the loaded labware. \n\nYou can also control the temperature of the lid. Acceptable target temperatures are between 37 and 110 \u00b0C. Use :py:meth:`~.ThermocyclerContext.set_lid_temperature`, which takes one parameter: the target ``temperature`` (in degrees Celsius) as an integer. For example, to set the lid to 50 \u00b0C:\n\n.. code-block:: python\n\n    tc_mod.set_lid_temperature(temperature=50)\n\nThe protocol will only proceed once the lid temperature reaches 50 \u00b0C. This is the case whether the previous temperature was lower than 50 \u00b0C (in which case the lid will actively heat) or higher than 50 \u00b0C (in which case the lid will passively cool).",
        "start_char_idx": 0,
        "end_char_idx": 1949,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "97dc403d-dd4a-4474-9732-5961f25413b0": {
      "__data__": {
        "id_": "97dc403d-dd4a-4474-9732-5961f25413b0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "759af1e722f449063922ab0ff690f01087cf30d21cf5128fbc482fda6a72fc26",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "eb3977da-715c-4778-8726-b82dc5678d6f",
            "node_type": "1",
            "metadata": {},
            "hash": "9301c67a2be8da9c0418b9230607e1dc8b11f8493aacdf2b74e6c19320b6490e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When the lid is open, the pipettes can access the loaded labware. \n\nYou can also control the temperature of the lid. Acceptable target temperatures are between 37 and 110 \u00b0C. Use :py:meth:`~.ThermocyclerContext.set_lid_temperature`, which takes one parameter: the target ``temperature`` (in degrees Celsius) as an integer. For example, to set the lid to 50 \u00b0C:\n\n.. code-block:: python\n\n    tc_mod.set_lid_temperature(temperature=50)\n\nThe protocol will only proceed once the lid temperature reaches 50 \u00b0C. This is the case whether the previous temperature was lower than 50 \u00b0C (in which case the lid will actively heat) or higher than 50 \u00b0C (in which case the lid will passively cool).\n\nYou can turn off the lid heater at any time with :py:meth:`~.ThermocyclerContext.deactivate_lid`.\n\n.. note::\n\n    Lid temperature is not affected by Thermocycler profiles. Therefore you should set an appropriate lid temperature to hold during your profile *before* executing it. See :ref:`thermocycler-profiles` for more information on defining and executing profiles.\n\n..\n\nBlock Control\n=============\n\nThe Thermocycler can control its block temperature, including holding at a temperature and adjusting for the volume of liquid held in its loaded plate.\n\nTemperature\n-----------\n\nTo set the block temperature inside the Thermocycler, use :py:meth:`~.ThermocyclerContext.set_block_temperature`. At minimum you have to specify a ``temperature`` in degrees Celsius:\n\n.. code-block:: python\n\n        tc_mod.set_block_temperature(temperature=4)\n        \nIf you don't specify any other parameters, the Thermocycler will hold this temperature until a new temperature is set, :py:meth:`~.ThermocyclerContext.deactivate_block` is called, or the module is powered off.\n\n..\n\nHold Time\n---------\n\nYou can optionally instruct the Thermocycler to hold its block temperature for a specific amount of time. You can specify ``hold_time_minutes``, ``hold_time_seconds``, or both (in which case they will be added together).",
        "start_char_idx": 1265,
        "end_char_idx": 3257,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "eb3977da-715c-4778-8726-b82dc5678d6f": {
      "__data__": {
        "id_": "eb3977da-715c-4778-8726-b82dc5678d6f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "97dc403d-dd4a-4474-9732-5961f25413b0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "2915747ff73ea5f7061091ef4c69f7d718f6951b85eb6ef6385c85fb0fec3700",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5c5e1212-45fe-4164-94d0-7dc6da6510cc",
            "node_type": "1",
            "metadata": {},
            "hash": "353366579d0a53a8fe2effcc86c809f3e4a8b157000de38a0e964b9c424249f3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "..\n\nBlock Control\n=============\n\nThe Thermocycler can control its block temperature, including holding at a temperature and adjusting for the volume of liquid held in its loaded plate.\n\nTemperature\n-----------\n\nTo set the block temperature inside the Thermocycler, use :py:meth:`~.ThermocyclerContext.set_block_temperature`. At minimum you have to specify a ``temperature`` in degrees Celsius:\n\n.. code-block:: python\n\n        tc_mod.set_block_temperature(temperature=4)\n        \nIf you don't specify any other parameters, the Thermocycler will hold this temperature until a new temperature is set, :py:meth:`~.ThermocyclerContext.deactivate_block` is called, or the module is powered off.\n\n..\n\nHold Time\n---------\n\nYou can optionally instruct the Thermocycler to hold its block temperature for a specific amount of time. You can specify ``hold_time_minutes``, ``hold_time_seconds``, or both (in which case they will be added together). For example, this will set the block to 4 \u00b0C for 4 minutes and 15 seconds::\n    \n    tc_mod.set_block_temperature(\n        temperature=4,\n        hold_time_minutes=4,\n        hold_time_seconds=15)\n\n.. note ::\n\n    Your protocol will not proceed to further commands while holding at a temperature. If you don't specify a hold time, the protocol will proceed as soon as the target temperature is reached.\n\n..\n\nBlock Max Volume\n----------------\n\nThe Thermocycler's block temperature controller varies its behavior based on the amount of liquid in the wells of its labware. Accurately specifying the liquid volume allows the Thermocycler to more precisely control the temperature of the samples. You should set the ``block_max_volume`` parameter to the amount of liquid in the *fullest* well, measured in uL. If not specified, the Thermocycler will assume samples of 25 uL.\n\nIt is especially important to specify ``block_max_volume`` when holding at a temperature.",
        "start_char_idx": 2321,
        "end_char_idx": 4218,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5c5e1212-45fe-4164-94d0-7dc6da6510cc": {
      "__data__": {
        "id_": "5c5e1212-45fe-4164-94d0-7dc6da6510cc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "eb3977da-715c-4778-8726-b82dc5678d6f",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ac46ec18443588d989073fef0c5734bee8c6cab91b107dca3e7472d13b41053d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8",
            "node_type": "1",
            "metadata": {},
            "hash": "93db2ffac9343465c730747b9f61daf5931fa2d53ee2411c56114406752ca95d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you don't specify a hold time, the protocol will proceed as soon as the target temperature is reached.\n\n..\n\nBlock Max Volume\n----------------\n\nThe Thermocycler's block temperature controller varies its behavior based on the amount of liquid in the wells of its labware. Accurately specifying the liquid volume allows the Thermocycler to more precisely control the temperature of the samples. You should set the ``block_max_volume`` parameter to the amount of liquid in the *fullest* well, measured in uL. If not specified, the Thermocycler will assume samples of 25 uL.\n\nIt is especially important to specify ``block_max_volume`` when holding at a temperature. For example, say you want to hold larger samples at a temperature for a short time::\n\n        tc_mod.set_block_temperature(\n            temperature=4,\n            hold_time_seconds=20,\n            block_max_volume=80)\n\nIf the Thermocycler assumes these samples are 25 uL, it may not cool them to 4 \u00b0C before starting the 20-second timer. In fact, with such a short hold time they may not reach 4 \u00b0C at all!\n\n..\n\n\n.. _thermocycler-profiles:\n\nThermocycler Profiles\n=====================\n\nIn addition to executing individual temperature commands, the Thermocycler can automatically cycle through a sequence of block temperatures to perform heat-sensitive reactions. These sequences are called *profiles*, which are defined in the Protocol API as lists of dictionaries. Each dictionary within the profile should have a ``temperature`` key, which specifies the temperature of the step, and either or both of ``hold_time_seconds`` and ``hold_time_minutes``, which specify the duration of the step. \n\nFor example, this profile commands the Thermocycler to reach 10 \u00b0C and hold for 30 seconds, and then to reach 60 \u00b0C and hold for 45 seconds:\n\n.. code-block:: python\n\n        profile = [\n            {'temperature':10, 'hold_time_seconds':30},\n            {'temperature':60, 'hold_time_seconds':45}\n        ]\n\nOnce you have written the steps of your profile, execute it with :py:meth:`~.ThermocyclerContext.execute_profile`. This function executes your profile steps multiple times depending on the ``repetitions`` parameter.",
        "start_char_idx": 3555,
        "end_char_idx": 5736,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8": {
      "__data__": {
        "id_": "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5c5e1212-45fe-4164-94d0-7dc6da6510cc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "82e4dec3f1be2b978ff66efc1d8cc9f562668f2383f54cf12cb695f02dc26d9f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "30bea738-adb3-49ce-b4c5-2cb02c62296d",
            "node_type": "1",
            "metadata": {},
            "hash": "e5b14319e7e1921187c4f6b1d347c33b8777da2fcab0577c1829bffc2bdcb2d9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "These sequences are called *profiles*, which are defined in the Protocol API as lists of dictionaries. Each dictionary within the profile should have a ``temperature`` key, which specifies the temperature of the step, and either or both of ``hold_time_seconds`` and ``hold_time_minutes``, which specify the duration of the step. \n\nFor example, this profile commands the Thermocycler to reach 10 \u00b0C and hold for 30 seconds, and then to reach 60 \u00b0C and hold for 45 seconds:\n\n.. code-block:: python\n\n        profile = [\n            {'temperature':10, 'hold_time_seconds':30},\n            {'temperature':60, 'hold_time_seconds':45}\n        ]\n\nOnce you have written the steps of your profile, execute it with :py:meth:`~.ThermocyclerContext.execute_profile`. This function executes your profile steps multiple times depending on the ``repetitions`` parameter. It also takes a ``block_max_volume`` parameter, which is the same as that of the :py:meth:`~.ThermocyclerContext.set_block_temperature` function.\n\nFor instance, a PCR prep protocol might define and execute a profile like this:\n\n.. code-block:: python\n\n        profile = [\n            {'temperature':95, 'hold_time_seconds':30},\n            {'temperature':57, 'hold_time_seconds':30},\n            {'temperature':72, 'hold_time_seconds':60}\n        ]\n        tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=32)\n\nIn terms of the actions that the Thermocycler performs, this would be equivalent to nesting ``set_block_temperature`` commands in a ``for`` loop:\n\n.. code-block:: python\n\n        for i in range(20):\n            tc_mod.set_block_temperature(95, hold_time_seconds=30, block_max_volume=32)\n            tc_mod.set_block_temperature(57, hold_time_seconds=30, block_max_volume=32)\n            tc_mod.set_block_temperature(72, hold_time_seconds=60, block_max_volume=32)\n            \nHowever, this code would generate 60 lines in the protocol's run log, while executing a profile is summarized in a single line. Additionally, you can set a profile once and execute it multiple times (with different numbers of repetitions and maximum volumes, if needed).",
        "start_char_idx": 4882,
        "end_char_idx": 7016,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "30bea738-adb3-49ce-b4c5-2cb02c62296d": {
      "__data__": {
        "id_": "30bea738-adb3-49ce-b4c5-2cb02c62296d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
          "file_name": "thermocycler.rst",
          "file_size": 7842,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c1c5494f0b74f08f4f33b41ee629a00a19559ec733175a9554765ceabc1c57da",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ae5610bfdb93981077182e2551a167cf092c83df3f312960e88a5e47c1c367b0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6266fa60-fb2c-435a-8b42-9a0728ec7f67",
            "node_type": "1",
            "metadata": {},
            "hash": "b646d8e009eb7ee61b02cdb04b7797c2ff5e34f1b93ba0f23275d6599bb3ec96",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Additionally, you can set a profile once and execute it multiple times (with different numbers of repetitions and maximum volumes, if needed).\n\n.. note::\n\n    Temperature profiles only control the temperature of the `block` in the Thermocycler. You should set a lid temperature before executing the profile using :py:meth:`~.ThermocyclerContext.set_lid_temperature`.\n\n..\n\n\nChanges with the GEN2 Thermocycler Module\n=========================================\n\nAll methods of :py:class:`.ThermocyclerContext` work with both the GEN1 and GEN2 Thermocycler. One practical difference is that the GEN2 module has a plate lift feature to make it easier to remove the plate manually or with the Opentrons Flex Gripper. To activate the plate lift, press the button on the Thermocycler for three seconds while the lid is open. If you need to do this in the middle of a run, call :py:meth:`~.ProtocolContext.pause`, lift and move the plate, and then resume the run.",
        "start_char_idx": 6874,
        "end_char_idx": 7827,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6266fa60-fb2c-435a-8b42-9a0728ec7f67": {
      "__data__": {
        "id_": "6266fa60-fb2c-435a-8b42-9a0728ec7f67",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "30bea738-adb3-49ce-b4c5-2cb02c62296d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
              "file_name": "thermocycler.rst",
              "file_size": 7842,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "15560ffa086703a06a0c2c2da99772950a4f7a4a240499ffc6f099277785be67",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0ca14135-c1e7-48ce-8afe-b260ac093908",
            "node_type": "1",
            "metadata": {},
            "hash": "63510e1f39f6ade997e250a9a797c29e664a867807ef0010a3503515f40748a8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to move labware, with the Flex Gripper or manually, in a Python protocol.\n\n.. _moving-labware:\n\n**************\nMoving Labware\n**************\n\nYou can move an entire labware (and all of its contents) from one deck slot to another at any point during your protocol. On Flex, you can either use the gripper or move the labware manually. On OT-2, you can can only move labware manually, since it doesn't have a gripper instrument. \n\nBasic Movement\n==============\n\nUse the :py:meth:`.ProtocolContext.move_labware` method to initiate a move, regardless of whether it uses the gripper.\n\n.. code-block:: python\n    :substitutions:\n        \n    def run(protocol: protocol_api.ProtocolContext):\n        plate = protocol.load_labware('nest_96_wellplate_200ul_flat', 'D1')\n        protocol.move_labware(labware=plate, new_location='D2')\n        \n.. versionadded:: 2.15\n\nThe required arguments of ``move_labware()`` are the ``labware`` you want to move and its ``new_location``. You don't need to specify where the move begins, since that information is already stored in the :py:class:`~opentrons.protocol_api.labware.Labware` object \u2014 ``plate`` in this example. The destination of the move can be any empty deck slot, or a module that's ready to have labware added to it (see :ref:`movement-modules` below). Movement to an occupied location, including the labware's current location, will raise an error.\n\nWhen the move step is complete, the API updates the labware's location, so you can move the plate multiple times::\n\n    protocol.move_labware(labware=plate, new_location='D2')\n    protocol.move_labware(labware=plate, new_location='D3')\n    \nFor the first move, the API knows to find the plate in its initial load location, slot D1. For the second move, the API knows to find the plate in D2.",
        "start_char_idx": 0,
        "end_char_idx": 1807,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0ca14135-c1e7-48ce-8afe-b260ac093908": {
      "__data__": {
        "id_": "0ca14135-c1e7-48ce-8afe-b260ac093908",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6266fa60-fb2c-435a-8b42-9a0728ec7f67",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "cb39610ee50c7f95203187247b609397798b5198e9cf915c712d1da78fed29bf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e7bbf55c-0555-43f3-ab52-3fc85bba8e54",
            "node_type": "1",
            "metadata": {},
            "hash": "85fee1d75e546bd26bdff1dc7f59327b0b379a5456b45bf77f1730a56ec9c98a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Automatic vs Manual Moves\n=========================\n\nThere are two ways to move labware:\n\n- Automatically, with the Opentrons Flex Gripper.\n- Manually, by pausing the protocol until a user confirms that they've moved the labware.\n\nThe ``use_gripper`` parameter of :py:meth:`~.ProtocolContext.move_labware` determines whether a movement is automatic or manual. Set its value to ``True`` for an automatic move. The default value is ``False``, so if you don't specify a value, the protocol will pause for a manual move.\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        plate = protocol.load_labware('nest_96_wellplate_200ul_flat', 'D1')\n        \n        # have the gripper move the plate from D1 to D2\n        protocol.move_labware(labware=plate, new_location='D2', use_gripper=True)\n        \n        # pause to move the plate manually from D2 to D3\n        protocol.move_labware(labware=plate, new_location='D3', use_gripper=False)\n        \n        # pause to move the plate manually from D3 to C1\n        protocol.move_labware(labware=plate, new_location='C1')\n\n.. versionadded:: 2.15\n\n.. note::\n    Don't add a ``pause()`` command before ``move_labware()``. When ``use_gripper`` is unset or ``False``, the protocol pauses when it reaches the movement step. The Opentrons App or the touchscreen on Flex shows an animation of the labware movement that you need to perform manually. The protocol only resumes when you press **Confirm and resume**.\n\nThe above example is a complete and valid ``run()`` function. You don't have to load the gripper as an instrument, and there is no ``InstrumentContext`` for the gripper. All you have to do to specify that a protocol requires the gripper is to include at least one ``move_labware()`` command with ``use_labware=True``.\n\nIf you attempt to use the gripper to move labware in an OT-2 protocol, the API will raise an error.",
        "start_char_idx": 1810,
        "end_char_idx": 3711,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e7bbf55c-0555-43f3-ab52-3fc85bba8e54": {
      "__data__": {
        "id_": "e7bbf55c-0555-43f3-ab52-3fc85bba8e54",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0ca14135-c1e7-48ce-8afe-b260ac093908",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "7de644d56d3685ddeed9c3f5261cd1528a1eb4e61faa04068460ca5a142159db",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f1384e4c-89a6-4248-86ec-5530dc41bedc",
            "node_type": "1",
            "metadata": {},
            "hash": "25d02f4ef05fe8f780c84516f4b3f25081e8e0f43c8ad27a39523c23e6cfc6bb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Supported Labware\n=================\n\nYou can manually move any standard or custom labware. Using the gripper to move the following labware is fully supported by Opentrons:\n\n.. list-table::\n    :header-rows: 1\n\n    * - Labware Type\n      - API Load Names\n    * - Full-skirt PCR plates\n      - \n          * ``armadillo_96_wellplate_200ul_pcr_full_skirt``\n          * ``opentrons_96_wellplate_200ul_pcr_full_skirt``\n    * - NEST well plates\n      - \n          * ``nest_96_wellplate_200ul_flat``\n          * ``nest_96_wellplate_2ml_deep``\n    * - Opentrons Flex 96 Tip Racks \n      - \n          * ``opentrons_flex_96_tiprack_50ul``\n          * ``opentrons_flex_96_tiprack_200ul``\n          * ``opentrons_flex_96_tiprack_1000ul``\n          * ``opentrons_flex_96_filtertiprack_50ul``\n          * ``opentrons_flex_96_filtertiprack_200ul``\n          * ``opentrons_flex_96_filtertiprack_1000ul``\n    \nThe gripper may work with other ANSI/SLAS standard labware, but this is not recommended.\n\n.. note::\n\n    The labware definitions listed above include information about the position and force that the gripper uses to pick up the labware. The gripper uses default values for labware definitions that don't include position and force information. The Python Protocol API won't raise a warning or error if you try to grip and move other types of labware.\n\n\n.. _movement-modules: \n\nMovement with Modules\n=====================\n\nMoving labware on and off of modules lets you precisely control when the labware is in contact with the hot, cold, or magnetic surfaces of the modules \u2014\u00a0all within a single protocol.\n\nWhen moving labware anywhere that isn't an empty deck slot, consider what physical object the labware will rest on following the move. That object should be the value of ``new_location``, and you need to make sure it's already loaded before the move.",
        "start_char_idx": 3714,
        "end_char_idx": 5562,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f1384e4c-89a6-4248-86ec-5530dc41bedc": {
      "__data__": {
        "id_": "f1384e4c-89a6-4248-86ec-5530dc41bedc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e7bbf55c-0555-43f3-ab52-3fc85bba8e54",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "60b5bb31c9129e36b8bf7e88878b7c4e1fbbd66fc6579f6617c6987ef3f4085f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8",
            "node_type": "1",
            "metadata": {},
            "hash": "f457c6e339f40d53daba21ed71d6f7fff0eaff58dc5c4f54752d5411a607232d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _movement-modules: \n\nMovement with Modules\n=====================\n\nMoving labware on and off of modules lets you precisely control when the labware is in contact with the hot, cold, or magnetic surfaces of the modules \u2014\u00a0all within a single protocol.\n\nWhen moving labware anywhere that isn't an empty deck slot, consider what physical object the labware will rest on following the move. That object should be the value of ``new_location``, and you need to make sure it's already loaded before the move. For example, if you want to move a 96-well flat plate onto a Heater-Shaker module, you actually want to have it rest on top of the Heater-Shaker's 96 Flat Bottom Adapter. Pass the adapter, not the module or the slot, as the value of ``new_location``::\n\n    def run(protocol: protocol_api.ProtocolContext):\n        plate = protocol.load_labware(\"nest_96_wellplate_200ul_flat\", \"D1\")\n        hs_mod = protocol.load_module(\"heaterShakerModuleV1\", \"C1\")\n        hs_adapter = hs_mod.load_adapter(\"opentrons_96_flat_bottom_adapter\")\n        hs_mod.open_labware_latch()\n        protocol.move_labware(\n            labware=plate, new_location=hs_adapter, use_gripper=True\n        )\n\n.. versionadded:: 2.15\n\nIf you try to move the plate to slot C1 or the Heater-Shaker module, the API will raise an error, because C1 is occupied by the Heater-Shaker, and the Heater-Shaker is occupied by the adapter. Only the adapter, as the topmost item in that stack, is unoccupied.\n\nAlso note the ``hs_mod.open_labware_latch()`` command in the above example. To move labware onto or off of a module, you have to make sure that it's physically accessible:\n\n    - For the Heater-Shaker, use :py:meth:`~.HeaterShakerContext.open_labware_latch`.\n    - For the Thermocycler, use :py:meth:`~.ThermocyclerContext.open_lid`.\n    \nIf the labware is inaccessible, the API will raise an error.",
        "start_char_idx": 5059,
        "end_char_idx": 6922,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8": {
      "__data__": {
        "id_": "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f1384e4c-89a6-4248-86ec-5530dc41bedc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "8475d369bb85626983532ef51543a71e486805d760ae62fed77bab76d89de73d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b3717357-f19c-4530-bfdd-45b407eecb47",
            "node_type": "1",
            "metadata": {},
            "hash": "7d5ddbba52839710b3cf51a4bfbafd525a61075e120df87abd8ce8866428c2b8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Only the adapter, as the topmost item in that stack, is unoccupied.\n\nAlso note the ``hs_mod.open_labware_latch()`` command in the above example. To move labware onto or off of a module, you have to make sure that it's physically accessible:\n\n    - For the Heater-Shaker, use :py:meth:`~.HeaterShakerContext.open_labware_latch`.\n    - For the Thermocycler, use :py:meth:`~.ThermocyclerContext.open_lid`.\n    \nIf the labware is inaccessible, the API will raise an error. \n\n.. _off-deck-location:\n\nThe Off-Deck Location\n=====================\n\nIn addition to moving labware around the deck, :py:meth:`~.ProtocolContext.move_labware` can also prompt you to move labware off of or onto the deck. \n\nRemove labware from the deck to perform tasks like retrieving samples or discarding a spent tip rack. The destination location for such moves is the special constant :py:obj:`~opentrons.protocol_api.OFF_DECK`::\n\n    protocol.move_labware(labware=plate, new_location=protocol_api.OFF_DECK)\n    \n.. versionadded:: 2.15\n\nMoving labware off-deck always requires user intervention, because the gripper can't reach outside of the robot. Omit the ``use_gripper`` parameter or explicitly set it to ``False``. If you try to move labware off-deck with ``use_gripper=True``, the API will raise an error.\n\nYou can also load labware off-deck, in preparation for a ``move_labware()`` command that brings it `onto` the deck. For example, you could assign two tip racks to a pipette \u2014 one on-deck, and one off-deck \u2014 and then swap out the first rack for the second one::\n\n    from opentrons import protocol_api\n\n    metadata = {\"apiLevel\": \"2.15\", \"protocolName\": \"Tip rack replacement\"}\n    requirements = {\"robotType\": \"OT-2\"}",
        "start_char_idx": 6454,
        "end_char_idx": 8158,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b3717357-f19c-4530-bfdd-45b407eecb47": {
      "__data__": {
        "id_": "b3717357-f19c-4530-bfdd-45b407eecb47",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
          "file_name": "moving_labware.rst",
          "file_size": 9192,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "5fb5561a-5539-44f8-bb69-6f1462e84132",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "befbe678e84a26344a8ed5a10bded77fc98f5b82a7cdce7143d53557495d9fa2",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "5c18c4f20f7297325881116f630a1577447f53d53f8ebc2b3fd9ffb840806e50",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2",
            "node_type": "1",
            "metadata": {},
            "hash": "422834f55fb698416816aaaa43f8af3d9af6bc33c863a8bf7ab1bae46e30a1af",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Omit the ``use_gripper`` parameter or explicitly set it to ``False``. If you try to move labware off-deck with ``use_gripper=True``, the API will raise an error.\n\nYou can also load labware off-deck, in preparation for a ``move_labware()`` command that brings it `onto` the deck. For example, you could assign two tip racks to a pipette \u2014 one on-deck, and one off-deck \u2014 and then swap out the first rack for the second one::\n\n    from opentrons import protocol_api\n\n    metadata = {\"apiLevel\": \"2.15\", \"protocolName\": \"Tip rack replacement\"}\n    requirements = {\"robotType\": \"OT-2\"}\n\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tips1 = protocol.load_labware(\"opentrons_96_tiprack_1000ul\", 1)\n        # load another tip rack but don't put it in a slot yet\n        tips2 = protocol.load_labware(\n            \"opentrons_96_tiprack_1000ul\", protocol_api.OFF_DECK\n        )\n        pipette = protocol.load_instrument(\n            \"p1000_single_gen2\", \"left\", tip_racks=[tips1, tips2]\n        )\n        # use all the on-deck tips\n        for i in range(96):\n            pipette.pick_up_tip()\n            pipette.drop_tip()\n        # pause to move the spent tip rack off-deck\n        protocol.move_labware(labware=tips1, new_location=protocol_api.OFF_DECK)\n        # pause to move the fresh tip rack on-deck\n        protocol.move_labware(labware=tips2, new_location=1)\n        pipette.pick_up_tip()\n\nUsing the off-deck location to remove or replace labware lets you continue your workflow in a single protocol, rather than needing to end a protocol, reset the deck, and start a new protocol run.",
        "start_char_idx": 7577,
        "end_char_idx": 9182,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2": {
      "__data__": {
        "id_": "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b3717357-f19c-4530-bfdd-45b407eecb47",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
              "file_name": "moving_labware.rst",
              "file_size": 9192,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "e676dbae5fa6e7bb2246c6c89c7a3d253d9b3a2d8070a4e543d3770ceca9e206",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83",
            "node_type": "1",
            "metadata": {},
            "hash": "470a3edfdf4b7dde02e449ec31a483a51d6aa1dc8213a285cbef4e13862eb89b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to control a robot outside of the Opentrons App, using Jupyter Notebook or the command line.\n\n.. _advanced-control:\n\nAdvanced Control\n================\n\nAs its name implies, the Python Protocol API is primarily designed for creating protocols that you upload via the Opentrons App and execute on the robot as a unit. But sometimes it's more convenient to control the robot outside of the app. For example, you might want to have variables in your code that change based on user input or the contents of a CSV file. Or you might want to only execute part of your protocol at a time, especially when developing or debugging a new protocol.\n\nThe Python API offers two ways of issuing commands to the robot outside of the app: through Jupyter Notebook or on the command line with ``opentrons_execute``.\n\nJupyter Notebook\n----------------\n\nThe Flex and OT-2 run `Jupyter Notebook <https://jupyter.org>`_ servers on port 48888, which you can connect to with your web browser. This is a convenient environment for writing and debugging protocols, since you can define different parts of your protocol in different notebook cells and run a single cell at a time.\n\n.. note::\n    Currently, the Jupyter Notebook server does not work with Python Protocol API versions 2.14 and 2.15. It does work with API versions 2.13 and earlier. Use the Opentrons App to run protocols that require functionality added in newer versions.\n\nAccess your robot's Jupyter Notebook by either:\n\n- Going to the **Advanced** tab of Robot Settings and clicking **Launch Jupyter Notebook**.\n- Going directly to ``http://<robot-ip>:48888`` in your web browser (if you know your robot's IP address).\n\nOnce you've launched Jupyter Notebook, you can create a notebook file or edit an existing one. These notebook files are stored on the the robot. If you want to save code from a notebook to your computer, go to **File > Download As** in the notebook interface.\n\nProtocol Structure\n^^^^^^^^^^^^^^^^^^\n\nJupyter Notebook is structured around `cells`: discrete chunks of code that can be run individually. This is nearly the opposite of Opentrons protocols, which bundle all commands into a single ``run`` function.",
        "start_char_idx": 0,
        "end_char_idx": 2192,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83": {
      "__data__": {
        "id_": "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "4559eb282071ecc91b5224aba5658bb6fffbe3c54e5ef1c20d367a30bd67b3a9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f930b218-26ac-4a55-913f-ebb285f24de0",
            "node_type": "1",
            "metadata": {},
            "hash": "622acf2650211fba6cb55a8fd47a0b15a3a1b57b7e7dc1a25326ad9ca8dde89b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It does work with API versions 2.13 and earlier. Use the Opentrons App to run protocols that require functionality added in newer versions.\n\nAccess your robot's Jupyter Notebook by either:\n\n- Going to the **Advanced** tab of Robot Settings and clicking **Launch Jupyter Notebook**.\n- Going directly to ``http://<robot-ip>:48888`` in your web browser (if you know your robot's IP address).\n\nOnce you've launched Jupyter Notebook, you can create a notebook file or edit an existing one. These notebook files are stored on the the robot. If you want to save code from a notebook to your computer, go to **File > Download As** in the notebook interface.\n\nProtocol Structure\n^^^^^^^^^^^^^^^^^^\n\nJupyter Notebook is structured around `cells`: discrete chunks of code that can be run individually. This is nearly the opposite of Opentrons protocols, which bundle all commands into a single ``run`` function. Therefore, to take full advantage of Jupyter Notebook, you have to restructure your protocol. \n\nRather than writing a  ``run`` function and embedding commands within it, start your notebook by importing ``opentrons.execute`` and calling :py:meth:`opentrons.execute.get_protocol_api`. This function also replaces the ``metadata`` block of a standalone protocol by taking the minimum :ref:`API version <v2-versioning>` as its argument. Then you can call :py:class:`~opentrons.protocol_api.ProtocolContext` methods in subsequent lines or cells:\n\n.. code-block:: python\n\n    import opentrons.execute\n    protocol = opentrons.execute.get_protocol_api(\"2.13\")\n    protocol.home()\n\nThe first command you execute should always be :py:meth:`~opentrons.protocol_api.ProtocolContext.home`. If you try to execute other commands first, you will get a ``MustHomeError``. (When running protocols through the Opentrons App, the robot homes automatically.)\n\nYou should use the same :py:class:`.ProtocolContext` throughout your notebook, unless you need to start over from the beginning of your protocol logic. In that case, call :py:meth:`~opentrons.execute.get_protocol_api` again to get a new :py:class:`.ProtocolContext`.",
        "start_char_idx": 1292,
        "end_char_idx": 3400,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f930b218-26ac-4a55-913f-ebb285f24de0": {
      "__data__": {
        "id_": "f930b218-26ac-4a55-913f-ebb285f24de0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "f8f9054d6cb0a65339b77e0d2c9c2a6e93fdf8b31b6fc55f9fc017ba229ea2ce",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6",
            "node_type": "1",
            "metadata": {},
            "hash": "325af7fa4ab7e24fc6c4e489d93cfafc3dcb65e57202845232d7749802a06e17",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Then you can call :py:class:`~opentrons.protocol_api.ProtocolContext` methods in subsequent lines or cells:\n\n.. code-block:: python\n\n    import opentrons.execute\n    protocol = opentrons.execute.get_protocol_api(\"2.13\")\n    protocol.home()\n\nThe first command you execute should always be :py:meth:`~opentrons.protocol_api.ProtocolContext.home`. If you try to execute other commands first, you will get a ``MustHomeError``. (When running protocols through the Opentrons App, the robot homes automatically.)\n\nYou should use the same :py:class:`.ProtocolContext` throughout your notebook, unless you need to start over from the beginning of your protocol logic. In that case, call :py:meth:`~opentrons.execute.get_protocol_api` again to get a new :py:class:`.ProtocolContext`.\n\nRunning a Previously Written Protocol\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also use Jupyter to run a protocol that you have already written. To do so, first copy the entire text of the protocol into a cell and run that cell:\n\n.. code-block:: python\n\n    import opentrons.execute\n    from opentrons import protocol_api\n    def run(protocol: protocol_api.ProtocolContext):\n        # the contents of your previously written protocol go here\n\n\nSince a typical protocol only `defines` the ``run`` function but doesn't `call` it, this won't immediately cause the robot to move. To begin the run, instantiate a :py:class:`.ProtocolContext` and pass it to the ``run`` function you just defined:\n\n.. code-block:: python\n\n    protocol = opentrons.execute.get_protocol_api(\"2.13\")\n    run(protocol)  # your protocol will now run\n\n.. _using_lpc:\n\nSetting Labware Offsets\n-----------------------\n\nAll positions relative to labware are adjusted automatically based on labware offset data. When you're running your code in Jupyter Notebook or with ``opentrons_execute``, you need to set your own offsets because you can't perform run setup and Labware Position Check in the Opentrons App or on the Flex touchscreen. For these applications, do the following to calculate and apply labware offsets:\n\t\n\t1.",
        "start_char_idx": 2627,
        "end_char_idx": 4699,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6": {
      "__data__": {
        "id_": "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f930b218-26ac-4a55-913f-ebb285f24de0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "372927431b828abf824133edbadf0be12967cd29a79dc9dbff467598a27e7b8e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "640c98cf-9553-49d8-97f4-ad858fb8ed42",
            "node_type": "1",
            "metadata": {},
            "hash": "9a35a89409a595c08312c57f49839a2dc2ac70c6b049e1315005398285c11536",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Since a typical protocol only `defines` the ``run`` function but doesn't `call` it, this won't immediately cause the robot to move. To begin the run, instantiate a :py:class:`.ProtocolContext` and pass it to the ``run`` function you just defined:\n\n.. code-block:: python\n\n    protocol = opentrons.execute.get_protocol_api(\"2.13\")\n    run(protocol)  # your protocol will now run\n\n.. _using_lpc:\n\nSetting Labware Offsets\n-----------------------\n\nAll positions relative to labware are adjusted automatically based on labware offset data. When you're running your code in Jupyter Notebook or with ``opentrons_execute``, you need to set your own offsets because you can't perform run setup and Labware Position Check in the Opentrons App or on the Flex touchscreen. For these applications, do the following to calculate and apply labware offsets:\n\t\n\t1. Create a \"dummy\" protocol that loads your labware and has each used pipette pick up a tip from a tip rack.\n\t2. Import the dummy protocol to the Opentrons App.\n\t3. Run Labware Position Check from the app or touchscreen.\n\t4. Add the offsets to your code with :py:meth:`.set_offset`.\n\t\nCreating the dummy protocol requires you to:\n\n    1. Use the ``metadata`` or ``requirements`` dictionary to specify the API version. (See :ref:`v2-versioning` for details.) Use the same API version as you did in :py:meth:`opentrons.execute.get_protocol_api`.\n    2. Define a ``run()`` function.\n    3. Load all of your labware in their initial locations.\n    4. Load your smallest capacity pipette and specify its ``tipracks``.\n    5. Call ``pick_up_tip()``. Labware Position Check can't run if you don't pick up a tip.\n    \nFor example, the following dummy protocol will use a P300 Single-Channel GEN2 pipette to enable Labware Position Check for an OT-2 tip rack, NEST reservoir, and NEST flat well plate.",
        "start_char_idx": 3852,
        "end_char_idx": 5690,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "640c98cf-9553-49d8-97f4-ad858fb8ed42": {
      "__data__": {
        "id_": "640c98cf-9553-49d8-97f4-ad858fb8ed42",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "a2ababf8fb85e894da4ed9f730320ddee908cf1c4f42ee14343a29330eba7569",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "956e03d7-630b-4cdf-a595-7396eb2435ab",
            "node_type": "1",
            "metadata": {},
            "hash": "7225a5ebd59055a0c727bfa674bee98a214dc50b301e82385e9bd0b815c87093",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Creating the dummy protocol requires you to:\n\n    1. Use the ``metadata`` or ``requirements`` dictionary to specify the API version. (See :ref:`v2-versioning` for details.) Use the same API version as you did in :py:meth:`opentrons.execute.get_protocol_api`.\n    2. Define a ``run()`` function.\n    3. Load all of your labware in their initial locations.\n    4. Load your smallest capacity pipette and specify its ``tipracks``.\n    5. Call ``pick_up_tip()``. Labware Position Check can't run if you don't pick up a tip.\n    \nFor example, the following dummy protocol will use a P300 Single-Channel GEN2 pipette to enable Labware Position Check for an OT-2 tip rack, NEST reservoir, and NEST flat well plate.\n\n.. code-block:: python\n\n    metadata = {\"apiLevel\": \"2.13\"} \n  \n     def run(protocol): \n         tiprack = protocol.load_labware(\"opentrons_96_tiprack_300ul\", 1) \n         reservoir = protocol.load_labware(\"nest_12_reservoir_15ml\", 2) \n         plate = protocol.load_labware(\"nest_96_wellplate_200ul_flat\", 3) \n         p300 = protocol.load_instrument(\"p300_single_gen2\", \"left\", tip_racks=[tiprack]) \n         p300.pick_up_tip() \n         p300.return_tip()\n\nAfter importing this protocol to the Opentrons App, run Labware Position Check to get the x, y, and z offsets for the tip rack and labware. When complete, you can click **Get Labware Offset Data** to view automatically generated code that uses :py:meth:`.set_offset` to apply the offsets to each piece of labware.",
        "start_char_idx": 4983,
        "end_char_idx": 6465,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "956e03d7-630b-4cdf-a595-7396eb2435ab": {
      "__data__": {
        "id_": "956e03d7-630b-4cdf-a595-7396eb2435ab",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "640c98cf-9553-49d8-97f4-ad858fb8ed42",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "b77cb7227e9d40489706e2e0dd50092b6ac1723dcaadba357102adf80b870a21",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b2f9388b-55eb-4863-9400-016539f4ecea",
            "node_type": "1",
            "metadata": {},
            "hash": "28bbc10b1a58e5250eb0715df4a1fc69b32e07a06348bc6a619682439b991448",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When complete, you can click **Get Labware Offset Data** to view automatically generated code that uses :py:meth:`.set_offset` to apply the offsets to each piece of labware.\n\n.. code-block:: python\n\t\n    labware_1 = protocol.load_labware(\"opentrons_96_tiprack_300ul\", location=\"1\")\n    labware_1.set_offset(x=0.00, y=0.00, z=0.00)\n\n    labware_2 = protocol.load_labware(\"nest_12_reservoir_15ml\", location=\"2\")\n    labware_2.set_offset(x=0.10, y=0.20, z=0.30)\n\n    labware_3 = protocol.load_labware(\"nest_96_wellplate_200ul_flat\", location=\"3\")\n    labware_3.set_offset(x=0.10, y=0.20, z=0.30)\n    \nThis automatically generated code uses generic names for the loaded labware. If you want to match the labware names already in your protocol, change the labware names to match your original code:\n\n.. code-block:: python\n\n    reservoir = protocol.load_labware(\"nest_12_reservoir_15ml\", \"2\")\n    reservoir.set_offset(x=0.10, y=0.20, z=0.30)\n    \n.. versionadded:: 2.12\n\nOnce you've executed this code in Jupyter Notebook, all subsequent positional calculations for this reservoir in slot D2 will be adjusted 0.1 mm to the right, 0.2 mm to the back, and 0.3 mm up.\n\nRemember, you should only add ``.set_offset()`` commands to protocols run outside of the Opentrons App. And you should follow the behavior of Labware Position Check, i.e., *do not* reuse offset measurements unless they apply to the *same labware* in the *same deck slot* on the *same robot*.\n\n.. warning::\n\n\tImproperly reusing offset data may cause your robot to move to an unexpected position or crash against other labware, which can lead to incorrect protocol execution or damage your equipment. The same applies when running protocols with ``.set_offset()`` commands in the Opentrons App.",
        "start_char_idx": 6292,
        "end_char_idx": 8045,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b2f9388b-55eb-4863-9400-016539f4ecea": {
      "__data__": {
        "id_": "b2f9388b-55eb-4863-9400-016539f4ecea",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "956e03d7-630b-4cdf-a595-7396eb2435ab",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "8acf2cb4476f3479f5db6746a454070a519bcb796fd979bed0b0729ff1873145",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "63dc5976-0aed-4779-9bd4-11eab2368fd8",
            "node_type": "1",
            "metadata": {},
            "hash": "a88c097bb93ee97f844f9a6154ba473ab5fcef692bf460317e6783e6799c9f56",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Remember, you should only add ``.set_offset()`` commands to protocols run outside of the Opentrons App. And you should follow the behavior of Labware Position Check, i.e., *do not* reuse offset measurements unless they apply to the *same labware* in the *same deck slot* on the *same robot*.\n\n.. warning::\n\n\tImproperly reusing offset data may cause your robot to move to an unexpected position or crash against other labware, which can lead to incorrect protocol execution or damage your equipment. The same applies when running protocols with ``.set_offset()`` commands in the Opentrons App. When in doubt: run Labware Position Check again and update your code!\n\nUsing Custom Labware\n--------------------\n\nIf you have custom labware definitions you want to use with Jupyter, make a new directory called ``labware`` in Jupyter and put the definitions there. These definitions will be available when you call :py:meth:`~opentrons.protocol_api.ProtocolContext.load_labware`.\n\nUsing Modules\n-------------\n\nIf your protocol uses :ref:`modules <new_modules>`, you need to take additional steps to make sure that Jupyter Notebook doesn't send commands that conflict with the robot server. Sending commands to modules while the robot server is running will likely cause errors, and the module commands may not execute as expected.\n\nTo disable the robot server, open a Jupyter terminal session by going to **New > Terminal** and run ``systemctl stop opentrons-robot-server``. Then you can run code from cells in your notebook as usual. When you are done using Jupyter Notebook, you should restart the robot server with ``systemctl start opentrons-robot-server``.\n\n.. note::\n\n    While the robot server is stopped, the robot will display as unavailable in the Opentrons App. If you need to control the robot or its attached modules through the app, you need to restart the robot server and wait for the robot to appear as available in the app.",
        "start_char_idx": 7453,
        "end_char_idx": 9387,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "63dc5976-0aed-4779-9bd4-11eab2368fd8": {
      "__data__": {
        "id_": "63dc5976-0aed-4779-9bd4-11eab2368fd8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
          "file_name": "new_advanced_running.rst",
          "file_size": 10099,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "fbf5438b-1bca-43d2-a88d-98f97a35f19f",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "0576f2b65d48bc364f850d22fd11e1ea9a9ae09e0b82acfc9596e4494941ea53",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b2f9388b-55eb-4863-9400-016539f4ecea",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "c4f79df12661f6a686a4bdfd9455a00491e6945f667103167270b27e7fd2039e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2",
            "node_type": "1",
            "metadata": {},
            "hash": "38be5943b6ea11d31d90ba6322e5b6fe1aaf4e8cc27beebba3c7e9c97f65827d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Sending commands to modules while the robot server is running will likely cause errors, and the module commands may not execute as expected.\n\nTo disable the robot server, open a Jupyter terminal session by going to **New > Terminal** and run ``systemctl stop opentrons-robot-server``. Then you can run code from cells in your notebook as usual. When you are done using Jupyter Notebook, you should restart the robot server with ``systemctl start opentrons-robot-server``.\n\n.. note::\n\n    While the robot server is stopped, the robot will display as unavailable in the Opentrons App. If you need to control the robot or its attached modules through the app, you need to restart the robot server and wait for the robot to appear as available in the app.\n\n\nCommand Line\n------------\n\nThe robot's command line is accessible either by going to **New > Terminal** in Jupyter or `via SSH <https://support.opentrons.com/s/article/Connecting-to-your-OT-2-with-SSH>`_.\n\nTo execute a protocol from the robot's command line, copy the protocol file to the robot with ``scp`` and then run the protocol with ``opentrons_execute``:\n\n.. prompt:: bash\n\n   opentrons_execute /data/my_protocol.py\n\n\nBy default, ``opentrons_execute`` will print out the same run log shown in the Opentrons App, as the protocol executes. It also prints out internal logs at the level ``warning`` or above. Both of these behaviors can be changed. Run ``opentrons_execute --help`` for more information.",
        "start_char_idx": 8636,
        "end_char_idx": 10097,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2": {
      "__data__": {
        "id_": "ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_atomic_commands.rst",
          "file_name": "new_atomic_commands.rst",
          "file_size": 1178,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4eee9a38-808d-4205-bfd6-6f102b06fe96",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_atomic_commands.rst",
              "file_name": "new_atomic_commands.rst",
              "file_size": 1178,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "800ee66a886077c75fd364ed51019bda43a8f1e6b44c2be97b3b32ba9ca4c0e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "63dc5976-0aed-4779-9bd4-11eab2368fd8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
              "file_name": "new_advanced_running.rst",
              "file_size": 10099,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "5b5bf1a340eaabf50300bb3b64e3eb8b45069430dc103ab8fbc11f98b4f2c043",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "038d0cad-dcfd-42eb-842d-10ceebf9d1c8",
            "node_type": "1",
            "metadata": {},
            "hash": "e431801b2a52e63ad78e0327fe8acca80e39fd0f96cc2abb2170ac9a5ab8304b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Basic commands that Opentrons robots can perform with pipette tips, for liquid handling, and other utility features.\n\n.. _v2-atomic-commands:\n\n***********************\nBuilding Block Commands\n***********************\n\n.. toctree::\n    basic_commands/pipette_tips\n    basic_commands/liquids\n    basic_commands/utilities\n\nBuilding block commands execute some of the most basic actions that your robot can complete. But basic doesn\u2019t mean these commands lack capabilities. They perform important tasks in your protocols. They're also foundational to the :ref:`complex commands <v2-complex-commands>` that help you combine multiple actions into fewer lines of code.\n\nPages in this section of the documentation cover:\n\n- :ref:`pipette-tips`: Get started with commands for picking up pipette tips, dropping tips, returning tips, and working with used tips. \n- :ref:`liquid-control`: Learn about aspirating and dispensing liquids, blow out and touch tip procedures, mixing, and creating air gaps.\n- :ref:`new-utility-commands`: Control various robot functions such as pausing or delaying a protocol, checking the robot\u2019s door, turning robot lights on/off, and more.",
        "start_char_idx": 0,
        "end_char_idx": 1173,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "038d0cad-dcfd-42eb-842d-10ceebf9d1c8": {
      "__data__": {
        "id_": "038d0cad-dcfd-42eb-842d-10ceebf9d1c8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_complex_commands.rst",
          "file_name": "new_complex_commands.rst",
          "file_size": 1622,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "2955f1f9-17f8-406d-9cfe-4eac441b3162",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_complex_commands.rst",
              "file_name": "new_complex_commands.rst",
              "file_size": 1622,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "e663a00f63afe7a8d262701403f0d47f7d7daee380984173d006acab702b2132",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_atomic_commands.rst",
              "file_name": "new_atomic_commands.rst",
              "file_size": 1178,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "aa2fc8bf072f656140e13bfb2696b48e29093f5f4b55b0767f31076cc38a559d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "001911ad-fe0d-41d8-8799-743f347e274d",
            "node_type": "1",
            "metadata": {},
            "hash": "83c9ceb9c38b2cb380b3ebf6391b971fa85d988f99b4c2787d825a22568ab679",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Complex liquid-handling commands for Opentrons robots can handle large groups of wells and repetitive actions.\n\n.. _v2-complex-commands:\n\n****************\nComplex Commands\n****************\n\n.. toctree::\n    complex_commands/sources_destinations\n    complex_commands/order_operations\n    complex_commands/parameters\n\nComplex liquid handling commands combine multiple :ref:`building block commands <v2-atomic-commands>` into a single method call. These commands make it easier to handle larger groups of wells and repeat actions without having to write your own control flow code. They integrate tip-handling behavior and can pick up, use, and drop multiple tips depending on how you want to handle your liquids. They can optionally perform other actions, like adding air gaps, knocking droplets off the tip, mixing, and blowing out excess liquid from the tip.\n\nThere are three complex liquid handling commands, each optimized for a different liquid handling scenario: \n\n    - :py:meth:`.InstrumentContext.transfer`\n    - :py:meth:`.InstrumentContext.distribute`\n    - :py:meth:`.InstrumentContext.consolidate`\n\nPages in this section of the documentation cover:\n\n    - :ref:`complex-source-dest`: Which wells complex commands aspirate from and dispense to.\n    - :ref:`complex-command-order`: The order of basic commands that are part of a complex commmand.\n    - :ref:`complex_params`: Additional keyword arguments that affect complex command behavior.\n    \nCode samples throughout these pages assume that you've loaded the pipettes and labware from the :ref:`basic protocol template <protocol-template>`.",
        "start_char_idx": 0,
        "end_char_idx": 1621,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "001911ad-fe0d-41d8-8799-743f347e274d": {
      "__data__": {
        "id_": "001911ad-fe0d-41d8-8799-743f347e274d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "038d0cad-dcfd-42eb-842d-10ceebf9d1c8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_complex_commands.rst",
              "file_name": "new_complex_commands.rst",
              "file_size": 1622,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "73393e89720214477942e4f191ae9e56bf6d31e07b0f2ec149b0d16b3ea4e711",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "49ca0de0-7091-405d-b0d4-82aaf63f96fb",
            "node_type": "1",
            "metadata": {},
            "hash": "6288063efc7b46ab9e80e0eeab39c4f03fe76b3bb238bbb1ac0d49c60a9737eb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: Useful code snippets for working with Opentrons robots.\n\n.. _new-examples:\n\n*****************\nProtocol Examples\n*****************\n\nThis page provides simple, ready-made protocols for Flex and OT-2. Feel free to copy and modify these examples to create unique protocols that help automate your laboratory workflows. Also, experimenting with these protocols is another way to build upon the skills you've learned from working through the :ref:`tutorial <tutorial>`. Try adding different hardware, labware, and commands to a sample protocol and test its validity after importing it into the Opentrons App.\n\nUsing These Protocols\n=====================\n\nThese sample protocols are designed for anyone using an Opentrons Flex or OT-2 liquid handling robot. For our users with little to no Python experience, we\u2019ve taken some liberties with the syntax and structure of the code to make it easier to understand. For example, we\u2019ve formatted the samples with line breaks to show method arguments clearly and to avoid horizontal scrolling. Additionally, the methods use `named arguments <https://en.wikipedia.org/wiki/Named_parameter>`_ instead of positional arguments. For example::\n\n    # This code uses named arguments\n    tiprack_1 = protocol.load_labware(\n        load_name='opentrons_flex_96_tiprack_200ul',\n        location='D2')\n\n    # This code uses positional arguments\n    tiprack_1 = protocol.load_labware('opentrons_flex_96_tiprack_200ul','D2')   \n\nBoth examples instantiate the variable ``tiprack_1`` with a Flex tip rack, but the former is more explicit. It shows the parameter name and its value together (e.g. ``location='D2'``), which may be helpful when you're unsure about what's going on in a protocol code sample.\n\nPython developers with more experience should feel free to ignore the code styling used here and work with these examples as you like.\n\nInstruments and Labware\n=======================\n\nThe sample protocols all use the following pipettes:\n\n* Flex 1-Channel Pipette (5\u20131000 uL). The API load name for this pipette is ``flex_1channel_1000``.\n* P300 Single-Channel GEN2 pipette for the OT-2.",
        "start_char_idx": 0,
        "end_char_idx": 2131,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "49ca0de0-7091-405d-b0d4-82aaf63f96fb": {
      "__data__": {
        "id_": "49ca0de0-7091-405d-b0d4-82aaf63f96fb",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "001911ad-fe0d-41d8-8799-743f347e274d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ff03525271d26d9494fc255e8c6ab481c668c005611e308ff2ed622cf6260ef9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a571e22f-f6b7-4f59-b77a-75ff196f623f",
            "node_type": "1",
            "metadata": {},
            "hash": "491e6598543ce89fdd14ae3a65f61bd1a401ec5b58584426c210d53c1a2eb577",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It shows the parameter name and its value together (e.g. ``location='D2'``), which may be helpful when you're unsure about what's going on in a protocol code sample.\n\nPython developers with more experience should feel free to ignore the code styling used here and work with these examples as you like.\n\nInstruments and Labware\n=======================\n\nThe sample protocols all use the following pipettes:\n\n* Flex 1-Channel Pipette (5\u20131000 uL). The API load name for this pipette is ``flex_1channel_1000``.\n* P300 Single-Channel GEN2 pipette for the OT-2. The API load name for this pipette is ``p300_single_gen2``. \n\nThey also use the labware listed below: \n\n.. list-table::\n    :header-rows: 1\n\n    * - Labware type\n      - Labware name\n      - API load name\n    * - Reservoir\n      - USA Scientific 12-Well Reservoir 22 mL\n      - ``usascientific_12_reservoir_22ml``\n    * - Well plate\n      - Corning 96-Well Plate 360 uL Flat\n      - ``corning_96_wellplate_360ul_flat``\n    * - Flex tip rack\n      - Opentrons Flex 96 Tip Rack 200 uL\n      - ``opentrons_flex_96_tiprack_200ul``\n    * - OT-2 tip rack\n      - Opentrons 96 Tip Rack 300 uL\n      - ``opentrons_96_tiprack_300ul``\n\n.. _protocol-template:\n      \nProtocol Template\n=================\n\nThis code only loads the instruments and labware listed above, and performs no other actions. Many code snippets from elsewhere in the documentation will run without modification when added at the bottom of this template. You can also use it to start writing and testing your own code.\n\n tabs::\n\n    . tab:: Flex \n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                # load tip rack in deck slot D3\n                tiprack = protocol.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a571e22f-f6b7-4f59-b77a-75ff196f623f": {
      "__data__": {
        "id_": "a571e22f-f6b7-4f59-b77a-75ff196f623f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "49ca0de0-7091-405d-b0d4-82aaf63f96fb",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "4cfd482b2ea83f8da6c62ae77dfa22ec599ac7fa3508c5c93ae9288f528bdd2f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3679d4e1-6415-4993-80a2-9bb483920080",
            "node_type": "1",
            "metadata": {},
            "hash": "bea7aee0f342fc4e407616af675e393d68585575c01bb7f593ba2dbcfe95ced5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Many code snippets from elsewhere in the documentation will run without modification when added at the bottom of this template. You can also use it to start writing and testing your own code.\n\n tabs::\n\n    . tab:: Flex \n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"|apiLevel|\"}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                # load tip rack in deck slot D3\n                tiprack = protocol.load_labware(\n                    load_name=\"opentrons_flex_96_tiprack_1000ul\", location=\"D3\"\n                )\n                # attach pipette to left mount\n                pipette = protocol.load_instrument(\n                    instrument_name=\"flex_1channel_1000\",\n                    mount=\"left\",\n                    tip_racks=[tiprack]\n                )\n                # load well plate in deck slot D2\n                plate = protocol.load_labware(\n                    load_name=\"corning_96_wellplate_360ul_flat\", location=\"D2\"\n                )\n                # load reservoir in deck slot D1\n                reservoir = protocol.load_labware(\n                    load_name=\"usascientific_12_reservoir_22ml\", location=\"D1\"\n                )\n                # Put protocol commands here\n    \n    . tab:: OT-2 \n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                # load tip rack in deck slot 3\n                tiprack = protocol.load_labware(\n                    load_name=\"opentrons_96_tiprack_300ul\", location=3\n                )\n                # attach pipette to left mount\n                pipette = protocol.load_instrument(\n                    instrument_name=\"p300_single_gen2\",\n                    mount=\"left\",\n                    tip_racks=[tiprack]\n                )  \n                # load well plate in deck slot 2\n                plate = protocol.load_labware(\n                    load_name=\"corning_96_wellplate_360ul_flat\", location=2\n                )\n                # load reservoir in deck slot 1\n                reservoir = protocol.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3679d4e1-6415-4993-80a2-9bb483920080": {
      "__data__": {
        "id_": "3679d4e1-6415-4993-80a2-9bb483920080",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a571e22f-f6b7-4f59-b77a-75ff196f623f",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "72f0f870fd29e986879ed9ea7feedb48f43b9b1bd34eeb71fdf5f251d3136376",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bf1b101e-c592-487a-a555-ab3968da1332",
            "node_type": "1",
            "metadata": {},
            "hash": "e0db231e545d3a4657ae9ffcd038d196899e006220e02a608c47271683cf0044",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "tab:: OT-2 \n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                # load tip rack in deck slot 3\n                tiprack = protocol.load_labware(\n                    load_name=\"opentrons_96_tiprack_300ul\", location=3\n                )\n                # attach pipette to left mount\n                pipette = protocol.load_instrument(\n                    instrument_name=\"p300_single_gen2\",\n                    mount=\"left\",\n                    tip_racks=[tiprack]\n                )  \n                # load well plate in deck slot 2\n                plate = protocol.load_labware(\n                    load_name=\"corning_96_wellplate_360ul_flat\", location=2\n                )\n                # load reservoir in deck slot 1\n                reservoir = protocol.load_labware(\n                    load_name=\"usascientific_12_reservoir_22ml\", location=1\n                )\n                # Put protocol commands here\n\nTransferring Liquids\n====================\n\nThese protocols demonstrate how to move 100 uL of liquid from one well to another.\n\nBasic Method\n------------\n\nThis protocol uses some :ref:`building block commands <v2-atomic-commands>` to tell the robot, explicitly, where to go to aspirate and dispense liquid. These commands include the :py:meth:`~.InstrumentContext.pick_up_tip`, :py:meth:`~.InstrumentContext.aspirate`, and :py:meth:`~.InstrumentContext.dispense` methods.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bf1b101e-c592-487a-a555-ab3968da1332": {
      "__data__": {
        "id_": "bf1b101e-c592-487a-a555-ab3968da1332",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3679d4e1-6415-4993-80a2-9bb483920080",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0e8b5dc4936325ccf92a829345153f1af472e7122e7a983d4f6a04f83d2e7c31",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903",
            "node_type": "1",
            "metadata": {},
            "hash": "7c40b5109c3f8767bf4bcb30710a4da992bb5554e2f5bb4f64a93e3040b67f4f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "load_labware(\n                    load_name=\"corning_96_wellplate_360ul_flat\", location=2\n                )\n                # load reservoir in deck slot 1\n                reservoir = protocol.load_labware(\n                    load_name=\"usascientific_12_reservoir_22ml\", location=1\n                )\n                # Put protocol commands here\n\nTransferring Liquids\n====================\n\nThese protocols demonstrate how to move 100 uL of liquid from one well to another.\n\nBasic Method\n------------\n\nThis protocol uses some :ref:`building block commands <v2-atomic-commands>` to tell the robot, explicitly, where to go to aspirate and dispense liquid. These commands include the :py:meth:`~.InstrumentContext.pick_up_tip`, :py:meth:`~.InstrumentContext.aspirate`, and :py:meth:`~.InstrumentContext.dispense` methods.\n\n.. tabs::\n\n    .. tab:: Flex\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='left',\n                tip_racks=[tiprack_1])\n\n                pipette_1.pick_up_tip()\n                pipette_1.aspirate(100, plate['A1'])\n                pipette_1.dispense(100, plate['B1'])\n                pipette_1.drop_tip()\n\n    .. tab:: OT-2\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                        load_name='opentrons_96_tiprack_300ul',\n                        location=2)\n                p300 = protocol.load_instrument(\n                        instrument_name='p300_single',\n                        mount='left',\n                        tip_racks=[tiprack_1])\n\n                p300.pick_up_tip()\n                p300.aspirate(100, plate['A1'])\n                p300.dispense(100, plate['B1'])\n                p300.drop_tip()\n\nAdvanced Method\n---------------\n\nThis protocol accomplishes the same thing as the previous example, but does it a little more efficiently.",
        "start_char_idx": 5023,
        "end_char_idx": 7804,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903": {
      "__data__": {
        "id_": "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bf1b101e-c592-487a-a555-ab3968da1332",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3fd1c3539665c0539209188efcbcb67036c5502ad8b2be2d9158e1ec2ce46902",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1f4bfba2-3e5e-4925-89a8-73161cbc762b",
            "node_type": "1",
            "metadata": {},
            "hash": "ab4b420600a4477ff1de34d516c9eaf75c9514abcaf61666358943b0ba230c70",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Notice how it uses the :py:meth:`.InstrumentContext.transfer` method to move liquid between well plates. The source and destination well  arguments (e.g., ``plate['A1'], plate['B1']``) are part of ``transfer()`` method parameters. You don't need separate calls to ``aspirate`` or ``dispense`` here. \n\n.. tabs::\n\n    .. tab:: Flex\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel': '|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='left',\n                    tip_racks=[tiprack_1])\n                # transfer 100 uL from well A1 to well B1\n                pipette_1.transfer(100, plate['A1'], plate['B1'])\n    \n    .. tab:: OT-2\n\n        .. code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                        load_name='opentrons_96_tiprack_300ul',\n                        location=2)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single',\n                    mount='left',\n                    tip_racks=[tiprack_1])\n                # transfer 100 uL from well A1 to well B1\n                p300.transfer(100, plate['A1'], plate['B1'])\n\n\nLoops\n=====\n\nIn Python, a loop is an instruction that keeps repeating an action until a specific condition is met.",
        "start_char_idx": 7805,
        "end_char_idx": 9937,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1f4bfba2-3e5e-4925-89a8-73161cbc762b": {
      "__data__": {
        "id_": "1f4bfba2-3e5e-4925-89a8-73161cbc762b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "727f6fe68c05c3cef80b9fbc9c1d6fd6091b6c83eeefb375ddc3d69664b948be",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ebd8a76d-2377-4ab3-8353-68199c4f82cc",
            "node_type": "1",
            "metadata": {},
            "hash": "b0f72acca095214786b2c16c7638b7d6310c8baa284d3bfca13f9e3e8469c1b7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Loops\n=====\n\nIn Python, a loop is an instruction that keeps repeating an action until a specific condition is met. \n\nWhen used in a protocol, loops automate repetitive steps such as aspirating and dispensing liquids from a reservoir to a a range of wells, or all the wells, in a well plate. For example, this code sample loops through the numbers 0 to 7, and uses the loop's current value to transfer liquid from all the wells in a reservoir to all the wells in a 96-well plate. \n\n tabs::\n\n    . tab:: Flex\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='D3')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='left',\n                    tip_racks=[tiprack_1])\n                \n                # distribute 20 uL from reservoir:A1 -> plate:row:1\n                # distribute 20 uL from reservoir:A2 -> plate:row:2\n                # etc.\n                # range() starts at 0 and stops before 8, creating a range of 0-7\n                for i in range(8):\n                    pipette_1.distribute(200, reservoir.wells()[i], plate.rows()[i])\n\n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ebd8a76d-2377-4ab3-8353-68199c4f82cc": {
      "__data__": {
        "id_": "ebd8a76d-2377-4ab3-8353-68199c4f82cc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1f4bfba2-3e5e-4925-89a8-73161cbc762b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b0fc079d7f8a46f3579d8cc4afd8b198d30ca2dd676ed5c15d5762ff2c34555b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ea58997e-836d-45c6-a5c5-9aea900c68d1",
            "node_type": "1",
            "metadata": {},
            "hash": "a943812863ff34050d99d9ede2d6781c7e31bba4060845dd22e2b3b52887fadd",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "mount='left',\n                    tip_racks=[tiprack_1])\n                \n                # distribute 20 uL from reservoir:A1 -> plate:row:1\n                # distribute 20 uL from reservoir:A2 -> plate:row:2\n                # etc.\n                # range() starts at 0 and stops before 8, creating a range of 0-7\n                for i in range(8):\n                    pipette_1.distribute(200, reservoir.wells()[i], plate.rows()[i])\n\n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=4)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single',\n                    mount='left',\n                    tip_racks=[tiprack_1])\n                \n                # distribute 20 uL from reservoir:A1 -> plate:row:1\n                # distribute 20 uL from reservoir:A2 -> plate:row:2\n                # etc.\n                # range() starts at 0 and stops before 8, creating a range of 0-7\n                for i in range(8):\n                    p300.distribute(200, reservoir.wells()[i], plate.rows()[i])\n\nNotice here how Python's :py:class:`range` class (e.g. ``range(8)``) determines how many times the code loops. Also, in Python, a range of numbers is *exclusive* of the end value and counting starts at 0, not 1.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ea58997e-836d-45c6-a5c5-9aea900c68d1": {
      "__data__": {
        "id_": "ea58997e-836d-45c6-a5c5-9aea900c68d1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ebd8a76d-2377-4ab3-8353-68199c4f82cc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f1d7a0266cb346ffed6714e14a91189689837013e7448542a93b1544ee799f01",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e89492ef-ec34-4846-bccb-77d98bebdea6",
            "node_type": "1",
            "metadata": {},
            "hash": "c530df69c55cc3ef0dd3585081a8064a434fce4eb097612b60bf4d0a0e15c8c9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "location=4)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single',\n                    mount='left',\n                    tip_racks=[tiprack_1])\n                \n                # distribute 20 uL from reservoir:A1 -> plate:row:1\n                # distribute 20 uL from reservoir:A2 -> plate:row:2\n                # etc.\n                # range() starts at 0 and stops before 8, creating a range of 0-7\n                for i in range(8):\n                    p300.distribute(200, reservoir.wells()[i], plate.rows()[i])\n\nNotice here how Python's :py:class:`range` class (e.g. ``range(8)``) determines how many times the code loops. Also, in Python, a range of numbers is *exclusive* of the end value and counting starts at 0, not 1. For the Corning 96-well plate used here, this means well A1=0, B1=1, C1=2, and so on to the last well in the row, which is H1=7.\n\nMultiple Air Gaps\n=================\n\nOpentrons electronic pipettes can do some things that a human cannot do with a pipette, like accurately alternate between liquid and air aspirations that create gaps within the same tip. The protocol shown below shows you how to aspirate from the first five wells in the reservoir and create an air gap between each sample.\n\n tabs::\n\n    . tab:: Flex\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='D3')\n                pipette_1 = protocol.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e89492ef-ec34-4846-bccb-77d98bebdea6": {
      "__data__": {
        "id_": "e89492ef-ec34-4846-bccb-77d98bebdea6",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ea58997e-836d-45c6-a5c5-9aea900c68d1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "26eab53fc5cd546e6f3ad13dadab614bf52786ddb0899c55729cf53081132a80",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a1d75aef-b074-4f53-83f9-9b37bb7cebe0",
            "node_type": "1",
            "metadata": {},
            "hash": "f0c061a13d12ad5e7c6dd89d481ae71944b3f20dd90f8cf27f438ce82d4e99b3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The protocol shown below shows you how to aspirate from the first five wells in the reservoir and create an air gap between each sample.\n\n tabs::\n\n    . tab:: Flex\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='D3')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000', \n                    mount='left',\n                    tip_racks=[tiprack_1])\n\n                pipette_1.pick_up_tip()\n\n                # aspirate from the first 5 wells\n                for well in reservoir.wells()[:4]:\n                    pipette_1.aspirate(volume=35, location=well)\n                    pipette_1.air_gap(10)\n        \n                pipette_1.dispense(225, plate['A1'])\n\n                pipette_1.return_tip()\n\n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=3)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single', \n                    mount='right',",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a1d75aef-b074-4f53-83f9-9b37bb7cebe0": {
      "__data__": {
        "id_": "a1d75aef-b074-4f53-83f9-9b37bb7cebe0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e89492ef-ec34-4846-bccb-77d98bebdea6",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "dd8adcd568c866f437cff124e72ab120e98d25b17c17a205f571627f064871ad",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3eee5d97-4fcf-4f68-b8ae-4a361882f81d",
            "node_type": "1",
            "metadata": {},
            "hash": "8ac0293691f6f39b721068adbd2c4f7261a9e772823706160e80fa2f360d0d16",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "dispense(225, plate['A1'])\n\n                pipette_1.return_tip()\n\n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=3)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single', \n                    mount='right',\n                    tip_racks=[tiprack_1])\n\n                p300.pick_up_tip()\n\n                # aspirate from the first 5 wells\n                for well in reservoir.wells()[:4]:\n                    p300.aspirate(volume=35, location=well)\n                    p300.air_gap(10)\n        \n                p300.dispense(225, plate['A1'])\n\n                p300.return_tip()\n\nNotice here how Python's :py:class:`slice` functionality (in the code sample as ``[:4]``) lets us select the first five wells of the well plate only. Also, in Python, a range of numbers is *exclusive* of the end value and counting starts at 0, not 1. For the Corning 96-well plate used here, this means well A1=0, B1=1, C1=2, and so on to the last well used, which is E1=4. See also, the :ref:`tutorial-commands` section of the Tutorial.\n\nDilution\n========\n\nThis protocol dispenses diluent to all wells of a Corning 96-well plate. Next, it dilutes 8 samples from the reservoir across all 8 columns of the plate.\n\n tabs::\n\n    . tab:: Flex\n\n        .",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3eee5d97-4fcf-4f68-b8ae-4a361882f81d": {
      "__data__": {
        "id_": "3eee5d97-4fcf-4f68-b8ae-4a361882f81d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a1d75aef-b074-4f53-83f9-9b37bb7cebe0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3fe524d9e71ca84b5ec64ea6994782fc1cdba3ed2da4e86b6126fec46ce447c7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "01d0cf15-5368-4755-adef-b598719b3d15",
            "node_type": "1",
            "metadata": {},
            "hash": "3a7e48e6492a9f7e9206451fb223cb5c79b29ed75bcac8497943b3f7da602265",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "plate['A1'])\n\n                p300.return_tip()\n\nNotice here how Python's :py:class:`slice` functionality (in the code sample as ``[:4]``) lets us select the first five wells of the well plate only. Also, in Python, a range of numbers is *exclusive* of the end value and counting starts at 0, not 1. For the Corning 96-well plate used here, this means well A1=0, B1=1, C1=2, and so on to the last well used, which is E1=4. See also, the :ref:`tutorial-commands` section of the Tutorial.\n\nDilution\n========\n\nThis protocol dispenses diluent to all wells of a Corning 96-well plate. Next, it dilutes 8 samples from the reservoir across all 8 columns of the plate.\n\n tabs::\n\n    . tab:: Flex\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel': '|apiLevel|'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D3')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='C1')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='left',\n                    tip_racks=[tiprack_1, tiprack_2])\n                # Dispense diluent\n                pipette_1.distribute(50, reservoir['A12'], plate.",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "01d0cf15-5368-4755-adef-b598719b3d15": {
      "__data__": {
        "id_": "01d0cf15-5368-4755-adef-b598719b3d15",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3eee5d97-4fcf-4f68-b8ae-4a361882f81d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e03cf334e1fde26d159a31fbf8b2440573090abed4e7d616c5690f6a5e7b86d4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f64f3cfd-812d-4232-9d9b-a3fad6f17d19",
            "node_type": "1",
            "metadata": {},
            "hash": "eba6ce50054346189861b1bfbb3751d9e13be1ae3728eb85fa003ccea0f126c7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D3')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='C1')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='left',\n                    tip_racks=[tiprack_1, tiprack_2])\n                # Dispense diluent\n                pipette_1.distribute(50, reservoir['A12'], plate.wells())\n\n                # loop through each row\n                for i in range(8):\n                    # save the source well and destination column to variables\n                    source = reservoir.wells()[i]\n                    row = plate.rows()[i]\n\n                # transfer 30 uL of source to first well in column\n                pipette_1.transfer(30, source, row[0], mix_after=(3, 25))\n\n                # dilute the sample down the column\n                pipette_1.transfer(\n                    30, row[:11], row[1:],\n                    mix_after=(3, 25))\n    \n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=3)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f64f3cfd-812d-4232-9d9b-a3fad6f17d19": {
      "__data__": {
        "id_": "f64f3cfd-812d-4232-9d9b-a3fad6f17d19",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "01d0cf15-5368-4755-adef-b598719b3d15",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c4cef535d15d9d55e933d26c6f079b3fbd58f714ef8de00b553b29d7b697ef61",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0d294764-3db7-4738-8456-a70e444b0210",
            "node_type": "1",
            "metadata": {},
            "hash": "75a68cbb5992e427627fb2d426bb295f53da5f4374978f9d155a4d6f01be22fa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "transfer(\n                    30, row[:11], row[1:],\n                    mix_after=(3, 25))\n    \n    . tab:: OT-2\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            metadata = {'apiLevel': '2.14'}\n\n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=3)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=4)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single',\n                    mount='right',\n                    tip_racks=[tiprack_1, tiprack_2])\n                # Dispense diluent\n                p300.distribute(50, reservoir['A12'], plate.wells())\n\n                # loop through each row\n                for i in range(8):\n                    # save the source well and destination column to variables\n                    source = reservoir.wells()[i]\n                    source = reservoir.wells()[i]\n                    row = plate.rows()[i]\n\n                # transfer 30 uL of source to first well in column\n                p300.transfer(30, source, row[0], mix_after=(3, 25))\n\n                # dilute the sample down the column\n                p300.transfer(\n                    30, row[:11], row[1:],\n                    mix_after=(3, 25))\n\nNotice here how the code sample loops through the rows and uses slicing to distribute the diluent. For information about these features, see the Loops and Air Gaps examples above. See also, the :ref:`tutorial-commands` section of the Tutorial.\n\nPlate Mapping\n=============\n\nThis protocol dispenses different volumes of liquids to a well plate and automatically refills the pipette when empty.\n\n tabs::\n\n    .",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0d294764-3db7-4738-8456-a70e444b0210": {
      "__data__": {
        "id_": "0d294764-3db7-4738-8456-a70e444b0210",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f64f3cfd-812d-4232-9d9b-a3fad6f17d19",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f641395428abe5ddc2ede6c0451e04a06d02e464054cde7f9a6e50ef7bd2f20b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5a2f200d-58d4-46f9-8e02-ab06be757e72",
            "node_type": "1",
            "metadata": {},
            "hash": "35532153d624a2749e80681a9c3215fe25e631b3facb89d11e6c9b401a843278",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "wells()[i]\n                    source = reservoir.wells()[i]\n                    row = plate.rows()[i]\n\n                # transfer 30 uL of source to first well in column\n                p300.transfer(30, source, row[0], mix_after=(3, 25))\n\n                # dilute the sample down the column\n                p300.transfer(\n                    30, row[:11], row[1:],\n                    mix_after=(3, 25))\n\nNotice here how the code sample loops through the rows and uses slicing to distribute the diluent. For information about these features, see the Loops and Air Gaps examples above. See also, the :ref:`tutorial-commands` section of the Tutorial.\n\nPlate Mapping\n=============\n\nThis protocol dispenses different volumes of liquids to a well plate and automatically refills the pipette when empty.\n\n tabs::\n\n    . tab:: Flex\n\n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n\n            requirements = {'robotType': 'Flex', 'apiLevel': '2.15'}\n                \n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location='D1')\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D2')\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D3')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='C1')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='right',\n                tip_racks=[tiprack_1, tiprack_2])\n\n                # Volume amounts are for demonstration purposes only\n                water_volumes = [\n                    1,  2,  3,  4,  5,  6,  7,  8,\n                    9,  10, 11, 12, 13,",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5a2f200d-58d4-46f9-8e02-ab06be757e72": {
      "__data__": {
        "id_": "5a2f200d-58d4-46f9-8e02-ab06be757e72",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0d294764-3db7-4738-8456-a70e444b0210",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "94f415838f12d7bbf24a07b6d71af60f02dff6bd0254fab55d52a87dea42185d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27",
            "node_type": "1",
            "metadata": {},
            "hash": "5139d8968727e3ba39a66d4f6b79e047169ee57dbc48555e4fae2194f4e91ec3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "location='D2')\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_flex_96_tiprack_200ul',\n                    location='D3')\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location='C1')\n                pipette_1 = protocol.load_instrument(\n                    instrument_name='flex_1channel_1000',\n                    mount='right',\n                tip_racks=[tiprack_1, tiprack_2])\n\n                # Volume amounts are for demonstration purposes only\n                water_volumes = [\n                    1,  2,  3,  4,  5,  6,  7,  8,\n                    9,  10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23, 24,\n                    25, 26, 27, 28, 29, 30, 31, 32,\n                    33, 34, 35, 36, 37, 38, 39, 40,\n                    41, 42, 43, 44, 45, 46, 47, 48,\n                    49, 50, 51, 52, 53, 54, 55, 56,\n                    57, 58, 59, 60, 61, 62, 63, 64,\n                    65, 66, 67, 68, 69, 70, 71, 72,\n                    73, 74, 75, 76, 77, 78, 79, 80,\n                    81, 82, 83, 84, 85, 86, 87, 88,\n                    89, 90, 91, 92, 93, 94, 95, 96\n                    ]\n\n                pipette_1.distribute(water_volumes, reservoir['A12'], plate.wells())\n\n    .",
        "start_char_idx": 20993,
        "end_char_idx": 22347,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27": {
      "__data__": {
        "id_": "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5a2f200d-58d4-46f9-8e02-ab06be757e72",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "211c6a4f99f6c22ba661634af60a2b1c8b54433814817dd1e46ea70f4b81d7a0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6811ba89-1843-4937-94f8-6dcfb72d2d0e",
            "node_type": "1",
            "metadata": {},
            "hash": "319699617505e8a638ccb02677f96e4322a1722543292414cfdb8ffaafd9cf1b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "44, 45, 46, 47, 48,\n                    49, 50, 51, 52, 53, 54, 55, 56,\n                    57, 58, 59, 60, 61, 62, 63, 64,\n                    65, 66, 67, 68, 69, 70, 71, 72,\n                    73, 74, 75, 76, 77, 78, 79, 80,\n                    81, 82, 83, 84, 85, 86, 87, 88,\n                    89, 90, 91, 92, 93, 94, 95, 96\n                    ]\n\n                pipette_1.distribute(water_volumes, reservoir['A12'], plate.wells())\n\n    . tab:: OT-2\n        \n        . code-block:: python\n            :substitutions:\n\n            from opentrons import protocol_api\n            metadata = {'apiLevel': '2.14'}\n                \n            def run(protocol: protocol_api.ProtocolContext):\n                plate = protocol.load_labware(\n                    load_name='corning_96_wellplate_360ul_flat',\n                    location=1)\n                tiprack_1 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=3)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=4)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single', \n                    mount='right',\n                    tip_racks=[tiprack_1, tiprack_2])\n\n                # Volume amounts are for demonstration purposes only\n                water_volumes = [\n                    1,  2,  3,  4,  5,  6,  7,  8,\n                    9,  10, 11, 12, 13, 14,",
        "start_char_idx": null,
        "end_char_idx": null,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6811ba89-1843-4937-94f8-6dcfb72d2d0e": {
      "__data__": {
        "id_": "6811ba89-1843-4937-94f8-6dcfb72d2d0e",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
          "file_name": "new_examples.rst",
          "file_size": 24201,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "c4a5fc4c-515a-4d04-913d-fc1585cf035e",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "915ce1443b25a76f78c2600129054e48a6b00ce3460cd0a862c21108ab8b73cb",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e149aaea1fb448127d53d76772cfd254092813970e1be8a6b38531f5fd3e4970",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f96265c5-d43a-4e42-9bd9-350aafc277ab",
            "node_type": "1",
            "metadata": {},
            "hash": "2d554c161c4ac9d6d3247027806f12619b0c6403a8cb669f61ce6488377cec23",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=2)\n                tiprack_2 = protocol.load_labware(\n                    load_name='opentrons_96_tiprack_300ul',\n                    location=3)\n                reservoir = protocol.load_labware(\n                    load_name='usascientific_12_reservoir_22ml',\n                    location=4)\n                p300 = protocol.load_instrument(\n                    instrument_name='p300_single', \n                    mount='right',\n                    tip_racks=[tiprack_1, tiprack_2])\n\n                # Volume amounts are for demonstration purposes only\n                water_volumes = [\n                    1,  2,  3,  4,  5,  6,  7,  8,\n                    9,  10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23, 24,\n                    25, 26, 27, 28, 29, 30, 31, 32,\n                    33, 34, 35, 36, 37, 38, 39, 40,\n                    41, 42, 43, 44, 45, 46, 47, 48,\n                    49, 50, 51, 52, 53, 54, 55, 56,\n                    57, 58, 59, 60, 61, 62, 63, 64,\n                    65, 66, 67, 68, 69, 70, 71, 72,\n                    73, 74, 75, 76, 77, 78, 79, 80,\n                    81, 82, 83, 84, 85, 86, 87, 88,\n                    89, 90, 91, 92, 93, 94, 95, 96\n                    ]\n\n                p300.distribute(water_volumes, reservoir['A12'], plate.wells())",
        "start_char_idx": 22779,
        "end_char_idx": 24194,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f96265c5-d43a-4e42-9bd9-350aafc277ab": {
      "__data__": {
        "id_": "f96265c5-d43a-4e42-9bd9-350aafc277ab",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6811ba89-1843-4937-94f8-6dcfb72d2d0e",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
              "file_name": "new_examples.rst",
              "file_size": 24201,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "575543550c4357e352bdc607a1fcca4fe050f3a3c9d9d418ef60a9daee20e9a7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a1677329-df20-406a-a4a6-05c587756fcf",
            "node_type": "1",
            "metadata": {},
            "hash": "127eb54051c6cc721667cb63084ca102776388c2e088ca902022d7d80c9ab450",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to load and work with Opentrons-verified and custom labware in a Python protocol.\n\n.. _new-labware:\n\n#######\nLabware\n#######\n\nLabware are the durable or consumable items that you work with, reuse, or discard while running a protocol on a Flex or OT-2. Items such as pipette tips, well plates, tubes, and reservoirs are all examples of labware. This section provides a brief overview of default labware, custom labware, and how to use basic labware API methods when creating a protocol for your robot.\n\n.. note::\n\n    Code snippets use coordinate deck slot locations (e.g. ``'D1'``, ``'D2'``), like those found on Flex. If you have an OT-2 and are using API version 2.14 or earlier, replace the coordinate with its numeric OT-2 equivalent. For example, slot D1 on Flex corresponds to slot 1 on an OT-2. See :ref:`deck-slots` for more information.\n\n*************\nLabware Types\n*************\n\nDefault Labware\n===============\n\nDefault labware is everything listed in the `Opentrons Labware Library <https://labware.opentrons.com/>`_. When used in a protocol, your Flex or OT-2 knows how to work with default labware. However, you must first inform the API about the labware you will place on the robot\u2019s deck. Search the library when you\u2019re looking for the API load names of the labware you want to use. You can copy the load names from the library and pass them to the :py:meth:`~.ProtocolContext.load_labware` method in your protocol.\n\n.. _v2-custom-labware:\n\nCustom Labware\n==============\n\nCustom labware is labware that is not listed the Labware Library. If your protocol needs something that's not in the library, you can create it with the `Opentrons Labware Creator <https://labware.opentrons.com/create/>`_. However, before using the Labware Creator, you should take a moment to review the support article `Creating Custom Labware Definitions <https://support.opentrons.com/s/article/Creating-Custom-Labware-Definitions>`_.",
        "start_char_idx": 0,
        "end_char_idx": 1948,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a1677329-df20-406a-a4a6-05c587756fcf": {
      "__data__": {
        "id_": "a1677329-df20-406a-a4a6-05c587756fcf",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f96265c5-d43a-4e42-9bd9-350aafc277ab",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c5a0fa16dc8ac07f7b400985a946f226df1874c51fa1be9dd0bd7d8f7f48c8ad",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "32ec23f8-e456-4acc-9c38-fa5019e6ec28",
            "node_type": "1",
            "metadata": {},
            "hash": "3dca804a5c092b2fa8f94ff3219afd29f2e05f6aeb5b580a8dc65d703ac6b590",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "However, you must first inform the API about the labware you will place on the robot\u2019s deck. Search the library when you\u2019re looking for the API load names of the labware you want to use. You can copy the load names from the library and pass them to the :py:meth:`~.ProtocolContext.load_labware` method in your protocol.\n\n.. _v2-custom-labware:\n\nCustom Labware\n==============\n\nCustom labware is labware that is not listed the Labware Library. If your protocol needs something that's not in the library, you can create it with the `Opentrons Labware Creator <https://labware.opentrons.com/create/>`_. However, before using the Labware Creator, you should take a moment to review the support article `Creating Custom Labware Definitions <https://support.opentrons.com/s/article/Creating-Custom-Labware-Definitions>`_.\n\nAfter you've created your labware, save it as a ``.json`` file and add it to the Opentrons App. See `Using Labware in Your Protocols <https://support.opentrons.com/s/article/Using-labware-in-your-protocols>`_ for instructions. \n\nIf other people need to use your custom labware definition, they must also add it to their Opentrons App.\n\n***************\nLoading Labware\n***************\n\nThroughout this section, we'll use the labware listed in the following table.",
        "start_char_idx": 1134,
        "end_char_idx": 2412,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "32ec23f8-e456-4acc-9c38-fa5019e6ec28": {
      "__data__": {
        "id_": "32ec23f8-e456-4acc-9c38-fa5019e6ec28",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a1677329-df20-406a-a4a6-05c587756fcf",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "04d841f7b73b722fff9d87b1252a46b022f94a78921f7d7cd67e726a7b90928a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ee6324cb-cfa3-4721-974a-db01834600a4",
            "node_type": "1",
            "metadata": {},
            "hash": "287bc7411f88e773fe5faee601dde1ccaa0409f458adc896b788252613d35f74",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If your protocol needs something that's not in the library, you can create it with the `Opentrons Labware Creator <https://labware.opentrons.com/create/>`_. However, before using the Labware Creator, you should take a moment to review the support article `Creating Custom Labware Definitions <https://support.opentrons.com/s/article/Creating-Custom-Labware-Definitions>`_.\n\nAfter you've created your labware, save it as a ``.json`` file and add it to the Opentrons App. See `Using Labware in Your Protocols <https://support.opentrons.com/s/article/Using-labware-in-your-protocols>`_ for instructions. \n\nIf other people need to use your custom labware definition, they must also add it to their Opentrons App.\n\n***************\nLoading Labware\n***************\n\nThroughout this section, we'll use the labware listed in the following table.\n\n.. list-table::\n    :widths: 20 40 45\n    :header-rows: 1\n\n    * - Labware type\n      - Labware name\n      - API load name\n    * - Well plate\n      - `Corning 96 Well Plate 360 uL Flat <https://labware.opentrons.com/corning_96_wellplate_360ul_flat/>`_\n      - ``corning_96_wellplate_360ul_flat``\n    * - Flex tip rack\n      - `Opentrons Flex 96 Tips 200 uL <https://shop.opentrons.com/opentrons-flex-tips-200-l/>`_\n      - ``opentrons_flex_96_tiprack_200ul``\n    * - OT-2 tip rack\n      - `Opentrons 96 Tip Rack 300 uL <https://labware.opentrons.com/opentrons_96_tiprack_300ul>`_\n      - ``opentrons_96_tiprack_300ul``\n\nSimilar to the code sample in :ref:`overview-section-v2`, here's how you use the :py:meth:`.ProtocolContext.load_labware` method to load labware on either Flex or OT-2.",
        "start_char_idx": 1576,
        "end_char_idx": 3202,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ee6324cb-cfa3-4721-974a-db01834600a4": {
      "__data__": {
        "id_": "ee6324cb-cfa3-4721-974a-db01834600a4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "32ec23f8-e456-4acc-9c38-fa5019e6ec28",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0e03fdd77324ea921af4eb2119f8d43f631db3a01998fffc48d5becf01a65a6c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5c74fb88-e897-420e-882b-3945dea9c505",
            "node_type": "1",
            "metadata": {},
            "hash": "cc0650c1082e402ddcf4afa1d07fba558c1a4547ddf0390dc5881b64e49f0553",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. code-block:: python\n\n    #Flex\n    tiprack = protocol.load_labware('opentrons_flex_96_tiprack_200ul', 'D1')\n    plate = protocol.load_labware('corning_96_wellplate_360ul_flat', 'D2')\n\n.. code-block:: python\n\n    #OT-2\n    tiprack = protocol.load_labware('opentrons_96_tiprack_300ul', '1')\n    plate = protocol.load_labware('corning_96_wellplate_360ul_flat', '2')\n    \n..\n\nWhen the ``load_labware`` method loads labware into your protocol, it returns a :py:class:`~opentrons.protocol_api.labware.Labware` object.\n\n.. _labware-label:\n\n.. Tip::\n    \n    The ``load_labware`` method includes an optional ``label`` argument. You can use it to identify labware with a descriptive name. If used, the label value is displayed in the Opentrons App. For example::\n        \n        tiprack = protocol.load_labware(\n            load_name='corning_96_wellplate_360ul_flat',\n            location='D1',\n            label='any-name-you-want')\n\n.. _labware-on-adapters:\n\nLoading Labware on Adapters\n===========================\n\nThe previous section demonstrates loading labware directly into a deck slot. But you can also load labware on top of an adapter that either fits on a module or goes directly on the deck. The ability to combine labware with adapters adds functionality and flexibility to your robot and protocols.\n\nYou can either load the adapter first and the labware second, or load both the adapter and labware all at once.\n\nLoading Separately\n------------------\n\nThe ``load_adapter()`` method is available on ``ProtocolContext`` and module contexts. It behaves similarly to ``load_labware()``, requiring the load name and location for the desired adapter.",
        "start_char_idx": 3205,
        "end_char_idx": 4860,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5c74fb88-e897-420e-882b-3945dea9c505": {
      "__data__": {
        "id_": "5c74fb88-e897-420e-882b-3945dea9c505",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ee6324cb-cfa3-4721-974a-db01834600a4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9ece4a2993be7c361a41783f02f4dcfb8aec007914bdcc203f054ac247692db3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "85a82ba3-b051-4df7-ba6e-7a0bcbc27353",
            "node_type": "1",
            "metadata": {},
            "hash": "5477de911899c971a0507ca2c57dad6c65104cb4810b5e5768af70ab4121b8ba",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example::\n        \n        tiprack = protocol.load_labware(\n            load_name='corning_96_wellplate_360ul_flat',\n            location='D1',\n            label='any-name-you-want')\n\n.. _labware-on-adapters:\n\nLoading Labware on Adapters\n===========================\n\nThe previous section demonstrates loading labware directly into a deck slot. But you can also load labware on top of an adapter that either fits on a module or goes directly on the deck. The ability to combine labware with adapters adds functionality and flexibility to your robot and protocols.\n\nYou can either load the adapter first and the labware second, or load both the adapter and labware all at once.\n\nLoading Separately\n------------------\n\nThe ``load_adapter()`` method is available on ``ProtocolContext`` and module contexts. It behaves similarly to ``load_labware()``, requiring the load name and location for the desired adapter. Load a module, adapter, and labware with separate calls to specify each layer of the physical stack of components individually::\n\n    hs_mod = protocol.load_module('heaterShakerModuleV1', 'D1')\n    hs_adapter = hs_mod.load_adapter('opentrons_96_flat_bottom_adapter')\n    hs_plate = hs_mod.load_labware('nest_96_wellplate_200ul_flat')\n    \n.. versionadded:: 2.15\n    The ``load_adapter()`` method.\n\nLoading Together\n----------------\n\nUse the ``adapter`` argument of ``load_labware()`` to load an adapter at the same time as labware. For example, to load the same 96-well plate and adapter from the previous section at once::\n    \n    hs_plate = hs_mod.load_labware(\n        name='nest_96_wellplate_200ul_flat',\n        adapter='opentrons_96_flat_bottom_adapter'\n    )\n\n.. versionadded:: 2.15\n    The ``adapter`` parameter.",
        "start_char_idx": 3948,
        "end_char_idx": 5682,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "85a82ba3-b051-4df7-ba6e-7a0bcbc27353": {
      "__data__": {
        "id_": "85a82ba3-b051-4df7-ba6e-7a0bcbc27353",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5c74fb88-e897-420e-882b-3945dea9c505",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e00764a6f37e887b3158e3db952b7522d17e3c2819595876fb83f603b5310cd9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d8dd091c-aa13-44d1-938f-a12292d48d95",
            "node_type": "1",
            "metadata": {},
            "hash": "41235639871dcecd660880d8f955fbe1f631847f8efbeec37fd3265acb691380",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Loading Together\n----------------\n\nUse the ``adapter`` argument of ``load_labware()`` to load an adapter at the same time as labware. For example, to load the same 96-well plate and adapter from the previous section at once::\n    \n    hs_plate = hs_mod.load_labware(\n        name='nest_96_wellplate_200ul_flat',\n        adapter='opentrons_96_flat_bottom_adapter'\n    )\n\n.. versionadded:: 2.15\n    The ``adapter`` parameter.\n\nThe API also has some \"combination\" labware definitions, which treat the adapter and labware as a unit::\n\n    hs_combo = hs_mod.load_labware(\n        'opentrons_96_flat_bottom_adapter_nest_wellplate_200ul_flat'\n    )\n\nLoading labware this way prevents you from :ref:`moving the labware <moving-labware>` onto or off of the adapter, so it's less flexible than loading the two separately. Avoid using combination definitions unless your protocol specifies an ``apiLevel`` of 2.14 or lower.\n\n.. _new-well-access:\n\n**************************\nAccessing Wells in Labware\n**************************\n\nWell Ordering\n=============\n\nYou need to select which wells to transfer liquids to and from over the course of a protocol.\n\nRows of wells on a labware have labels that are capital letters starting with A. For instance, an 96-well plate has 8 rows, labeled ``'A'`` through ``'H'``.\n\nColumns of wells on a labware have labels that are numbers starting with 1. For instance, a 96-well plate has columns ``'1'`` through ``'12'``.\n\nAll well-accessing functions start with the well at the top left corner of the labware. The ending well is in the bottom right. The order of travel from top left to bottom right depends on which function you use.\n\n.. image:: ../img/well_iteration/Well_Iteration.png\n\nThe code in this section assumes that ``plate`` is a 24-well plate.",
        "start_char_idx": 5259,
        "end_char_idx": 7038,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d8dd091c-aa13-44d1-938f-a12292d48d95": {
      "__data__": {
        "id_": "d8dd091c-aa13-44d1-938f-a12292d48d95",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "85a82ba3-b051-4df7-ba6e-7a0bcbc27353",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d3efa2b8b9b7cce90286b2e5d170ce26ddae377f497d75e7833feb948eb34455",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "98320e0a-868d-4352-a07e-071e5897432d",
            "node_type": "1",
            "metadata": {},
            "hash": "b9f264879b7fade0c8966c9002f9877f83eeb1758a591cdd19c1b9835c730ab9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Rows of wells on a labware have labels that are capital letters starting with A. For instance, an 96-well plate has 8 rows, labeled ``'A'`` through ``'H'``.\n\nColumns of wells on a labware have labels that are numbers starting with 1. For instance, a 96-well plate has columns ``'1'`` through ``'12'``.\n\nAll well-accessing functions start with the well at the top left corner of the labware. The ending well is in the bottom right. The order of travel from top left to bottom right depends on which function you use.\n\n.. image:: ../img/well_iteration/Well_Iteration.png\n\nThe code in this section assumes that ``plate`` is a 24-well plate. For example:\n\n.. code-block:: python\n\n    plate = protocol.load_labware('corning_24_wellplate_3.4ml_flat', location='D1')\n\n.. _well-accessor-methods:\n\nAccessor Methods\n================\n\nThe API provides many different ways to access wells inside labware. Different methods are useful in different contexts. The table below lists out the methods available to access wells and their differences.\n\n.. list-table::\n   :widths: 20 30 50\n   :header-rows: 1\n\n   * - Method\n     - Returns\n     - Example\n   * - :py:meth:`.Labware.wells`\n     - List of all wells.\n     - ``[labware:A1, labware:B1, labware:C1...]``\n   * - :py:meth:`.Labware.rows`\n     - List of lists grouped by row.\n     - ``[[labware:A1, labware:A2...], [labware:B1, labware:B2...]]``\n   * - :py:meth:`.Labware.columns`\n     - List of lists grouped by column.\n     - ``[[labware:A1, labware:B1...], [labware:A2, labware:B2...]]``\n   * - :py:meth:`.Labware.wells_by_name`\n     - Dictionary with well names as keys.",
        "start_char_idx": 6401,
        "end_char_idx": 8012,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "98320e0a-868d-4352-a07e-071e5897432d": {
      "__data__": {
        "id_": "98320e0a-868d-4352-a07e-071e5897432d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d8dd091c-aa13-44d1-938f-a12292d48d95",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "19cd63ffbebf9d15f6f7bd89e81f500722a5be10f7fb80557d66c8ef6f202d87",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "46c5a59c-4489-44df-a1fd-dc958dd937c9",
            "node_type": "1",
            "metadata": {},
            "hash": "d9a346d2c290f1020b5ebf60b7d6cc832358e4081de2602f0c139ac4b71d8b6f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- ``[labware:A1, labware:B1, labware:C1...]``\n   * - :py:meth:`.Labware.rows`\n     - List of lists grouped by row.\n     - ``[[labware:A1, labware:A2...], [labware:B1, labware:B2...]]``\n   * - :py:meth:`.Labware.columns`\n     - List of lists grouped by column.\n     - ``[[labware:A1, labware:B1...], [labware:A2, labware:B2...]]``\n   * - :py:meth:`.Labware.wells_by_name`\n     - Dictionary with well names as keys.\n     - ``{'A1': labware:A1, 'B1': labware:B1}``\n   * - :py:meth:`.Labware.rows_by_name`\n     - Dictionary with row names as keys.\n     - ``{'A': [labware:A1, labware:A2...], 'B': [labware:B1, labware:B2...]}``\n   * - :py:meth:`.Labware.columns_by_name`\n     - Dictionary with column names as keys.\n     - ``{'1': [labware:A1, labware:B1...], '2': [labware:A2, labware:B2...]}``\n\nAccessing Individual Wells\n==========================\n\nDictionary Access\n-----------------\n\nThe simplest way to refer to a single well is by its name, like A1 or D6. :py:meth:`.Labware.wells_by_name` accomplishes this. This is such a common task that the API also has an equivalent shortcut: dictionary indexing.\n\n.. code-block:: python\n\n    a1 = plate.wells_by_name()['A1']\n    d6 = plate['D6']  # dictionary indexing\n    \nIf a well does not exist in the labware, such as ``plate['H12']`` on a 24-well plate, the API will raise a ``KeyError``. In contrast, it would be a valid reference on a standard 96-well plate.\n\n..\n\nList Access From ``wells``\n--------------------------\n\nIn addition to referencing wells by name, you can also reference them with zero-indexing. The first well in a labware is at position 0.",
        "start_char_idx": 7599,
        "end_char_idx": 9204,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "46c5a59c-4489-44df-a1fd-dc958dd937c9": {
      "__data__": {
        "id_": "46c5a59c-4489-44df-a1fd-dc958dd937c9",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "98320e0a-868d-4352-a07e-071e5897432d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "89905406af15eaf8bc4dd48c8c826a1758a00d927a9db493d4ed7638609ba888",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8c101002-338f-44e2-aa49-eea62c29b026",
            "node_type": "1",
            "metadata": {},
            "hash": "1f6ddf6e34bd0931dcfce32834458b0a85df348cde774f319ed2f6f26ce439f8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":py:meth:`.Labware.wells_by_name` accomplishes this. This is such a common task that the API also has an equivalent shortcut: dictionary indexing.\n\n.. code-block:: python\n\n    a1 = plate.wells_by_name()['A1']\n    d6 = plate['D6']  # dictionary indexing\n    \nIf a well does not exist in the labware, such as ``plate['H12']`` on a 24-well plate, the API will raise a ``KeyError``. In contrast, it would be a valid reference on a standard 96-well plate.\n\n..\n\nList Access From ``wells``\n--------------------------\n\nIn addition to referencing wells by name, you can also reference them with zero-indexing. The first well in a labware is at position 0.\n\n.. code-block:: python\n\n    plate.wells()[0]   # well A1\n    plate.wells()[23]  # well D6\n\n.. tip::\n\n    You may find coordinate well names like ``\"B3\"`` easier to reason with, especially when working with irregular labware, e.g.\n    ``opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical`` (see the `Opentrons 10 Tube Rack <https://labware.opentrons.com/opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical>`_ in the Labware Library). Whichever well access method you use, your protocol will be most maintainable if you use only one access method consistently.\n\n..\n\nAccessing Groups of Wells\n=========================\n\nWhen handling liquid, you can provide a group of wells as the source or destination. Alternatively, you can take a group of wells and loop (or iterate) through them, with each liquid-handling command inside the loop accessing the loop index.\n\nUse :py:meth:`.Labware.rows_by_name` to access a specific row of wells or  :py:meth:`.Labware.columns_by_name` to access a specific column of wells on a labware.",
        "start_char_idx": 8558,
        "end_char_idx": 10226,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8c101002-338f-44e2-aa49-eea62c29b026": {
      "__data__": {
        "id_": "8c101002-338f-44e2-aa49-eea62c29b026",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "46c5a59c-4489-44df-a1fd-dc958dd937c9",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "cff3c55cfd32d55c8c39505f2fc9c69484f729dc87e7edbc3f86cc17dc3c4b95",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "20952efe-090a-45aa-b177-e53ec486e3f1",
            "node_type": "1",
            "metadata": {},
            "hash": "c892187b278e1bcbdba9834f2d8ae015dbede08f919786137b078ed679cb76fb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Whichever well access method you use, your protocol will be most maintainable if you use only one access method consistently.\n\n..\n\nAccessing Groups of Wells\n=========================\n\nWhen handling liquid, you can provide a group of wells as the source or destination. Alternatively, you can take a group of wells and loop (or iterate) through them, with each liquid-handling command inside the loop accessing the loop index.\n\nUse :py:meth:`.Labware.rows_by_name` to access a specific row of wells or  :py:meth:`.Labware.columns_by_name` to access a specific column of wells on a labware. These methods both return a dictionary with the row or column name as the keys:\n\n.. code-block:: python\n\n    row_dict = plate.rows_by_name()['A']\n    row_list = plate.rows()[0]  # equivalent to the line above\n    column_dict = plate.columns_by_name()['1']\n    column_list = plate.columns()[0]  # equivalent to the line above\n\n    print('Column \"1\" has', len(column_dict), 'wells')  # Column \"1\" has 4 wells\n    print('Row \"A\" has', len(row_dict), 'wells')  # Row \"A\" has 6 wells\n\nSince these methods return either lists or dictionaries, you can iterate through them as you would regular Python data structures.\n\nFor example, to transfer 50 uL of liquid from the first well of a reservoir to each of the wells of row ``'A'`` on a plate::\n\n    for well in plate.rows()[0]:\n        pipette.transfer(reservoir['A1'], well, 50)\n\nEquivalently, using ``rows_by_name``::\n\n    for well in plate.rows_by_name()['A'].values():\n        pipette.transfer(reservoir['A1'], well, 50)\n\n..\n\n*************************\nLabeling Liquids in Wells\n*************************\n\nOptionally, you can specify the liquids that should be in various wells at the beginning of your protocol. Doing so helps you identify well contents by name and volume, and adds corresponding labels to a single well, or group of wells, in well plates and reservoirs. You can view the initial liquid setup:\n\n- For Flex protocols, on the touchscreen.",
        "start_char_idx": 9638,
        "end_char_idx": 11627,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "20952efe-090a-45aa-b177-e53ec486e3f1": {
      "__data__": {
        "id_": "20952efe-090a-45aa-b177-e53ec486e3f1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8c101002-338f-44e2-aa49-eea62c29b026",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "38b98774bb03e2095eeb667d4061aada95c6b7c44a2c4232a735a768c02837e0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f7adff25-5877-4d67-a53a-1a54527b2cc6",
            "node_type": "1",
            "metadata": {},
            "hash": "e09a8f1ee4334db9c812c006df382fe9ea81bc816d6c6240180c5c4653feab5b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, to transfer 50 uL of liquid from the first well of a reservoir to each of the wells of row ``'A'`` on a plate::\n\n    for well in plate.rows()[0]:\n        pipette.transfer(reservoir['A1'], well, 50)\n\nEquivalently, using ``rows_by_name``::\n\n    for well in plate.rows_by_name()['A'].values():\n        pipette.transfer(reservoir['A1'], well, 50)\n\n..\n\n*************************\nLabeling Liquids in Wells\n*************************\n\nOptionally, you can specify the liquids that should be in various wells at the beginning of your protocol. Doing so helps you identify well contents by name and volume, and adds corresponding labels to a single well, or group of wells, in well plates and reservoirs. You can view the initial liquid setup:\n\n- For Flex protocols, on the touchscreen.\n- For Flex or OT-2 protocols, in the Opentrons App (v6.3.0 or higher).\n\nTo use these optional methods, first create a liquid object with :py:meth:`.ProtocolContext.define_liquid` and then label individual wells by calling :py:meth:`.Well.load_liquid`.\n\nLet's examine how these two methods work. The following examples demonstrate how to define colored water samples for a well plate and reservoir.\n\nDefining Liquids\n================\n\nThis example uses ``define_liquid`` to create two liquid objects and instantiates them with the variables ``greenWater`` and ``blueWater``, respectively. The arguments for ``define_liquid`` are all required, and let you name the liquid, describe it, and assign it a color:\n\n.. code-block:: python\n\n        greenWater = protocol.define_liquid(\n            name=\"Green water\",\n            description=\"Green colored water for demo\",\n            display_color=\"#00FF00\",\n        )\n        blueWater = protocol.define_liquid(\n            name=\"Blue water\",\n            description=\"Blue colored water for demo\",\n            display_color=\"#0000FF\",\n        )\n\n.. versionadded:: 2.14\n        \nThe ``display_color`` parameter accepts a hex color code, which adds a color to that liquid's label when you import your protocol into the Opentrons App. The ``define_liquid`` method accepts standard 3-, 4-, 6-, and 8-character hex color codes.",
        "start_char_idx": 10839,
        "end_char_idx": 12994,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f7adff25-5877-4d67-a53a-1a54527b2cc6": {
      "__data__": {
        "id_": "f7adff25-5877-4d67-a53a-1a54527b2cc6",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "20952efe-090a-45aa-b177-e53ec486e3f1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f3d3caa3c3fc79ec09ffa9e3be6208f5c722dfe6cb139858a63488f94a79fb80",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "55164bf4-f736-40f9-9876-a5f6c32c463a",
            "node_type": "1",
            "metadata": {},
            "hash": "981e056d7c7b2fd192b4593ade0c9a7c700fcab4934ca9b28739c8c237010a6f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The arguments for ``define_liquid`` are all required, and let you name the liquid, describe it, and assign it a color:\n\n.. code-block:: python\n\n        greenWater = protocol.define_liquid(\n            name=\"Green water\",\n            description=\"Green colored water for demo\",\n            display_color=\"#00FF00\",\n        )\n        blueWater = protocol.define_liquid(\n            name=\"Blue water\",\n            description=\"Blue colored water for demo\",\n            display_color=\"#0000FF\",\n        )\n\n.. versionadded:: 2.14\n        \nThe ``display_color`` parameter accepts a hex color code, which adds a color to that liquid's label when you import your protocol into the Opentrons App. The ``define_liquid`` method accepts standard 3-, 4-, 6-, and 8-character hex color codes.\n\nLabeling Wells and Reservoirs\n=============================\n\nThis example uses ``load_liquid`` to label the initial well location, contents, and volume (in uL) for the liquid objects created by ``define_liquid``. Notice how values of the ``liquid`` argument use the variable names ``greenWater`` and ``blueWater`` (defined above) to associate each well with a particular liquid:\n\n.. code-block:: python\n\n        well_plate[\"A1\"].load_liquid(liquid=greenWater, volume=50)\n        well_plate[\"A2\"].load_liquid(liquid=greenWater, volume=50)\n        well_plate[\"B1\"].load_liquid(liquid=blueWater, volume=50)\n        well_plate[\"B2\"].load_liquid(liquid=blueWater, volume=50)\n        reservoir[\"A1\"].load_liquid(liquid=greenWater, volume=200)\n        reservoir[\"A2\"].load_liquid(liquid=blueWater, volume=200)\n        \n.. versionadded:: 2.14\n\nThis information is available after you import your protocol to the app or send it to Flex. A summary of liquids appears on the protocol detail page, and well-by-well detail is available on the run setup page (under Initial Liquid Setup in the app, or under Liquids on Flex).\n\n.. note::\n    ``load_liquid`` does not validate volume for your labware nor does it prevent you from adding multiple liquids to each well.",
        "start_char_idx": 12216,
        "end_char_idx": 14247,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "55164bf4-f736-40f9-9876-a5f6c32c463a": {
      "__data__": {
        "id_": "55164bf4-f736-40f9-9876-a5f6c32c463a",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f7adff25-5877-4d67-a53a-1a54527b2cc6",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "00ea49654d78689de6510f212c1de757a5de6a18b1b82fd1d5a7d05258c5a2fe",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "59d8dd96-da6f-49c9-8c16-c219c359561d",
            "node_type": "1",
            "metadata": {},
            "hash": "76157e05e48683f8e66be106e917072a2fa570784e07d325339889c92ade3a9c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A summary of liquids appears on the protocol detail page, and well-by-well detail is available on the run setup page (under Initial Liquid Setup in the app, or under Liquids on Flex).\n\n.. note::\n    ``load_liquid`` does not validate volume for your labware nor does it prevent you from adding multiple liquids to each well. For example, you could label a 40 uL well with ``greenWater``, ``volume=50``, and then also add blue water to the well. The API won't stop you. It's your responsibility to ensure the labels you use accurately reflect the amounts and types of liquid you plan to place into wells and reservoirs.\n\nLabeling vs Handling Liquids\n============================\n\nThe ``load_liquid`` arguments include a volume amount (``volume=n`` in uL). This amount is just a label. It isn't a command or function that manipulates liquids. It only tells you how much liquid should be in a well at the start of the protocol. You need to use a method like :py:meth:`.transfer` to physically move liquids from a source to a destination.",
        "start_char_idx": 13924,
        "end_char_idx": 14957,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "59d8dd96-da6f-49c9-8c16-c219c359561d": {
      "__data__": {
        "id_": "59d8dd96-da6f-49c9-8c16-c219c359561d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "55164bf4-f736-40f9-9876-a5f6c32c463a",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b82d21cd37cde05129223768d4f37685a2bd6d9f6690cd62c029c722cf69ec5c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "eec8cb18-5fef-47f2-8774-3e3d70b92ec5",
            "node_type": "1",
            "metadata": {},
            "hash": "2caf6492569012aa6dcc6cbe443689b0750052271350dad62ad7a52b892f6783",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. note::\n    ``load_liquid`` does not validate volume for your labware nor does it prevent you from adding multiple liquids to each well. For example, you could label a 40 uL well with ``greenWater``, ``volume=50``, and then also add blue water to the well. The API won't stop you. It's your responsibility to ensure the labels you use accurately reflect the amounts and types of liquid you plan to place into wells and reservoirs.\n\nLabeling vs Handling Liquids\n============================\n\nThe ``load_liquid`` arguments include a volume amount (``volume=n`` in uL). This amount is just a label. It isn't a command or function that manipulates liquids. It only tells you how much liquid should be in a well at the start of the protocol. You need to use a method like :py:meth:`.transfer` to physically move liquids from a source to a destination.\n\n\n.. _v2-location-within-wells:\n.. _new-labware-well-properties:\n\n***************\nWell Dimensions\n***************\n\nThe functions in the :ref:`new-well-access` section above return a single :py:class:`.Well` object or a larger object representing many wells. :py:class:`.Well` objects have attributes that provide information about their physical shape, such as the depth or diameter, as specified in their corresponding labware definition. These properties can be used for different applications, such as calculating the volume of a well or a :ref:`position relative to the well <position-relative-labware>`.\n\nDepth\n=====\n\nUse :py:attr:`.Well.depth` to get the distance in mm between the very top of the well and the very bottom. For example, a conical well's depth is measured from the top center to the bottom center of the well.\n\n.. code-block:: python\n    :substitutions:\n\n    plate = protocol.load_labware('corning_96_wellplate_360ul_flat', 'D1')\n    depth = plate['A1'].depth  # 10.67\n\nDiameter\n========\n\nUse :py:attr:`.Well.diameter` to get the diameter of a given well in mm. Since diameter is a circular measurement, this attribute is only present on labware with circular wells. If the well is not circular, the value will be ``None``. Use length and width (see below) for non-circular wells.\n\n.. code-block:: python\n    :substitutions:\n\n    plate = protocol.load_labware('corning_96_wellplate_360ul_flat', 'D1')\n    diameter = plate['A1'].diameter\t # 6.86\n\nLength\n======\n\nUse :py:attr:`.Well.length` to get the length of a given well in mm. Length is defined as the distance along the robot's x-axis (left to right). This attribute is only present on rectangular wells. If the well is not rectangular, the value will be ``None``. Use diameter (see above) for circular wells.\n\n.. code-block:: python\n    :substitutions:\n\n    plate = protocol.load_labware('nest_12_reservoir_15ml', 'D1')\n    length = plate['A1'].length\t # 8.2",
        "start_char_idx": 14109,
        "end_char_idx": 16893,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "eec8cb18-5fef-47f2-8774-3e3d70b92ec5": {
      "__data__": {
        "id_": "eec8cb18-5fef-47f2-8774-3e3d70b92ec5",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
          "file_name": "new_labware.rst",
          "file_size": 17379,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4ec99f77-fecf-482d-8345-9b715b893357",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "af0ab7963fb52c2623cf6b366b6efc07d18f8114846b53adb1b8c0f016b47d60",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "59d8dd96-da6f-49c9-8c16-c219c359561d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b1d165fc35295c3de2e08c4bcb3b397087fda4dbd0b06a0a66b77dce2a9dcd6f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "12269a25-c023-442d-bd65-064bfae06e67",
            "node_type": "1",
            "metadata": {},
            "hash": "54ca14648edc2c43170140d7d4f21cf876f6daf1463b6c20005ea0c76bd90dbb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Width\n=====\n\nUse :py:attr:`.Well.width` to get the width of a given well in mm. Width is defined as the distance along the y-axis (front to back). This attribute is only present on rectangular wells. If the well is not rectangular, the value will be ``None``. Use diameter (see above) for circular wells.\n\n\n.. code-block:: python\n    :substitutions:\n\n    plate = protocol.load_labware('nest_12_reservoir_15ml', 'D1')\n    width = plate['A1'].width  # 71.2\n\n\n.. versionadded:: 2.9",
        "start_char_idx": 16896,
        "end_char_idx": 17374,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "12269a25-c023-442d-bd65-064bfae06e67": {
      "__data__": {
        "id_": "12269a25-c023-442d-bd65-064bfae06e67",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_modules.rst",
          "file_name": "new_modules.rst",
          "file_size": 1791,
          "creation_date": "2024-03-23",
          "last_modified_date": "2024-01-15"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "675410b2-596e-493b-8b0a-0c3990436dd3",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_modules.rst",
              "file_name": "new_modules.rst",
              "file_size": 1791,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "810347984ca6c94a4d4aed50aec8cadbe8a2247661320519f953e0e5c570cc61",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "eec8cb18-5fef-47f2-8774-3e3d70b92ec5",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
              "file_name": "new_labware.rst",
              "file_size": 17379,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "aba1c0eaec3a91f258d77c41339f726c1cbc1b35f1bc4a9a55a86e9098935d8f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "476220ea-1795-47f7-997b-8eb19792ef78",
            "node_type": "1",
            "metadata": {},
            "hash": "c9c6d80d751443da686f672244fcf346e865ba4e9f0ad69b4d5545bf421c9ac6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to work with powered and unpowered Opentrons hardware modules in a Python protocol.\n\n.. _new_modules:\n\n****************\nHardware Modules\n****************\n\n.. toctree::\n    modules/setup\n    modules/heater_shaker\n    modules/magnetic_block\n    modules/magnetic_module\n    modules/temperature_module\n    modules/thermocycler\n    modules/multiple_same_type\n\nHardware modules are powered and unpowered deck-mounted peripherals. The Flex and OT-2 are aware of deck-mounted powered modules when they're attached via a USB connection and used in an uploaded protocol. The robots do not know about unpowered modules until you use one in a protocol and upload it to the Opentrons App.\n\nPowered modules include the Heater-Shaker Module, Magnetic Module, Temperature Module, and Thermocycler Module. The 96-well Magnetic Block is an unpowered module.\n\nPages in this section of the documentation cover:\n\n    - :ref:`Setting up modules and their labware <module-setup>`. \n    - Working with the module contexts for each type of module.\n    \n        - :ref:`Heater-Shaker Module <heater-shaker-module>`\n        - :ref:`Magnetic Block <magnetic-block>`\n        - :ref:`Magnetic Module <magnetic-module>`\n        - :ref:`Temperature Module <temperature-module>`\n        - :ref:`Thermocycler Module <thermocycler-module>`\n    - Working with :ref:`multiple modules of the same type <moam>` in a single protocol. \n\n.. note::\n\n    Throughout these pages, most code examples use coordinate deck slot locations (e.g. ``'D1'``, ``'D2'``), like those found on Flex. If you have an OT-2 and are using API version 2.14 or earlier, replace the coordinate with its numeric OT-2 equivalent. For example, slot D1 on Flex corresponds to slot 1 on an OT-2. See :ref:`deck-slots` for more information.",
        "start_char_idx": 0,
        "end_char_idx": 1789,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "476220ea-1795-47f7-997b-8eb19792ef78": {
      "__data__": {
        "id_": "476220ea-1795-47f7-997b-8eb19792ef78",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "12269a25-c023-442d-bd65-064bfae06e67",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_modules.rst",
              "file_name": "new_modules.rst",
              "file_size": 1791,
              "creation_date": "2024-03-23",
              "last_modified_date": "2024-01-15"
            },
            "hash": "3ccbab2557ec321e1c33d53eb33a3a60dea6f08f945f0a660ce9177f43f47ef7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bbe211a7-04dd-4fea-a58d-54870d8ff0c6",
            "node_type": "1",
            "metadata": {},
            "hash": "38c763150ef2a0c4f1b2ca4005fb04315e5d94c608cb7086d34edc121a79595b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to load and work with Opentrons pipettes in a Python protocol.\n\n.. _new-pipette:\n\n########\nPipettes\n########\n\nWhen writing a protocol, you must inform the Protocol API about the pipettes you will be using on your robot. The :py:meth:`.ProtocolContext.load_instrument` function provides this information and returns an :py:class:`.InstrumentContext` object.\n\nFor information about liquid handling, see :ref:`v2-atomic-commands` and :ref:`v2-complex-commands`.\n\n.. _new-create-pipette:\n\nLoading Pipettes\n================\n\nAs noted above, you call the :py:meth:`~.ProtocolContext.load_instrument` method to load a pipette. This method also requires the :ref:`pipette's API load name <new-pipette-models>`, its left or right mount position, and (optionally) a list of associated tip racks. Even if you don't use the pipette anywhere else in your protocol, the Opentrons App and the robot won't let you start the protocol run until all pipettes loaded by ``load_instrument()`` are attached properly.\n\nLoading Flex 1- and 8-Channel Pipettes\n--------------------------------------\n\nThis code sample loads a Flex 1-Channel Pipette in the left mount and a Flex 8-Channel Pipette in the right mount. Both pipettes are 1000 uL. Each pipette uses its own 1000 uL tip rack.",
        "start_char_idx": 0,
        "end_char_idx": 1281,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bbe211a7-04dd-4fea-a58d-54870d8ff0c6": {
      "__data__": {
        "id_": "bbe211a7-04dd-4fea-a58d-54870d8ff0c6",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "476220ea-1795-47f7-997b-8eb19792ef78",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "fda36aef4355e8f84096bf3d030d78bcc9fc2b383aba7de7e16ddea3eedf74ba",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "21b34534-9d4e-4e1e-9763-792a8f50b398",
            "node_type": "1",
            "metadata": {},
            "hash": "03e9a7a18dd15a70f6299f1b6b1f8434ae6cd70cec6e578578ddecbcd691def3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This method also requires the :ref:`pipette's API load name <new-pipette-models>`, its left or right mount position, and (optionally) a list of associated tip racks. Even if you don't use the pipette anywhere else in your protocol, the Opentrons App and the robot won't let you start the protocol run until all pipettes loaded by ``load_instrument()`` are attached properly.\n\nLoading Flex 1- and 8-Channel Pipettes\n--------------------------------------\n\nThis code sample loads a Flex 1-Channel Pipette in the left mount and a Flex 8-Channel Pipette in the right mount. Both pipettes are 1000 uL. Each pipette uses its own 1000 uL tip rack.\n\n.. code-block:: Python\n    :substitutions:\n\n    from opentrons import protocol_api\n    \n    requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_1000ul', location='D1')\n        tiprack2 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_1000ul', location='C1')       \n        left = protocol.load_instrument(\n            instrument_name='flex_1channel_1000',\n            mount='left',\n            tip_racks=[tiprack1])                \n        right = protocol.load_instrument(\n            instrument_name='flex_8channel_1000',\n            mount='right',\n            tip_racks=[tiprack2]) \n\nIf you're writing a protocol that uses the Flex Gripper, you might think that this would be the place in your protocol to declare that. However, the gripper doesn't require ``load_instrument``! Whether your gripper requires a protocol is determined by the presence of :py:meth:`.ProtocolContext.move_labware` commands. See :ref:`moving-labware` for more details.\n\nLoading a Flex 96-Channel Pipette\n---------------------------------\n\nThis code sample loads the Flex 96-Channel Pipette. Because of its size, the Flex 96-Channel Pipette requires the left *and* right pipette mounts.",
        "start_char_idx": 641,
        "end_char_idx": 2629,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "21b34534-9d4e-4e1e-9763-792a8f50b398": {
      "__data__": {
        "id_": "21b34534-9d4e-4e1e-9763-792a8f50b398",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bbe211a7-04dd-4fea-a58d-54870d8ff0c6",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "a688d6bd7b198f446ff7e534235b9f4d541429180b2cee1322c9f0672be42980",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd",
            "node_type": "1",
            "metadata": {},
            "hash": "5c03266fa84549f8859ae146765deb528fd7f47adb7a59609c2dd3f564a14c14",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "However, the gripper doesn't require ``load_instrument``! Whether your gripper requires a protocol is determined by the presence of :py:meth:`.ProtocolContext.move_labware` commands. See :ref:`moving-labware` for more details.\n\nLoading a Flex 96-Channel Pipette\n---------------------------------\n\nThis code sample loads the Flex 96-Channel Pipette. Because of its size, the Flex 96-Channel Pipette requires the left *and* right pipette mounts. You cannot use this pipette with 1- or 8-Channel Pipette in the same protocol or when these instruments are attached to the robot. To load the 96-Channel Pipette, specify its position as ``mount='left'`` as shown here:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        left = protocol.load_instrument(\n            instrument_name='flex_96channel_1000', mount='left')\n\n.. versionadded:: 2.15\n\nLoading OT-2 Pipettes\n---------------------\n\nThis code sample loads a P1000 Single-Channel GEN2 pipette in the left mount and a P300 Single-Channel GEN2 pipette in the right mount. Each pipette uses its own 1000 uL tip rack.\n\n.. code-block:: python\n    :substitutions:\n\n    from opentrons import protocol_api\n\n    metadata = {'apiLevel': '2.14'}\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_96_tiprack_1000ul', location=1)\n        tiprack2 = protocol.load_labware(\n            load_name='opentrons_96_tiprack_1000ul', location=2)\n        left = protocol.load_instrument(\n            instrument_name='p1000_single_gen2',\n            mount='left',\n            tip_racks=[tiprack1])\n        right = protocol.load_instrument(\n            instrument_name='p300_multi_gen2',\n            mount='right',\n            tip_racks=[tiprack1])\n\n..\n\n.. _new-multichannel-pipettes:\n\nMulti-Channel Pipettes\n======================\n\nAll building block and advanced commands work with single- and multi-channel pipettes.",
        "start_char_idx": 2186,
        "end_char_idx": 4142,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd": {
      "__data__": {
        "id_": "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "21b34534-9d4e-4e1e-9763-792a8f50b398",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "f2ddae1c75a41a972f3e4d05e720c163f11bcb51d5485a7daeb1bf88dbee5c7a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac",
            "node_type": "1",
            "metadata": {},
            "hash": "e1625f2db89b2faa698be9c0239ec5d6a882e839b4990d065f0252a22442ca64",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "To keep the interface to the Opentrons API consistent between single- and multi-channel pipettes, commands treat the *backmost channel* (furthest from the door) of a multi-channel pipette as the location of the pipette. Location arguments to building block and advanced commands are specified for the backmost channel.\n\nAlso, this means that offset changes (such as :py:meth:`.Well.top` or :py:meth:`.Well.bottom`) can be applied to the single specified well, and each pipette channel will be at the same position relative to the well that it is over.\n\nFinally, because there is only one motor in a multi-channel pipette, these pipettes always aspirate and dispense on all channels simultaneously.\n\n8-Channel, 96-Well Plate Example\n--------------------------------\n\nTo demonstrate these concepts, let's write a protocol that uses a Flex 8-Channel Pipette and a 96-well plate. We'll then aspirate and dispense a liquid to different locations on the same well plate. To start, let's load a pipette in the right mount and add our labware.",
        "start_char_idx": 4144,
        "end_char_idx": 5179,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac": {
      "__data__": {
        "id_": "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "48e8e0fa4614a64a156e8c60d4bf1e6a94eee94c106dd653ef5c7a157ee923d0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f0bf7748-c987-4c01-9cd8-09a87939938b",
            "node_type": "1",
            "metadata": {},
            "hash": "7cf1c6e77c909b3b50741da6b9e6ff246f99570657d41e5301c4ba10083181c1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Location arguments to building block and advanced commands are specified for the backmost channel.\n\nAlso, this means that offset changes (such as :py:meth:`.Well.top` or :py:meth:`.Well.bottom`) can be applied to the single specified well, and each pipette channel will be at the same position relative to the well that it is over.\n\nFinally, because there is only one motor in a multi-channel pipette, these pipettes always aspirate and dispense on all channels simultaneously.\n\n8-Channel, 96-Well Plate Example\n--------------------------------\n\nTo demonstrate these concepts, let's write a protocol that uses a Flex 8-Channel Pipette and a 96-well plate. We'll then aspirate and dispense a liquid to different locations on the same well plate. To start, let's load a pipette in the right mount and add our labware.\n\n.. code-block:: python\n    :substitutions:\n\n    from opentrons import protocol_api\n    \n    requirements = {'robotType': 'Flex', 'apiLevel':'|apiLevel|'}\n\n    def run(protocol: protocol_api.ProtocolContext):\n        # Load a tiprack for 1000 uL tips\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_1000ul', location='D1')       \n        # Load a 96-well plate\n        plate = protocol.load_labware(\n            load_name='corning_96_wellplate_360ul_flat', location='C1')       \n        # Load an 8-channel pipette on the right mount\n        right = protocol.load_instrument(\n            instrument_name='flex_8channel_1000',\n            mount='right',\n            tip_racks=[tiprack1])\n\nAfter loading our instruments and labware, let's tell the robot to pick up a pipette tip from location ``A1`` in ``tiprack1``::\n\n    right.pick_up_tip()\n\nWith the backmost pipette channel above location A1 on the tip rack, all eight channels are above the eight tip rack wells in column 1.",
        "start_char_idx": 4364,
        "end_char_idx": 6200,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f0bf7748-c987-4c01-9cd8-09a87939938b": {
      "__data__": {
        "id_": "f0bf7748-c987-4c01-9cd8-09a87939938b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "68f2b747ec4d8ffbaf228f2da9416b3cb4b47dce7871a7365718fa92ce179610",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3295a522-57b4-4146-a414-09bc00dbc9e7",
            "node_type": "1",
            "metadata": {},
            "hash": "68c972eb1b99ef2eb61fdeb3d8c85c97e1d0c601ab7da8cb053275886d0977f8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "After picking up a tip, let's tell the robot to aspirate 300 uL from the well plate at location ``A2``::\n        \n    right.aspirate(volume=300, location=plate['A2'])\n\nWith the backmost pipette tip above location A2 on the well plate, all eight channels are above the eight wells in column 2.\n\nFinally, let's tell the robot to dispense 300 uL into the well plate at location ``A3``::\n\n    right.dispense(volume=300, location=plate['A3'].top())\n\nWith the backmost pipette tip above location A3, all eight channels are above the eight wells in column 3. The pipette will dispense liquid into all the wells simultaneously.\n\n8-Channel, 384-Well Plate Example\n---------------------------------\n\nIn general, you should specify wells in the first row of a well plate when using multi-channel pipettes. An exception to this rule is when using 384-well plates. The greater well density means the nozzles of a multi-channel pipette can only access every other well in a column. Specifying well A1 accesses every other well starting with the first (rows A, C, E, G, I, K, M, and O). Similarly, specifying well B1 also accesses every other well, but starts with the second (rows B, D, F, H, J, L, N, and P).\n\nTo demonstrate these concepts, let's write a protocol that uses a Flex 8-Channel Pipette and a 384-well plate. We'll then aspirate and dispense a liquid to different locations on the same well plate. To start, let's load a pipette in the right mount and add our labware.",
        "start_char_idx": 6205,
        "end_char_idx": 7672,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3295a522-57b4-4146-a414-09bc00dbc9e7": {
      "__data__": {
        "id_": "3295a522-57b4-4146-a414-09bc00dbc9e7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f0bf7748-c987-4c01-9cd8-09a87939938b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "16ac868ed623f9c9da3f7cc6d229b039d93a7de3ae36f706ea0acaef3345431b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2",
            "node_type": "1",
            "metadata": {},
            "hash": "2230bf734a85a9da3c503edc6a1ffedb007ab89d617aaa188b8e563e5726ab9b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "An exception to this rule is when using 384-well plates. The greater well density means the nozzles of a multi-channel pipette can only access every other well in a column. Specifying well A1 accesses every other well starting with the first (rows A, C, E, G, I, K, M, and O). Similarly, specifying well B1 also accesses every other well, but starts with the second (rows B, D, F, H, J, L, N, and P).\n\nTo demonstrate these concepts, let's write a protocol that uses a Flex 8-Channel Pipette and a 384-well plate. We'll then aspirate and dispense a liquid to different locations on the same well plate. To start, let's load a pipette in the right mount and add our labware.\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        # Load a tiprack for 200 uL tips\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_200ul', location=\"D1\")\n        # Load a well plate\n        plate = protocol.load_labware(\n            load_name='corning_384_wellplate_112ul_flat', location=\"D2\")\n        # Load an 8-channel pipette on the right mount\n        right = protocol.load_instrument(\n            instrument_name='flex_8channel_1000',\n            mount='right',\n            tip_racks=[tiprack1])\n\n\nAfter loading our instruments and labware, let's tell the robot to pick up a pipette tip from location ``A1`` in ``tiprack1``::\n\n    right.pick_up_tip()\n\nWith the backmost pipette channel above location A1 on the tip rack, all eight channels are above the eight tip rack wells in column 1.\n\nAfter picking up a tip, let's tell the robot to aspirate 100 uL from the well plate at location ``A1``::\n\n    right.aspirate(volume=100, location=plate['A1'])\n\nThe eight pipette channels will only aspirate from every other well in the column: A1, C1, E1, G1, I1, K1, M1, and O1.",
        "start_char_idx": 7000,
        "end_char_idx": 8825,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2": {
      "__data__": {
        "id_": "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3295a522-57b4-4146-a414-09bc00dbc9e7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ba60b96a03058a24245132d1a2b7f31413a575c9972648b3774cb4e676003b7d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "13afaf92-1e65-43e2-831c-2ecd72c108a2",
            "node_type": "1",
            "metadata": {},
            "hash": "27a67f1a8d208fffcc4c9bec30e552e3e48d77049ea648dc49978108ec2ecc39",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "After loading our instruments and labware, let's tell the robot to pick up a pipette tip from location ``A1`` in ``tiprack1``::\n\n    right.pick_up_tip()\n\nWith the backmost pipette channel above location A1 on the tip rack, all eight channels are above the eight tip rack wells in column 1.\n\nAfter picking up a tip, let's tell the robot to aspirate 100 uL from the well plate at location ``A1``::\n\n    right.aspirate(volume=100, location=plate['A1'])\n\nThe eight pipette channels will only aspirate from every other well in the column: A1, C1, E1, G1, I1, K1, M1, and O1.\n\nFinally, let's tell the robot to dispense 100 uL into the well plate at location ``B1``::\n\n    right.dispense(volume=100, location=plate['B1'])\n\nThe eight pipette channels will only dispense into every other well in the column: B1, D1, F1, H1, J1, L1, N1, and P1.\n\n.. _pipette-tip-racks:\n\nAdding Tip Racks\n================\n\nThe ``load_instrument()`` method includes the optional argument ``tip_racks``. This parameter accepts a list of tip rack labware objects, which lets you to specify as many tip racks as you want. The advantage of using ``tip_racks`` is twofold. First, associating tip racks with your pipette allows for automatic tip tracking throughout your protocol. Second, it removes the need to specify tip locations in the :py:meth:`.InstrumentContext.pick_up_tip` method.",
        "start_char_idx": 8256,
        "end_char_idx": 9611,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "13afaf92-1e65-43e2-831c-2ecd72c108a2": {
      "__data__": {
        "id_": "13afaf92-1e65-43e2-831c-2ecd72c108a2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e5ff1f152de9a258311990d1053567f897f426f391c91a136e22a73e4ceb0d75",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d7a173a7-0882-41b9-b755-1972cdcf4e78",
            "node_type": "1",
            "metadata": {},
            "hash": "a9aff4eec94181fee5c61ce6408b224026ccb8c30c1e85bb463cf7b4b7783b6c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _pipette-tip-racks:\n\nAdding Tip Racks\n================\n\nThe ``load_instrument()`` method includes the optional argument ``tip_racks``. This parameter accepts a list of tip rack labware objects, which lets you to specify as many tip racks as you want. The advantage of using ``tip_racks`` is twofold. First, associating tip racks with your pipette allows for automatic tip tracking throughout your protocol. Second, it removes the need to specify tip locations in the :py:meth:`.InstrumentContext.pick_up_tip` method. For example, let's start by loading loading some labware and instruments like this::\n        \n    def run(protocol: protocol_api.ProtocolContext):\n        tiprack_left = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_200ul', location='D1')\n        tiprack_right = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_200ul', location='D2')\n        left_pipette = protocol.load_instrument(\n            instrument_name='flex_8channel_1000', mount='left')\n        right_pipette = protocol.load_instrument(\n            instrument_name='flex_8channel_1000',\n            mount='right',\n            tip_racks=[tiprack_right])\n\nLet's pick up a tip with the left pipette. We need to specify the location as an argument of ``pick_up_tip()``, since we loaded the left pipette without a ``tip_racks`` argument.",
        "start_char_idx": 9092,
        "end_char_idx": 10454,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d7a173a7-0882-41b9-b755-1972cdcf4e78": {
      "__data__": {
        "id_": "d7a173a7-0882-41b9-b755-1972cdcf4e78",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "13afaf92-1e65-43e2-831c-2ecd72c108a2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "332f0b6eecb01fff9606f112dc102b60263da76397b1290dff4193422af8356e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7477f664-2d4d-4946-93fb-10f0f7c7fe2f",
            "node_type": "1",
            "metadata": {},
            "hash": "8e427af6ac36c7919a28d3ae78ce430ed26df4a13dfcf1c6144c705a778e7ac5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "We need to specify the location as an argument of ``pick_up_tip()``, since we loaded the left pipette without a ``tip_racks`` argument.\n\n.. code-block:: python\n\n    left_pipette.pick_up_tip(tiprack_left['A1'])\n    left_pipette.drop_tip()\n\nBut now you have to specify ``tiprack_left`` every time you call ``pick_up_tip``, which means you're doing all your own tip tracking::\n\n    left_pipette.pick_up_tip(tiprack_left['A2'])\n    left_pipette.drop_tip()\n    left_pipette.pick_up_tip(tiprack_left['A3'])\n    left_pipette.drop_tip()\n\nHowever, because you specified a tip rack location for the right pipette, the robot will automatically pick up from location ``A1`` of its associated tiprack::\n    \n    right_pipette.pick_up_tip()\n    right_pipette.drop_tip()\n\nAdditional calls to ``pick_up_tip`` will automatically progress through the tips in the right rack::\n\n    right_pipette.pick_up_tip()  # picks up from A2\n    right_pipette.drop_tip()\n    right_pipette.pick_up_tip()  # picks up from A3\n    right_pipette.drop_tip()\n       \nSee also, :ref:`v2-atomic-commands` and :ref:`v2-complex-commands`.\n\n..\n\n.. _new-pipette-models:\n\nAPI Load Names\n==============\n\nThe pipette's API load name (``instrument_name``) is the first parameter of the ``load_instrument()`` method. It tells your robot which attached pipette you're going to use in a protocol. The tables below list the API load names for the currently available Flex and OT-2 pipettes.",
        "start_char_idx": 10319,
        "end_char_idx": 11757,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7477f664-2d4d-4946-93fb-10f0f7c7fe2f": {
      "__data__": {
        "id_": "7477f664-2d4d-4946-93fb-10f0f7c7fe2f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d7a173a7-0882-41b9-b755-1972cdcf4e78",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7143e3c7521de3d3893bd5224414684488647d1cbe5033f668ef8882cdfab5be",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "75be21ee-7046-4af4-b9a7-834821f39c3a",
            "node_type": "1",
            "metadata": {},
            "hash": "863a00fd99edab7baecb2b8daadf0d249375c26a4b3a8e4c3b50fc532aef954f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "..\n\n.. _new-pipette-models:\n\nAPI Load Names\n==============\n\nThe pipette's API load name (``instrument_name``) is the first parameter of the ``load_instrument()`` method. It tells your robot which attached pipette you're going to use in a protocol. The tables below list the API load names for the currently available Flex and OT-2 pipettes.\n\n.. tabs::\n\n    .. tab:: Flex Pipettes\n        \n        +-------------------------+---------------+-------------------------+\n        | Pipette Model           | Volume (uL)   | API Load Name           |\n        +=========================+===============+===+=====================+\n        | Flex 1-Channel Pipette  | 1\u201350          | ``flex_1channel_50``    |\n        +                         +---------------+-------------------------+\n        |                         | 5\u20131000        | ``flex_1channel_1000``  |\n        +-------------------------+---------------+-------------------------+\n        | Flex 8-Channel Pipette  | 1\u201350          | ``flex_8channel_50``    |\n        +                         +---------------+-------------------------+\n        |                         | 5\u20131000        | ``flex_8channel_1000``  |\n        +-------------------------+---------------+-------------------------+\n        | Flex 96-Channel Pipette | 5\u20131000        | ``flex_96channel_1000`` |\n        +-------------------------+---------------+-------------------------+\n\n    .. tab:: OT-2 Pipettes\n\n        +-----------------------------+--------------------+-----------------------+\n        | Pipette Model               | Volume (uL)        | API Load Name         |\n        +=============================+====================+=======================+\n        | P20 Single-Channel GEN2     | 1-20               | ``p20_single_gen2``   |\n        +-----------------------------+                    +-----------------------+\n        | P20 Multi-Channel GEN2      |                    | ``p20_multi_gen2``    |\n        +-----------------------------+--------------------+-----------------------+\n        | P300 Single-Channel GEN2    | 20-300             | ``p300_single_gen2``  |\n        +-----------------------------+                    +-----------------------+\n        | P300 Multi-Channel GEN2     |                    | ``p300_multi_gen2``   |\n        +-----------------------------+--------------------+-----------------------+\n        | P1000 Single-Channel GEN2   | 100-1000           | ``p1000_single_gen2`` |\n        +-----------------------------+--------------------+-----------------------+\n\n        See the OT-2 Pipette Generations section below if you're using GEN1 pipettes on an OT-2.",
        "start_char_idx": 11417,
        "end_char_idx": 14051,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "75be21ee-7046-4af4-b9a7-834821f39c3a": {
      "__data__": {
        "id_": "75be21ee-7046-4af4-b9a7-834821f39c3a",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7477f664-2d4d-4946-93fb-10f0f7c7fe2f",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "2f4f87ef38ed219d25f246a5e6a0dc24eb9a7bcaa2e56612ff1c76d24061f8a1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158",
            "node_type": "1",
            "metadata": {},
            "hash": "2bf26b1eb7393f73b9f229acb1e805a2e6fdb3beb48e7da46b41b3781a6b5d8f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The GEN1 family includes the P10, P50, and P300 single- and multi-channel pipettes, along with the P1000 single-chanel model.\n\n\nOT-2 Pipette Generations\n========================\n\nThe OT-2 works with the GEN1 and GEN2 pipette models. The newer GEN2 pipettes have different volume ranges than the older GEN1 pipettes. With some exceptions, the volume ranges for GEN2 pipettes overlap those used by the GEN1 models. If your protocol specifies a GEN1 pipette, but you have a GEN2 pipette with a compatible volume range, you can still run your protocol. The OT-2 will consider the GEN2 pipette to have the same minimum volume as the GEN1 pipette. The following table lists the volume compatibility between the GEN2 and GEN1 pipettes.\n\n.. list-table::\n    :header-rows: 1\n    \n    * - GEN2 Pipette\n      - GEN1 Pipette\n      - GEN1 Volume\n    * - P20 Single-Channel GEN2\n      - P10 Single-Channel GEN1\n      - 1-10 uL\n    * - P20 Multi-Channel GEN2\n      - P10 Multi-Channel GEN1\n      - 1-10 uL\n    * - P300 Single-Channel GEN2\n      - P300 Single-Channel GEN1\n      - 30-300 uL\n    * - P300 Multi-Channel GEN2\n      - P300 Multi-Channel GEN1\n      - 20-200 uL\n    * - P1000 Single-Channel GEN2\n      - P1000 Single-Channel GEN1\n      - 100-1000 uL\n\nThe single- and multi-channel P50 GEN1 pipettes are the exceptions here. If your protocol uses a P50 GEN1 pipette, there is no backward compatibility with a related GEN2 pipette. To replace a P50 GEN1 with a corresponding GEN2 pipette, edit your protocol to load a P20 Single-Channel GEN2 (for volumes below 20 uL) or a P300 Single-Channel GEN2 (for volumes between 20 and 50 uL).",
        "start_char_idx": 14052,
        "end_char_idx": 15678,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158": {
      "__data__": {
        "id_": "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "75be21ee-7046-4af4-b9a7-834821f39c3a",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "2b1c045be85ea61118b234f5fe1b1bbcba0da6776dd6d4bf0a52d97697a69944",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d2d18186-43b6-41c4-9c61-81bb3209005c",
            "node_type": "1",
            "metadata": {},
            "hash": "f2d98456f83978b5c50dee86373141c21bca217a323962afe4398e1be8bff03f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If your protocol uses a P50 GEN1 pipette, there is no backward compatibility with a related GEN2 pipette. To replace a P50 GEN1 with a corresponding GEN2 pipette, edit your protocol to load a P20 Single-Channel GEN2 (for volumes below 20 uL) or a P300 Single-Channel GEN2 (for volumes between 20 and 50 uL).\n\n.. _pipette-volume-modes:\n\nVolume Modes\n============\n\nThe Flex 1-Channel 50 uL and Flex 8-Channel 50 uL pipettes must operate in a low-volume mode to accurately dispense 1 uL of liquid. Set low-volume mode by calling :py:meth:`.InstrumentContext.configure_for_volume` with the amount of liquid you plan to aspirate, in uL::\n\n    pipette50.configure_for_volume(1)\n    pipette50.pick_up_tip()\n    pipette50.aspirate(1, plate[\"A1\"])\n    \n.. versionadded:: 2.15\n\n.. note::\n    The pipette must not contain liquid when you call ``configure_for_volume()``, or the API will raise an error.\n    \n    Also, if the pipette is in a well location that may contain liquid, it will move upward to ensure it is not immersed in liquid before changing its mode.\n\nIn a protocol that handles many different volumes, it's a good practice to call this function immediately before each :py:meth:`.transfer` or :py:meth:`.aspirate`, specifying the volume that you are about to handle.",
        "start_char_idx": 15371,
        "end_char_idx": 16641,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d2d18186-43b6-41c4-9c61-81bb3209005c": {
      "__data__": {
        "id_": "d2d18186-43b6-41c4-9c61-81bb3209005c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9221b08f8b03c3e02a8f8f14db3a063266fe86007df3002c074e28258316bb2f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "05d59f98-d186-466e-9a1a-9f5b18b56bce",
            "node_type": "1",
            "metadata": {},
            "hash": "d8637aaf634e9ad8677760cc665054c8709eb982bc6e3f5e02384fe24032e7de",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Set low-volume mode by calling :py:meth:`.InstrumentContext.configure_for_volume` with the amount of liquid you plan to aspirate, in uL::\n\n    pipette50.configure_for_volume(1)\n    pipette50.pick_up_tip()\n    pipette50.aspirate(1, plate[\"A1\"])\n    \n.. versionadded:: 2.15\n\n.. note::\n    The pipette must not contain liquid when you call ``configure_for_volume()``, or the API will raise an error.\n    \n    Also, if the pipette is in a well location that may contain liquid, it will move upward to ensure it is not immersed in liquid before changing its mode.\n\nIn a protocol that handles many different volumes, it's a good practice to call this function immediately before each :py:meth:`.transfer` or :py:meth:`.aspirate`, specifying the volume that you are about to handle. When operating with a list of volumes, nest ``configure_for_volume()`` inside a ``for`` loop to ensure that the pipette is properly configured for each volume:\n\n.. code-block:: python\n    \n    volumes = [1, 2, 3, 4, 1, 5, 2, 8]\n    sources = plate.columns()[0]\n    destinations = plate.columns()[1]\n    for i in range(8):\n        pipette50.pick_up_tip()\n        pipette50.configure_for_volume(volumes[i])\n        pipette50.aspirate(volume=volumes[i], location=sources[i])\n        pipette50.dispense(location=destinations[i])\n        pipette50.drop_tip()\n\nIf you know that all your liquid handling will take place in a specific mode, then you can call ``configure_for_volume()`` just once with a nominal volume. Or if all the volumes correspond to the pipette's default mode, you don't have to call ``configure_for_volume()`` at all.\n\n\n.. _new-plunger-flow-rates:\n\nPipette Flow Rates\n==================\n\nMeasured in uL/s, the flow rate determines how much liquid a pipette can aspirate, dispense, and blow-out. Opentrons pipettes have their own default flow rates.",
        "start_char_idx": 15866,
        "end_char_idx": 17705,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "05d59f98-d186-466e-9a1a-9f5b18b56bce": {
      "__data__": {
        "id_": "05d59f98-d186-466e-9a1a-9f5b18b56bce",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d2d18186-43b6-41c4-9c61-81bb3209005c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "fe2ff7405095b87e5a9b30525489e3745e90bc41b981cf2d0a53f032c2ffe9ab",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "06557d00-501d-4f76-9ab2-2ce90e7751c3",
            "node_type": "1",
            "metadata": {},
            "hash": "cec9d0fe8708d1db54e44ed978bf1be8ba58ad077bb5280a99be409497541dd3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Or if all the volumes correspond to the pipette's default mode, you don't have to call ``configure_for_volume()`` at all.\n\n\n.. _new-plunger-flow-rates:\n\nPipette Flow Rates\n==================\n\nMeasured in uL/s, the flow rate determines how much liquid a pipette can aspirate, dispense, and blow-out. Opentrons pipettes have their own default flow rates. The API lets you change the flow rate on a loaded :py:class:`.InstrumentContext` by altering the :py:obj:`.InstrumentContext.flow_rate` properties listed below.\n\n* Aspirate: ``InstrumentContext.flow_rate.aspirate``\n* Dispense: ``InstrumentContext.flow_rate.dispense``\n* Blow-out: ``InstrumentContext.flow_rate.blow_out``\n\nThese flow rate properties operate independently. This means you can specify different flow rates for each property within the same protocol. For example, let's load a simple protocol and set different flow rates for the attached pipette.\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_1000ul', location='D1')       \n        pipette = protocol.load_instrument(\n            instrument_name='flex_1channel_1000',\n            mount='left',\n            tip_racks=[tiprack1])                \n        plate = protocol.load_labware(\n            load_name='corning_96_wellplate_360ul_flat', location='D3')\n        pipette.pick_up_tip()\n\nLet's tell the robot to aspirate, dispense, and blow out the liquid using default flow rates.",
        "start_char_idx": 17353,
        "end_char_idx": 18872,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "06557d00-501d-4f76-9ab2-2ce90e7751c3": {
      "__data__": {
        "id_": "06557d00-501d-4f76-9ab2-2ce90e7751c3",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "05d59f98-d186-466e-9a1a-9f5b18b56bce",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "326ed0a93eefaa062389463dfb93782523bbfafb95745409273c9c7b1a0655b9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2776c4fe-b24c-493f-bd44-2c252984cc06",
            "node_type": "1",
            "metadata": {},
            "hash": "fc39ac695479e4e1b5ec26c8863e24b349d47346e8eb0ee1ce4e0fba68dd5334",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This means you can specify different flow rates for each property within the same protocol. For example, let's load a simple protocol and set different flow rates for the attached pipette.\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n        tiprack1 = protocol.load_labware(\n            load_name='opentrons_flex_96_tiprack_1000ul', location='D1')       \n        pipette = protocol.load_instrument(\n            instrument_name='flex_1channel_1000',\n            mount='left',\n            tip_racks=[tiprack1])                \n        plate = protocol.load_labware(\n            load_name='corning_96_wellplate_360ul_flat', location='D3')\n        pipette.pick_up_tip()\n\nLet's tell the robot to aspirate, dispense, and blow out the liquid using default flow rates. Notice how you don't need to specify a ``flow_rate`` attribute to use the defaults::\n\n        pipette.aspirate(200, plate['A1'])  # 160 uL/s\n        pipette.dispense(200, plate['A2'])  # 160 uL/s\n        pipette.blow_out()                  #  80 uL/s\n\nNow let's change the flow rates for each action::\n\n        pipette.flow_rate.aspirate = 50\n        pipette.flow_rate.dispense = 100\n        pipette.flow_rate.blow_out = 75\n        pipette.aspirate(200, plate['A1'])  #  50 uL/s\n        pipette.dispense(200, plate['A2'])  # 100 uL/s\n        pipette.blow_out()                  #  75 uL/s\n        \nThese flow rates will remain in effect until you change the ``flow_rate`` attribute again *or* call ``configure_for_volume()``. Calling ``configure_for_volume()`` always resets all pipette flow rates to the defaults for the mode that it sets.\n\n.. TODO add mode ranges and flow defaults to sections below\n\n.. note::\n    In API version 2.13 and earlier, :py:obj:`.InstrumentContext.speed` offered similar functionality to ``.flow_rate``. It attempted to set the plunger speed in mm/s.",
        "start_char_idx": 18078,
        "end_char_idx": 19953,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2776c4fe-b24c-493f-bd44-2c252984cc06": {
      "__data__": {
        "id_": "2776c4fe-b24c-493f-bd44-2c252984cc06",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "06557d00-501d-4f76-9ab2-2ce90e7751c3",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1a2cee1a38fa8ec9bd58a67b8926e19fe6b07a42d9aeb4409a8bf6811a2d5a58",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8d4cc9d1-fafb-459a-b65f-7748250ff308",
            "node_type": "1",
            "metadata": {},
            "hash": "216a631c849c839dc7cebbbe4800cb3ec86a1786c187f05a6e67f75be0afb33e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Calling ``configure_for_volume()`` always resets all pipette flow rates to the defaults for the mode that it sets.\n\n.. TODO add mode ranges and flow defaults to sections below\n\n.. note::\n    In API version 2.13 and earlier, :py:obj:`.InstrumentContext.speed` offered similar functionality to ``.flow_rate``. It attempted to set the plunger speed in mm/s. Due to technical limitations, that speed could only be approximate. You must use ``.flow_rate`` in version 2.14 and later, and you should consider replacing older code that sets ``.speed``.\n\n..\n\n\nFlex Pipette Flow Rates\n-----------------------\n\nThe following table provides data on the default aspirate, dispense, and blow-out flow rates (in uL/s) for Flex pipettes.\n\n+-------------------------------+-----------------+-----------------+-----------------+\n| Pipette Models                | Aspirate (uL/s) | Dispense (uL/s) | Blow-out (uL/s) |\n+===============================+=================+=================+=================+\n| | **Flex 50 uL pipettes**     | 8               | 8               | 4               |\n| | 1- and 8-channel            |                 |                 |                 |\n+-------------------------------+-----------------+-----------------+-----------------+\n| | **Flex 1000 uL pipettes**   | 160             | 160             | 80              |\n| | 1-, 8-, and 96-channel      |                 |                 |                 |\n+-------------------------------+-----------------+-----------------+-----------------+\n\nAdditionally, all Flex pipettes have a well bottom clearance of 1 mm for aspirate and dispense actions.\n\n.. _ot2-flow-rates:\n\nOT-2 Pipette Flow Rates\n-----------------------\n\nThe following table provides data on the default aspirate, dispense, and blow-out flow rates (in uL/s) for OT-2 GEN2 pipettes. Because the flow rates are the same across all three actions, we've consolidated the data into the \"Flow Rates\" column.",
        "start_char_idx": 19599,
        "end_char_idx": 21536,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8d4cc9d1-fafb-459a-b65f-7748250ff308": {
      "__data__": {
        "id_": "8d4cc9d1-fafb-459a-b65f-7748250ff308",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
          "file_name": "new_pipette.rst",
          "file_size": 22309,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d0a8e4f952cd2397d0aefa067011bc4d2b503867ff39e9e20894d9af34b176d1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2776c4fe-b24c-493f-bd44-2c252984cc06",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "75c45d5bf5617fe741b449235994a095195140c81e4d4747e9247eda317a0f94",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c695a9b6-67a3-406b-af48-f2d132267861",
            "node_type": "1",
            "metadata": {},
            "hash": "7dca30208a8ad48d7b11d679a60889dfa9921dd55aa2b315643097c4e19ea596",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _ot2-flow-rates:\n\nOT-2 Pipette Flow Rates\n-----------------------\n\nThe following table provides data on the default aspirate, dispense, and blow-out flow rates (in uL/s) for OT-2 GEN2 pipettes. Because the flow rates are the same across all three actions, we've consolidated the data into the \"Flow Rates\" column.\n\n.. list-table::\n    :header-rows: 1\n\n    * - Pipette Model\n      - Volume (uL)\n      - Flow Rates (uL/s)\n    * - P20 Single-Channel GEN2\n      - 1-20\n      - \n          * API v2.6 or higher: 7.56\n          * API v2.5 or lower: 3.78\n    * - P300 Single-Channel GEN2\n      - 20-300\n      - \n          * API v2.6 or higher: 92.86\n          * API v2.5 or lower: 46.43\n    * - P1000 Single-Channel GEN2\n      - 100-1000\n      -\n          * API v2.6 or higher: 274.7\n          * API v2.5 or lower: 137.35\n    * - P20 Multi-Channel GEN2\n      - 1-20\n      - 7.6\n    * - P300 Multi-Channel GEN2\n      - 20-300\n      - 94\n \nAdditionally, all OT-2 GEN2 pipettes have a default head speed of 400 mm/s and a well bottom clearance of 1 mm for aspirate and dispense actions.",
        "start_char_idx": 21220,
        "end_char_idx": 22298,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c695a9b6-67a3-406b-af48-f2d132267861": {
      "__data__": {
        "id_": "c695a9b6-67a3-406b-af48-f2d132267861",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8d4cc9d1-fafb-459a-b65f-7748250ff308",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
              "file_name": "new_pipette.rst",
              "file_size": 22309,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b7a2ebe86afac9d57ead272e020ce8295a91f3ba3d4c44e2143472449a6d98b9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "02af39be-8f80-4e64-8db1-726897aaa0fe",
            "node_type": "1",
            "metadata": {},
            "hash": "8ebf4e43bbb75146c6b8d04560608b2405802c9570472b9a2f1c92c0a26b6264",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to define positions within an Opentrons robot and alter its speed and trajectory.\n\n.. _robot-position:\n\n**************************\nLabware and Deck Positions\n**************************\n\nThe API automatically determines how the robot needs to move when working with the instruments and labware in your protocol. But sometimes you need direct control over these activities. The API lets you do just that. Specifically, you can control movements relative to labware and deck locations. You can also manage the gantry\u2019s speed and trajectory as it traverses the working area. This document explains how to use API commands to take direct control of the robot and position it exactly where you need it.\n\n.. _position-relative-labware:\n\n\nPosition Relative to Labware\n============================\n\nWhen the robot positions itself relative to a piece of labware, where it moves is determined by the labware definition, the actions you want it to perform, and the labware offsets for a specific deck slot. This section describes how these positional components are calculated and how to change them.\n\nTop, Bottom, and Center\n-----------------------\n\nEvery well on every piece of labware has three addressable positions: top, bottom, and center. The position is determined by the labware definition and what the labware is loaded on top of. You can use these positions as-is or calculate other positions relative to them.\n\nTop\n^^^^\n\nLet's look at the :py:meth:`.Well.top` method. It returns a position level with the top of the well, centered in both horizontal directions.\n\n.. code-block:: python\n    \n    plate['A1'].top()  # the top center of the well\n\nThis is a good position to use for a :ref:`blow out operation <new-blow-out>` or an activity where you don't want the tip to contact the liquid. In addition, you can adjust the height of this position with the optional argument ``z``, which is measured in mm. Positive ``z`` numbers move the position up, negative ``z`` numbers move it down.",
        "start_char_idx": 0,
        "end_char_idx": 2007,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "02af39be-8f80-4e64-8db1-726897aaa0fe": {
      "__data__": {
        "id_": "02af39be-8f80-4e64-8db1-726897aaa0fe",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c695a9b6-67a3-406b-af48-f2d132267861",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "7fd7d218d563ea98e0be6fcbd814092adbb5d6fce2b995132db09194c00bf3e9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4f5b559d-e60a-4a57-9b99-6c0427112512",
            "node_type": "1",
            "metadata": {},
            "hash": "428d3578916494d1d7b641fc1456c152bf65d26d68a019e278c801654b54c080",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The position is determined by the labware definition and what the labware is loaded on top of. You can use these positions as-is or calculate other positions relative to them.\n\nTop\n^^^^\n\nLet's look at the :py:meth:`.Well.top` method. It returns a position level with the top of the well, centered in both horizontal directions.\n\n.. code-block:: python\n    \n    plate['A1'].top()  # the top center of the well\n\nThis is a good position to use for a :ref:`blow out operation <new-blow-out>` or an activity where you don't want the tip to contact the liquid. In addition, you can adjust the height of this position with the optional argument ``z``, which is measured in mm. Positive ``z`` numbers move the position up, negative ``z`` numbers move it down.\n\n.. code-block:: python\n\n   plate['A1'].top(z=1)  # 1 mm above the top center of the well\n   plate['A1'].top(z=-1) # 1 mm below the top center of the well\n\n..\n\nBottom\n^^^^^^\n\nLet's look at the :py:meth:`.Well.bottom` method. It returns a position level with the bottom of the well, centered in both horizontal directions. \n\n.. code-block:: python\n\n   plate['A1'].bottom()  # the bottom center of the well\n\nThis is a good position for :ref:`aspirating liquid <new-aspirate>` or an activity where you want the tip to contact the liquid. Similar to the ``Well.top()`` method, you can adjust the height of this position with the optional argument ``z``, which is measured in mm. Positive ``z`` numbers move the position up, negative ``z`` numbers move it down.\n\n.. code-block:: python\n\n   plate['A1'].bottom(z=1)  # 1 mm above the bottom center of the well\n   plate['A1'].bottom(z=-1) # 1 mm below the bottom center of the well\n                            # this may be dangerous!\n\n.. warning::\n\n    Negative ``z`` arguments to ``Well.bottom()`` will cause the pipette tip to collide with the bottom of the well.",
        "start_char_idx": 1256,
        "end_char_idx": 3116,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4f5b559d-e60a-4a57-9b99-6c0427112512": {
      "__data__": {
        "id_": "4f5b559d-e60a-4a57-9b99-6c0427112512",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "02af39be-8f80-4e64-8db1-726897aaa0fe",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "553c8532c9f1392b319e530d0c1198583db5a85e16c33c9f15c53c66b56fd3d3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "dbfad54b-ca37-4852-9162-92cef747df8d",
            "node_type": "1",
            "metadata": {},
            "hash": "8372a3683883f61c52893905b968a9d3ae7e9e71aca0c7406c859cadaf993a2f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. code-block:: python\n\n   plate['A1'].bottom()  # the bottom center of the well\n\nThis is a good position for :ref:`aspirating liquid <new-aspirate>` or an activity where you want the tip to contact the liquid. Similar to the ``Well.top()`` method, you can adjust the height of this position with the optional argument ``z``, which is measured in mm. Positive ``z`` numbers move the position up, negative ``z`` numbers move it down.\n\n.. code-block:: python\n\n   plate['A1'].bottom(z=1)  # 1 mm above the bottom center of the well\n   plate['A1'].bottom(z=-1) # 1 mm below the bottom center of the well\n                            # this may be dangerous!\n\n.. warning::\n\n    Negative ``z`` arguments to ``Well.bottom()`` will cause the pipette tip to collide with the bottom of the well. Collisions may bend the tip (affecting liquid handling) and the pipette may be higher than expected on the z-axis until it picks up another tip.\n    \n    Flex can detect collisions, and even gentle contact may trigger an overpressure error and cause the protocol to fail. Avoid ``z`` values less than 1, if possible.\n    \n    The OT-2 has no sensors to detect contact with a well bottom. The protocol will continue even after a collision.\n\n..\n\nCenter\n^^^^^^\n\nLet's look at the :py:meth:`.Well.center` method. It returns a position centered in the well both vertically and horizontally. This can be a good place to start for precise control of positions within the well for unusual or custom labware.\n\n.. code-block:: python\n\n   plate['A1'].center() # the vertical and horizontal center of the well\n\n..\n\n\n.. _new-default-op-positions:\n\nDefault Positions\n-----------------\n\nBy default, your robot will aspirate and dispense 1 mm above the bottom of wells. This default clearance may not be suitable for some labware geometries, liquids, or protocols. You can change this value by using the :py:meth:`.Well.bottom` method with the ``z`` argument, though it can be cumbersome to do so repeatedly.",
        "start_char_idx": 2332,
        "end_char_idx": 4309,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "dbfad54b-ca37-4852-9162-92cef747df8d": {
      "__data__": {
        "id_": "dbfad54b-ca37-4852-9162-92cef747df8d",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4f5b559d-e60a-4a57-9b99-6c0427112512",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "1255b7745fa17f15e7b4e72d8dfff8decff05365f0c784abaa40b165a739d137",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6be5647b-832e-48ae-aa43-e107420df194",
            "node_type": "1",
            "metadata": {},
            "hash": "22cafa7d6f5cd1f38078e4e8a2dda5cbd56a7b7a1c0af51d76d861950ee39ecb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The OT-2 has no sensors to detect contact with a well bottom. The protocol will continue even after a collision.\n\n..\n\nCenter\n^^^^^^\n\nLet's look at the :py:meth:`.Well.center` method. It returns a position centered in the well both vertically and horizontally. This can be a good place to start for precise control of positions within the well for unusual or custom labware.\n\n.. code-block:: python\n\n   plate['A1'].center() # the vertical and horizontal center of the well\n\n..\n\n\n.. _new-default-op-positions:\n\nDefault Positions\n-----------------\n\nBy default, your robot will aspirate and dispense 1 mm above the bottom of wells. This default clearance may not be suitable for some labware geometries, liquids, or protocols. You can change this value by using the :py:meth:`.Well.bottom` method with the ``z`` argument, though it can be cumbersome to do so repeatedly.\n\nIf you need to change the aspiration or dispensing height for multiple operations, specify the distance in mm from the well bottom with the :py:obj:`.InstrumentContext.well_bottom_clearance` object. It has two attributes: ``well_bottom_clearance.aspirate`` and ``well_bottom_clearance.dispense``. These change the aspiration height and dispense height, respectively.\n\nModifying these attributes will affect all subsequent aspirate and dispense actions performed by the attached pipette, even those executed as part of a :py:meth:`.transfer` operation.",
        "start_char_idx": 3443,
        "end_char_idx": 4862,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6be5647b-832e-48ae-aa43-e107420df194": {
      "__data__": {
        "id_": "6be5647b-832e-48ae-aa43-e107420df194",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "dbfad54b-ca37-4852-9162-92cef747df8d",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "d1dd8c536be8da2f775539387e338f3827c0e2a45a507fc7eb5e9c9e11c8b39a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "16bbd799-fd2f-4b40-b959-54097655bd69",
            "node_type": "1",
            "metadata": {},
            "hash": "d2e6abfc5c92591ce0ec0f3420ae292566ee2ab8ecc3292824070238b7d9aebc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This default clearance may not be suitable for some labware geometries, liquids, or protocols. You can change this value by using the :py:meth:`.Well.bottom` method with the ``z`` argument, though it can be cumbersome to do so repeatedly.\n\nIf you need to change the aspiration or dispensing height for multiple operations, specify the distance in mm from the well bottom with the :py:obj:`.InstrumentContext.well_bottom_clearance` object. It has two attributes: ``well_bottom_clearance.aspirate`` and ``well_bottom_clearance.dispense``. These change the aspiration height and dispense height, respectively.\n\nModifying these attributes will affect all subsequent aspirate and dispense actions performed by the attached pipette, even those executed as part of a :py:meth:`.transfer` operation. This snippet from a sample protocol demonstrates how to work with and change the default clearance::\n\n    # aspirate 1 mm above the bottom of the well (default)\n    pipette.aspirate(50, plate['A1'])\n    # dispense 1 mm above the bottom of the well (default)\n    pipette.dispense(50, plate['A1'])\n\n    # change clearance for aspiration to 2 mm\n    pipette.well_bottom_clearance.aspirate = 2\n    # aspirate 2 mm above the bottom of the well\n    pipette.aspirate(50, plate['A1'])\n    # still dispensing 1 mm above the bottom\n    pipette.dispense(50, plate['A1'])\n\n    pipette.aspirate(50, plate['A1'])\n    # change clearance for dispensing to 10 mm      \n    pipette.well_bottom_clearance.dispense = 10\n    # dispense high above the well\n    pipette.dispense(50, plate['A1'])\n\n..\n\nUsing Labware Position Check\n============================\n\nAll positions relative to labware are adjusted automatically based on labware offset data. Calculate labware offsets by running Labware Position Check during protocol setup, either in the Opentrons App or on the Flex touchscreen.",
        "start_char_idx": 4071,
        "end_char_idx": 5929,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "16bbd799-fd2f-4b40-b959-54097655bd69": {
      "__data__": {
        "id_": "16bbd799-fd2f-4b40-b959-54097655bd69",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6be5647b-832e-48ae-aa43-e107420df194",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "bbb6329ba1815fd9f0805ac255498750d5927ab9de383f02003a39e141df4efd",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a39df619-be28-4174-bb5b-e63c1079ce09",
            "node_type": "1",
            "metadata": {},
            "hash": "48cef6848254f4eae5cdcf3813764d56324b978d6e0460c2dbc7f38fe170b643",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Calculate labware offsets by running Labware Position Check during protocol setup, either in the Opentrons App or on the Flex touchscreen. Version 6.0.0 and later of the robot software can apply previously calculated offsets on the same robot for the same labware type and deck slot, even across different protocols.\n\nYou should only adjust labware offsets in your Python code if you plan to run your protocol in Jupyter Notebook or from the command line. See :ref:`using_lpc` in the Advanced Control article for information.\n\nPosition Relative to the Deck\n=============================\n\nThe robot's base coordinate system is known as *deck coordinates*. Many API functions use this coordinate system, and you can also reference it directly. It is a right-handed coordinate system always specified in mm, with the origin ``(0, 0, 0)`` at the front left of the robot. The positive ``x`` direction is to the right, the positive ``y`` direction is to the back, and the positive ``z`` direction is up. \n\nYou can identify a point in this coordinate system with a :py:class:`.types.Location` object, either as a standard Python :py:class:`tuple` of three floats, or as an instance of the :py:obj:`~collections.namedtuple` :py:class:`.types.Point`.\n\n.. note::\n\n    There are technically multiple vertical axes. For example, ``z`` is the axis of the left pipette mount and ``a`` is the axis of the right pipette mount. There are also pipette plunger axes: ``b`` (left) and ``c`` (right). You usually don't have to refer to these axes directly, since most motion commands are issued to a particular pipette and the robot automatically selects the correct axis to move. Similarly, :py:class:`.types.Location` only deals with ``x``, ``y``, and ``z`` values. \n\n\nIndependent Movement\n====================\n\nFor convenience, many methods have location arguments and incorporate movement automatically. This section will focus on moving the pipette independently, without performing other actions like ``aspirate()`` or ``dispense()``.\n\n.. _move-to:\n\nMove To\n-------\n\nThe :py:meth:`.InstrumentContext.move_to` method moves a pipette to any reachable location on the deck.",
        "start_char_idx": 5791,
        "end_char_idx": 7946,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a39df619-be28-4174-bb5b-e63c1079ce09": {
      "__data__": {
        "id_": "a39df619-be28-4174-bb5b-e63c1079ce09",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "16bbd799-fd2f-4b40-b959-54097655bd69",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "415a5de2a3b4ee94b5ce0140104f2517b5c7e88e898fe3df6bd1dfc8497ccff1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "de5af6d9-781e-4f03-af68-540d4ca5f861",
            "node_type": "1",
            "metadata": {},
            "hash": "b181639ac37e55026d1f9d8bf46b5d597a8887dc67cd59401281a77a06b23279",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, ``z`` is the axis of the left pipette mount and ``a`` is the axis of the right pipette mount. There are also pipette plunger axes: ``b`` (left) and ``c`` (right). You usually don't have to refer to these axes directly, since most motion commands are issued to a particular pipette and the robot automatically selects the correct axis to move. Similarly, :py:class:`.types.Location` only deals with ``x``, ``y``, and ``z`` values. \n\n\nIndependent Movement\n====================\n\nFor convenience, many methods have location arguments and incorporate movement automatically. This section will focus on moving the pipette independently, without performing other actions like ``aspirate()`` or ``dispense()``.\n\n.. _move-to:\n\nMove To\n-------\n\nThe :py:meth:`.InstrumentContext.move_to` method moves a pipette to any reachable location on the deck. If the pipette has picked up a tip, it will move the end of the tip to that position; if it hasn't, it will move the pipette nozzle to that position.\n\nThe :py:meth:`~.InstrumentContext.move_to` method requires the :py:class:`.Location` argument. The location can be automatically generated by methods like ``Well.top()`` and ``Well.bottom()`` or one you've created yourself, but you can't move a pipette to a well directly:\n\n.. code-block:: python\n\n    pipette.move_to(plate['A1'])              # error; can't move to a well itself\n    pipette.move_to(plate['A1'].bottom())     # move to the bottom of well A1\n    pipette.move_to(plate['A1'].top())        # move to the top of well A1\n    pipette.move_to(plate['A1'].bottom(z=2))  # move to 2 mm above the bottom of well A1\n    pipette.move_to(plate['A1'].top(z=-2))    # move to 2 mm below the top of well A1\n\nWhen using ``move_to()``, by default the pipette will move in an arc: first upwards, then laterally to a position above the target location, and finally downwards to the target location.",
        "start_char_idx": 7095,
        "end_char_idx": 8994,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "de5af6d9-781e-4f03-af68-540d4ca5f861": {
      "__data__": {
        "id_": "de5af6d9-781e-4f03-af68-540d4ca5f861",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a39df619-be28-4174-bb5b-e63c1079ce09",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "ff794dc1f171c6dfd9106736287b8b2f86c89c62039e68ac53e68ed038668873",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7b56e245-174f-4279-90aa-bed3d7a5bcd1",
            "node_type": "1",
            "metadata": {},
            "hash": "ba2db0255cb65844fdba26645a281eb2adcac695d10193ff1c624e3493b156d7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you have a reason for doing so, you can force the pipette to move in a straight line to the target location:\n\n.. code-block:: python\n\n    pipette.move_to(plate['A1'].top(), force_direct=True)\n\n.. warning::\n\n    Moving without an arc runs the risk of the pipette colliding with objects on the deck. Be very careful when using this option, especially when moving longer distances.\n\nSmall, direct movements can be useful for working inside of a well, without having the tip exit and re-enter the well. This code sample demonstrates how to move the pipette to a well, make direct movements inside that well, and then move on to a different well::\n\n    pipette.move_to(plate['A1'].top())\n    pipette.move_to(plate['A1'].bottom(1), force_direct=True)\n    pipette.move_to(plate['A1'].top(-2), force_direct=True)\n    pipette.move_to(plate['A2'].top())\n\n..\n\n\nPoints and Locations\n--------------------\n\nWhen instructing the robot to move, it's important to consider the difference between the :py:class:`~opentrons.types.Point` and :py:class:`~opentrons.types.Location` types.\n\n* Points are ordered tuples or named tuples: ``Point(10, 20, 30)``, ``Point(x=10, y=20, z=30)``, and ``Point(z=30, y=20, x=10)`` are all equivalent.\n* Locations are a higher-order tuple that combines a point with a reference object: a well, a piece of labware, or ``None`` (the deck).\n\n.. TODO document position_for and other methods in deck.py that return Locations\n\nThis distinction is important for the :py:meth:`.Location.move` method, which operates on a location, takes a point as an argument, and outputs an updated location. To use this method, include ``from opentrons import types`` at the start of your protocol. The ``move()`` method does not mutate the location it is called on, so to perform an action at the updated location, use it as an argument of another method or save it to a variable.",
        "start_char_idx": 8995,
        "end_char_idx": 10872,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7b56e245-174f-4279-90aa-bed3d7a5bcd1": {
      "__data__": {
        "id_": "7b56e245-174f-4279-90aa-bed3d7a5bcd1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "de5af6d9-781e-4f03-af68-540d4ca5f861",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "05195c5415e2634a03cf7f03e8f6544a9893ade80e2a4056c3f5eba677188013",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6c7e15c2-be7e-4a60-848f-becd4b110db7",
            "node_type": "1",
            "metadata": {},
            "hash": "2888eb7180bd6d1c38bd29955bd133fdd31d162fd228d96fba10e67929ff5dbc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "* Locations are a higher-order tuple that combines a point with a reference object: a well, a piece of labware, or ``None`` (the deck).\n\n.. TODO document position_for and other methods in deck.py that return Locations\n\nThis distinction is important for the :py:meth:`.Location.move` method, which operates on a location, takes a point as an argument, and outputs an updated location. To use this method, include ``from opentrons import types`` at the start of your protocol. The ``move()`` method does not mutate the location it is called on, so to perform an action at the updated location, use it as an argument of another method or save it to a variable. For example::\n\n    # get the location at the center of well A1\n    center_location = plate['A1'].center()\n\n    # get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1\n    adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))\n\n    # aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1\n    pipette.aspirate(50, adjusted_location)\n    \n    # dispense at the same location\n    pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))\n\n.. note::\n\n\tThe additional ``z`` arguments of the ``top()`` and ``bottom()`` methods (see :ref:`position-relative-labware` above) are shorthand for adjusting the top and bottom locations with ``move()``. You still need to use ``move()`` to adjust these positions along the x- or y-axis:\n\t\n\t.. code-block:: python\n\n\t\t# the following are equivalent\n\t\tpipette.move_to(plate['A1'].bottom(z=2))\n\t\tpipette.move_to(plate['A1'].bottom().move(types.Point(z=2)))\n\n\t\t# adjust along the y-axis\n\t\tpipette.move_to(plate['A1'].bottom().move(types.Point(y=2)))\t\n\n..",
        "start_char_idx": 10215,
        "end_char_idx": 11924,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6c7e15c2-be7e-4a60-848f-becd4b110db7": {
      "__data__": {
        "id_": "6c7e15c2-be7e-4a60-848f-becd4b110db7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7b56e245-174f-4279-90aa-bed3d7a5bcd1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "1b62f080187f7b937ab0c95455c68b5c4bbcfa904e33aa4fdaf6858242e64d69",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b",
            "node_type": "1",
            "metadata": {},
            "hash": "78d11374ae5fca2aa9d70c6a81cac6e8629d3eef846e7c60181e7a3f0b63ab2c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You still need to use ``move()`` to adjust these positions along the x- or y-axis:\n\t\n\t.. code-block:: python\n\n\t\t# the following are equivalent\n\t\tpipette.move_to(plate['A1'].bottom(z=2))\n\t\tpipette.move_to(plate['A1'].bottom().move(types.Point(z=2)))\n\n\t\t# adjust along the y-axis\n\t\tpipette.move_to(plate['A1'].bottom().move(types.Point(y=2)))\t\n\n..\n\n\nMovement Speeds\n===============\n\nIn addition to instructing the robot where to move a pipette, you can also control the speed at which it moves. Speed controls can be applied either to all pipette motions or to movement along a particular axis.\n\n.. _gantry_speed: \n\nGantry Speed\n------------\n\nThe robot's gantry usually moves as fast as it can given its construction. The default speed for Flex varies between 300 and 350 mm/s. The OT-2 default is 400 mm/s. However, some experiments or liquids may require slower movements. In this case, you can reduce the gantry speed for a specific pipette by setting :py:obj:`.InstrumentContext.default_speed` like this::\n        \n\t\n\tpipette.move_to(plate['A1'].top())  # move to the first well at default speed\n\tpipette.default_speed = 100         # reduce pipette speed\n\tpipette.move_to(plate['D6'].top())  # move to the last well at the slower speed\n\n.. warning::\n\n\tThese default speeds were chosen because they're the maximum speeds that Opentrons knows will work with the gantry. Your robot may be able to move faster, but you shouldn't increase this value unless instructed by Opentrons Support.\n\n\n..",
        "start_char_idx": 11579,
        "end_char_idx": 13071,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b": {
      "__data__": {
        "id_": "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
          "file_name": "robot_position.rst",
          "file_size": 14278,
          "creation_date": "2024-03-25",
          "last_modified_date": "2024-03-25"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "4da6c89a-702b-40e4-a46f-cc30b9d24a40",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "25cf0280c79d3b00ed49aa6cb0b49a5415d871bcd7d81f813fbb4f85a1c96f7f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6c7e15c2-be7e-4a60-848f-becd4b110db7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "2a7add3eccd5e47de5a354201ad32d544bbbcce7d16003a588f24229d7373894",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c2e151b8-3c71-441d-aa4a-6a7224e94fc8",
            "node_type": "1",
            "metadata": {},
            "hash": "f0147024adab767972225af534092de5f2ae70e6c0f74261218a79ca8bbd04fd",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "..\n\n\n.. _axis_speed_limits:\n\nAxis Speed Limits\n-----------------\n\nIn addition to controlling the overall gantry speed, you can set speed limits for each of the individual axes: ``x`` (gantry left/right motion), ``y`` (gantry forward/back motion), ``z`` (left pipette up/down motion), and ``a`` (right pipette up/down motion). Unlike ``default_speed``, which is a pipette property, axis speed limits are stored in a protocol property :py:obj:`.ProtocolContext.max_speeds`; therefore the ``x`` and ``y`` values affect all movements by both pipettes. This property works like a dictionary, where the keys are axes, assigning a value to a key sets a max speed, and deleting a key or setting it to ``None`` resets that axis's limit to the default:\n\n.. code-block:: python\n    :substitutions:\n\n\tprotocol.max_speeds['x'] = 50    # limit x-axis to 50 mm/s\n\tdel protocol.max_speeds['x']     # reset x-axis limit\n\tprotocol.max_speeds['a'] = 10    # limit a-axis to 10 mm/s\n\tprotocol.max_speeds['a'] = None  # reset a-axis limit\n\n\nNote that ``max_speeds`` can't set limits for the pipette plunger axes (``b`` and ``c``); instead, set the flow rates or plunger speeds as described in :ref:`new-plunger-flow-rates`.\n\n..",
        "start_char_idx": 13069,
        "end_char_idx": 14275,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c2e151b8-3c71-441d-aa4a-6a7224e94fc8": {
      "__data__": {
        "id_": "c2e151b8-3c71-441d-aa4a-6a7224e94fc8",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
              "file_name": "robot_position.rst",
              "file_size": 14278,
              "creation_date": "2024-03-25",
              "last_modified_date": "2024-03-25"
            },
            "hash": "286a3357205723721fbc605969bbee0f725e69c88893cd8bb8a069b28735f8af",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6aa17a74-053a-443e-b412-66412367f29f",
            "node_type": "1",
            "metadata": {},
            "hash": "23108f63607746c23ec292ba33debdbd5dafcf3539a7d27e5943c023472687ae",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: A guide to creating your first Python protocol and running it on an Opentrons robot.\n\n.. _tutorial:\n\n########\nTutorial\n########\n\n************\nIntroduction\n************\n\nThis tutorial will guide you through creating a Python protocol file from scratch. At the end of this process you\u2019ll have a complete protocol that can run on a Flex or an OT-2 robot. If you don\u2019t have a Flex or an OT-2 (or if you\u2019re away from your lab, or if your robot is in use), you can use the same file to simulate the protocol on your computer instead.\n\nWhat You\u2019ll Automate\n^^^^^^^^^^^^^^^^^^^^\n\nThe lab task that you\u2019ll automate in this tutorial is `serial dilution`: taking a solution and progressively diluting it by transferring it stepwise across a plate from column 1 to column 12. With just a dozen or so lines of code, you can instruct your robot to perform the hundreds of individual pipetting actions necessary to fill an entire 96-well plate. And all of those liquid transfers will be done automatically, so you\u2019ll have more time to do other work in your lab.\n\nBefore You Begin\n^^^^^^^^^^^^^^^^\n\nYou're going to write some Python code, but you don't need to be a Python expert to get started writing Opentrons protocols. You should know some basic Python syntax, like how it uses `indentation <https://docs.python.org/3/reference/lexical_analysis.html#indentation>`_ to group blocks of code, dot notation for `calling methods <https://docs.python.org/3/tutorial/classes.html#method-objects>`_, and the format of `lists <https://docs.python.org/3/tutorial/introduction.html#lists>`_ and `dictionaries <https://docs.python.org/3/tutorial/datastructures.html#dictionaries>`_. You\u2019ll also be using `common control structures <https://docs.python.org/3/tutorial/controlflow.html#if-statements>`_ like ``if`` statements and ``for`` loops. \n\nTo run your code, make sure that you've installed `Python 3 <https://wiki.python.org/moin/BeginnersGuide/Download>`_ and the `pip package installer <https://pip.pypa.io/en/stable/getting-started/>`_.",
        "start_char_idx": 0,
        "end_char_idx": 2038,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6aa17a74-053a-443e-b412-66412367f29f": {
      "__data__": {
        "id_": "6aa17a74-053a-443e-b412-66412367f29f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c2e151b8-3c71-441d-aa4a-6a7224e94fc8",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bc5cd6f0a7262789d3208adbebc6d3cc5627fd02dfe32a057421c01e45c72acb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc",
            "node_type": "1",
            "metadata": {},
            "hash": "8378a25342f3ac9e5862da3d4db53805377ed031376c915223fac7f25249dd9e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You should know some basic Python syntax, like how it uses `indentation <https://docs.python.org/3/reference/lexical_analysis.html#indentation>`_ to group blocks of code, dot notation for `calling methods <https://docs.python.org/3/tutorial/classes.html#method-objects>`_, and the format of `lists <https://docs.python.org/3/tutorial/introduction.html#lists>`_ and `dictionaries <https://docs.python.org/3/tutorial/datastructures.html#dictionaries>`_. You\u2019ll also be using `common control structures <https://docs.python.org/3/tutorial/controlflow.html#if-statements>`_ like ``if`` statements and ``for`` loops. \n\nTo run your code, make sure that you've installed `Python 3 <https://wiki.python.org/moin/BeginnersGuide/Download>`_ and the `pip package installer <https://pip.pypa.io/en/stable/getting-started/>`_. You should write your code in your favorite plaintext editor or development environment and save it in a file with a ``.py`` extension, like ``dilution-tutorial.py``.\n\nHardware and Labware\n^^^^^^^^^^^^^^^^^^^^\n\nBefore running a protocol, you\u2019ll want to have the right kind of hardware and labware ready for your Flex or OT-2.\n\n- **Flex users** should review Chapter 2: Installation and Relocation in the `instruction manual <https://insights.opentrons.com/hubfs/Products/Flex/Opentrons%20Flex%20Manual.pdf>`_. Specifically, see the pipette information in the \"Instrument Installation and Calibration\" section. You can use either a 1-channel or 8-channel pipette for this tutorial. Most Flex code examples will use a `Flex 1-Channel 1000 uL pipette <https://shop.opentrons.com/opentrons-flex-1-channel-pipette/>`_.\n\n- **OT-2 users** should review the robot setup and pipette information on the `Get Started page <https://support.opentrons.com/s/ot2-get-started>`_.",
        "start_char_idx": 1225,
        "end_char_idx": 3002,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc": {
      "__data__": {
        "id_": "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6aa17a74-053a-443e-b412-66412367f29f",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ba0ec43f80637a8a09c476b07e693f8713e25299580acfcf513e50179f49364c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2a902471-31a0-4af2-95fb-633cca7eb7ce",
            "node_type": "1",
            "metadata": {},
            "hash": "79550057c17f39ea5f58f88c7c72e2964836777f7da3484a6f9a8063e7529cbe",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- **Flex users** should review Chapter 2: Installation and Relocation in the `instruction manual <https://insights.opentrons.com/hubfs/Products/Flex/Opentrons%20Flex%20Manual.pdf>`_. Specifically, see the pipette information in the \"Instrument Installation and Calibration\" section. You can use either a 1-channel or 8-channel pipette for this tutorial. Most Flex code examples will use a `Flex 1-Channel 1000 uL pipette <https://shop.opentrons.com/opentrons-flex-1-channel-pipette/>`_.\n\n- **OT-2 users** should review the robot setup and pipette information on the `Get Started page <https://support.opentrons.com/s/ot2-get-started>`_. Specifically, see `attaching pipettes <https://support.opentrons.com/s/article/Get-started-Attach-pipettes>`_ and `initial calibration <https://support.opentrons.com/s/article/Get-started-Calibrate-the-deck>`_. You can use either a single-channel or 8-channel pipette for this tutorial. Most OT-2 code examples will use a `P300 Single-Channel GEN2 <https://shop.opentrons.com/single-channel-electronic-pipette-p20/>`_ pipette.\n\nThe Flex and OT-2 use similar labware for serial dilution. The tutorial code will use the labware listed in the table below, but as long as you have labware of each type you can modify the code to run with your labware.",
        "start_char_idx": 2366,
        "end_char_idx": 3650,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2a902471-31a0-4af2-95fb-633cca7eb7ce": {
      "__data__": {
        "id_": "2a902471-31a0-4af2-95fb-633cca7eb7ce",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bfe03879b01254339e0883b9f7e963bcf4b01e71986277792ce9f6843c1aab1a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ecec68b7-4d23-4ef0-96cb-96a776280b07",
            "node_type": "1",
            "metadata": {},
            "hash": "7317697d36bb9cb22e1005f1a34f707e1e0cb3220c0734b414ed28a2a1a2ac41",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Specifically, see `attaching pipettes <https://support.opentrons.com/s/article/Get-started-Attach-pipettes>`_ and `initial calibration <https://support.opentrons.com/s/article/Get-started-Calibrate-the-deck>`_. You can use either a single-channel or 8-channel pipette for this tutorial. Most OT-2 code examples will use a `P300 Single-Channel GEN2 <https://shop.opentrons.com/single-channel-electronic-pipette-p20/>`_ pipette.\n\nThe Flex and OT-2 use similar labware for serial dilution. The tutorial code will use the labware listed in the table below, but as long as you have labware of each type you can modify the code to run with your labware.\n\n.. list-table::\n   :widths: 20 40 50\n   :header-rows: 1\n\n   * - Labware type\n     - Labware name\n     - API load name\n   * - Reservoir\n     - `NEST 12 Well Reservoir 15 mL <https://labware.opentrons.com/nest_12_reservoir_15ml>`_\n     - ``nest_12_reservoir_15ml``\n   * - Well plate\n     - `NEST 96 Well Plate 200 uL Flat <https://labware.opentrons.com/nest_96_wellplate_200ul_flat>`_\n     - ``nest_96_wellplate_200ul_flat``\n   * - Flex tip rack\n     - `Opentrons Flex Tips, 200 uL <https://shop.opentrons.com/opentrons-flex-tips-200-l/>`_\n     - ``opentrons_flex_96_tiprack_200ul``\n   * - OT-2 tip rack\n     - `Opentrons 96 Tip Rack <https://labware.opentrons.com/?category=tipRack&manufacturer=Opentrons>`_\n     - ``opentrons_96_tiprack_300ul``\n\nFor the liquids, you can use plain water as the diluent and water dyed with food coloring as the solution.\n\n**********************\nCreate a Protocol File\n**********************\n\nLet\u2019s start from scratch to create your serial dilution protocol.",
        "start_char_idx": 3003,
        "end_char_idx": 4641,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ecec68b7-4d23-4ef0-96cb-96a776280b07": {
      "__data__": {
        "id_": "ecec68b7-4d23-4ef0-96cb-96a776280b07",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2a902471-31a0-4af2-95fb-633cca7eb7ce",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1f1e7cc63f9132ede843d991e53f474c752d10dae608ec3c5ad7af97d66cfef7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a5c24e0d-dc07-4713-8f8b-adf75906acc0",
            "node_type": "1",
            "metadata": {},
            "hash": "0389cb92e84bbf34c94dabede7ff6bca5c5d1d57bf904b4a9ee2724fed748e65",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "**********************\nCreate a Protocol File\n**********************\n\nLet\u2019s start from scratch to create your serial dilution protocol. Open up a new file in your editor and start with the line: \n\n.. code-block:: python\n\n    from opentrons import protocol_api\n\nThroughout this documentation, you\u2019ll see protocols that begin with the ``import`` statement shown above. It identifies your code as an Opentrons protocol. This statement is not required, but including it is a good practice and allows most code editors to provide helpful autocomplete suggestions. \n\nEverything else in the protocol file is required. Next, you\u2019ll specify the version of the API you\u2019re using. Then comes the core of the protocol: defining a single ``run()`` function that provides the locations of your labware, states which kind of pipettes you\u2019ll use, and finally issues the commands that the robot will perform.\n\nFor this tutorial, you\u2019ll write very little Python outside of the ``run()`` function. But for more complex applications it\u2019s worth remembering that your protocol file *is* a Python script, so any Python code that can run on your robot can be a part of a protocol. \n\n.. _tutorial-metadata:\n\nMetadata\n^^^^^^^^\n\nEvery protocol needs to have a metadata dictionary with information about the protocol. At minimum, you need to specify what :ref:`version of the API <version-table>` the protocol requires. The `scripts <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/>`_ for this tutorial were validated against API version 2.15, so specify:\n\n.. code-block:: python\n\n    metadata = {'apiLevel': '2.15'}\n\nYou can include any other information you like in the metadata dictionary. The fields ``protocolName``, ``description``, and ``author`` are all displayed in the Opentrons App, so it\u2019s a good idea to expand the dictionary to include them:\n\n.. code-block:: python\n    :substitutions:\n\n    metadata = {\n        'apiLevel': '2.15',\n        'protocolName': 'Serial Dilution Tutorial',\n        'description': '''This protocol is the outcome of following the \n                       Python Protocol API Tutorial located at \n                       https://docs.opentrons.com/v2/tutorial.html.",
        "start_char_idx": 4506,
        "end_char_idx": 6711,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a5c24e0d-dc07-4713-8f8b-adf75906acc0": {
      "__data__": {
        "id_": "a5c24e0d-dc07-4713-8f8b-adf75906acc0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ecec68b7-4d23-4ef0-96cb-96a776280b07",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "5ab11bd197fc3bd330695f600ad9414eb566227d7a25731b2a3ce1c4861f559f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "14706ad3-1f24-48d4-aa97-c543af753a5a",
            "node_type": "1",
            "metadata": {},
            "hash": "8593fcc8f33d145299e196446358528d101a51eaa0b325bc7f722214843ccf45",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The `scripts <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/>`_ for this tutorial were validated against API version 2.15, so specify:\n\n.. code-block:: python\n\n    metadata = {'apiLevel': '2.15'}\n\nYou can include any other information you like in the metadata dictionary. The fields ``protocolName``, ``description``, and ``author`` are all displayed in the Opentrons App, so it\u2019s a good idea to expand the dictionary to include them:\n\n.. code-block:: python\n    :substitutions:\n\n    metadata = {\n        'apiLevel': '2.15',\n        'protocolName': 'Serial Dilution Tutorial',\n        'description': '''This protocol is the outcome of following the \n                       Python Protocol API Tutorial located at \n                       https://docs.opentrons.com/v2/tutorial.html. It takes a \n                       solution and progressively dilutes it by transferring it \n                       stepwise across a plate.''',\n        'author': 'New API User'\n        }\n\nNote, if you have a Flex, or are using an OT-2 with API v2.15 (or higher), we recommend adding a ``requirements`` section to your code. See the Requirements section below.\n\n.. _tutorial-requirements:\n\nRequirements\n^^^^^^^^^^^^\n\nThe ``requirements`` code block can appear before *or* after the ``metadata`` code block in a Python protocol. It uses the following syntax and accepts two arguments: ``robotType`` and ``apiLevel``.\n\n\nWhether you need a ``requirements`` block depends on your robot model and API version.\n\n- **Flex:** The ``requirements`` block is always required. And, the API version does not go in the ``metadata`` section. The API version belongs in the ``requirements``. For example::\n\n    requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"2.15\"}\n\n- **OT-2:** The ``requirements`` block is optional, but including it is a recommended best practice, particularly if you\u2019re using API version 2.15 or greater. If you do use it, remember to remove the API version from the ``metadata``.",
        "start_char_idx": 5897,
        "end_char_idx": 7899,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "14706ad3-1f24-48d4-aa97-c543af753a5a": {
      "__data__": {
        "id_": "14706ad3-1f24-48d4-aa97-c543af753a5a",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a5c24e0d-dc07-4713-8f8b-adf75906acc0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c6e4ff00243307b5d761a20f8f2ab2e41a4b06abfe4c9648541751e82b46754e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c",
            "node_type": "1",
            "metadata": {},
            "hash": "26962ad9f4b39840a2b897dd204f3ab60ea3a26697a910f465fdc2fd2d6d496b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ".. _tutorial-requirements:\n\nRequirements\n^^^^^^^^^^^^\n\nThe ``requirements`` code block can appear before *or* after the ``metadata`` code block in a Python protocol. It uses the following syntax and accepts two arguments: ``robotType`` and ``apiLevel``.\n\n\nWhether you need a ``requirements`` block depends on your robot model and API version.\n\n- **Flex:** The ``requirements`` block is always required. And, the API version does not go in the ``metadata`` section. The API version belongs in the ``requirements``. For example::\n\n    requirements = {\"robotType\": \"Flex\", \"apiLevel\": \"2.15\"}\n\n- **OT-2:** The ``requirements`` block is optional, but including it is a recommended best practice, particularly if you\u2019re using API version 2.15 or greater. If you do use it, remember to remove the API version from the ``metadata``. For example::\n    \n    requirements = {\"robotType\": \"OT-2\", \"apiLevel\": \"2.15\"} \n\nWith the metadata and requirements defined, you can move on to creating the ``run()`` function for your protocol.\n\nThe ``run()`` function\n^^^^^^^^^^^^^^^^^^^^^^\n\nNow it\u2019s time to actually instruct the Flex or OT-2 how to perform serial dilution. All of this information is contained in a single Python function, which has to be named ``run``. This function takes one argument, which is the *protocol context*. Many examples in these docs use the argument name ``protocol``, and sometimes they specify the argument\u2019s type:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n\nWith the protocol context argument named and typed, you can start calling methods on ``protocol`` to add labware and hardware.\n\nLabware\n-------\n\nFor serial dilution, you need to load a tip rack, reservoir, and 96-well plate on the deck of your Flex or OT-2. Loading labware is done with the :py:meth:`~.ProtocolContext.load_labware` method of the protocol context, which takes two arguments: the standard labware name as defined in the `Opentrons Labware Library <https://labware.opentrons.com/>`_, and the position where you'll place the labware on the robot's deck.",
        "start_char_idx": 7074,
        "end_char_idx": 9150,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c": {
      "__data__": {
        "id_": "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "14706ad3-1f24-48d4-aa97-c543af753a5a",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "25221335e9a3804a4b1af32459640f86a43de6e3fb7db6ca327c940ae61941bb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b1879021-4816-447e-bcf2-31cae39f1dc7",
            "node_type": "1",
            "metadata": {},
            "hash": "4ce81cc359960a94d81ed7218ddb61b8363f852371ff09ee4845667635babe3c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This function takes one argument, which is the *protocol context*. Many examples in these docs use the argument name ``protocol``, and sometimes they specify the argument\u2019s type:\n\n.. code-block:: python\n\n    def run(protocol: protocol_api.ProtocolContext):\n\nWith the protocol context argument named and typed, you can start calling methods on ``protocol`` to add labware and hardware.\n\nLabware\n-------\n\nFor serial dilution, you need to load a tip rack, reservoir, and 96-well plate on the deck of your Flex or OT-2. Loading labware is done with the :py:meth:`~.ProtocolContext.load_labware` method of the protocol context, which takes two arguments: the standard labware name as defined in the `Opentrons Labware Library <https://labware.opentrons.com/>`_, and the position where you'll place the labware on the robot's deck.\n\n.. tabs::\n\n    .. tab:: Flex\n\n        Here\u2019s how to load the labware on a Flex in slots D1, D2, and D3 (repeating the ``def`` statement from above to show proper indenting):\n\n        .. code-block:: python\n            :substitutions:\n\n            def run(protocol: protocol_api.ProtocolContext):\n                tips = protocol.load_labware('opentrons_flex_96_tiprack_200ul', 'D1')\n                reservoir = protocol.load_labware('nest_12_reservoir_15ml', 'D2')\n                plate = protocol.load_labware('nest_96_wellplate_200ul_flat', 'D3')\n\n        If you\u2019re using a different model of labware, find its name in the Labware Library and replace it in your code.\n        \n        Now the robot will expect to find labware in a configuration that looks like this:\n\n        .. image:: ../img/tutorial/initial-deck-map-flex.png\n            :scale: 50 %\n            :name: Initial Deck State \u2013 Flex\n            :align: center\n            :alt: Flex deck map with a tip rack in slot D1, reservoir in slot D2, and well plate in slot D3.",
        "start_char_idx": 8325,
        "end_char_idx": 10188,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b1879021-4816-447e-bcf2-31cae39f1dc7": {
      "__data__": {
        "id_": "b1879021-4816-447e-bcf2-31cae39f1dc7",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "7af1e9cd8cace141a25680fd2f4a34be21f4d55f88fc8e3f816e165d514d92b9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9fc6026e-f392-49cc-aea9-7315ef913cf4",
            "node_type": "1",
            "metadata": {},
            "hash": "f643180e7d2d3a7c727b0c72313d3b814d4ef805c1976bdc92ba12d6e6069417",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Now the robot will expect to find labware in a configuration that looks like this:\n\n        .. image:: ../img/tutorial/initial-deck-map-flex.png\n            :scale: 50 %\n            :name: Initial Deck State \u2013 Flex\n            :align: center\n            :alt: Flex deck map with a tip rack in slot D1, reservoir in slot D2, and well plate in slot D3.\n    \n    .. tab:: OT-2\n\n        Here\u2019s how to load the labware on an OT-2 in slots 1, 2, and 3 (repeating the ``def`` statement from above to show proper indenting):\n        \n        .. code-block:: python\n            :substitutions:\n \n            def run(protocol: protocol_api.ProtocolContext):\n                tips = protocol.load_labware('opentrons_96_tiprack_300ul', 1)\n                reservoir = protocol.load_labware('nest_12_reservoir_15ml', 2)\n                plate = protocol.load_labware('nest_96_wellplate_200ul_flat', 3)\n        \n        If you\u2019re using a different model of labware, find its name in the Labware Library and replace it in your code.\n       \n        Now the robot will expect to find labware in a configuration that looks like this:\n\n        .. image:: ../img/tutorial/initial-deck-map.png\n            :scale: 50 %\n            :name: Initial Deck State \u2013 OT-2\n            :align: center\n            :alt: OT-2 deck map with a tip rack in slot 1, reservoir in slot 2, and well plate in slot 3.\n\nYou may notice that these deck maps don't show where the liquids will be at the start of the protocol. Liquid definitions aren\u2019t required in Python protocols, unlike protocols made in `Protocol Designer <https://designer.opentrons.com/>`_. If you want to identify liquids, see `Labeling Liquids in Wells <https://docs.opentrons.com/v2/new_labware.html#labeling-liquids-in-wells>`_. (Sneak peek: you\u2019ll put the diluent in column 1 of the reservoir and the solution in column 2 of the reservoir.)\n\nPipettes\n--------\n\nNext you\u2019ll specify what pipette to use in the protocol.",
        "start_char_idx": 9838,
        "end_char_idx": 11784,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9fc6026e-f392-49cc-aea9-7315ef913cf4": {
      "__data__": {
        "id_": "9fc6026e-f392-49cc-aea9-7315ef913cf4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b1879021-4816-447e-bcf2-31cae39f1dc7",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "b570c08c7101cadcc852c80d18df301a87363c5d131974155c6858b2a56e0b17",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "fe612ae6-4bae-487d-921f-811daa789dc2",
            "node_type": "1",
            "metadata": {},
            "hash": "54dd8a2a9ced0fe44565b64a40315091826492d108e5e81f75e39902e3a61e2b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You may notice that these deck maps don't show where the liquids will be at the start of the protocol. Liquid definitions aren\u2019t required in Python protocols, unlike protocols made in `Protocol Designer <https://designer.opentrons.com/>`_. If you want to identify liquids, see `Labeling Liquids in Wells <https://docs.opentrons.com/v2/new_labware.html#labeling-liquids-in-wells>`_. (Sneak peek: you\u2019ll put the diluent in column 1 of the reservoir and the solution in column 2 of the reservoir.)\n\nPipettes\n--------\n\nNext you\u2019ll specify what pipette to use in the protocol. Loading a pipette is done with the :py:meth:`.load_instrument` method, which takes three arguments: the name of the pipette, the mount it\u2019s installed in, and the tip racks it should use when performing transfers. Load whatever pipette you have installed in your robot by using its :ref:`standard pipette name <new-pipette-models>`. Here\u2019s how to load the pipette in the left mount and instantiate it as a variable named ``left_pipette``:\n\n.. code-block:: python\n\n        # Flex\n        left_pipette = protocol.load_instrument('flex_1channel_1000', 'left', tip_racks=[tips])\n\n.. code-block:: python\n\n        # OT-2\n        left_pipette = protocol.load_instrument('p300_single_gen2', 'left', tip_racks=[tips])\n\nSince the pipette is so fundamental to the protocol, it might seem like you should have specified it first. But there\u2019s a good reason why pipettes are loaded after labware: you need to have already loaded ``tips`` in order to tell the pipette to use it. And now you won\u2019t have to reference ``tips`` again in your code \u2014 it\u2019s assigned to the ``left_pipette`` and the robot will know to use it when commanded to pick up tips.\n\n.. note::\n\n    You may notice that the value of ``tip_racks`` is in brackets, indicating that it\u2019s a list.",
        "start_char_idx": 11213,
        "end_char_idx": 13025,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "fe612ae6-4bae-487d-921f-811daa789dc2": {
      "__data__": {
        "id_": "fe612ae6-4bae-487d-921f-811daa789dc2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9fc6026e-f392-49cc-aea9-7315ef913cf4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "6fedd8b67b47273a805212961849a7dca6013bfe1b3dc1658bc86ec5e5ecbc69",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f259fd6c-516e-47cd-8f1c-4d9b51642a5c",
            "node_type": "1",
            "metadata": {},
            "hash": "ef391d8d5824940bd4a189db197092053909c6f0504919266e21c56cf4461cc3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But there\u2019s a good reason why pipettes are loaded after labware: you need to have already loaded ``tips`` in order to tell the pipette to use it. And now you won\u2019t have to reference ``tips`` again in your code \u2014 it\u2019s assigned to the ``left_pipette`` and the robot will know to use it when commanded to pick up tips.\n\n.. note::\n\n    You may notice that the value of ``tip_racks`` is in brackets, indicating that it\u2019s a list. This serial dilution protocol only uses one tip rack, but some protocols require more tips, so you can assign them to a pipette all at once, like ``tip_racks=[tips1, tips2]``.\n\n.. _tutorial-commands:\n\nCommands\n--------\n\nFinally, all of your labware and hardware is in place, so it\u2019s time to give the robot pipetting commands. The required steps of the serial dilution process break down into three main phases:\n\n1. Measure out equal amounts of diluent from the reservoir to every well on the plate.\n2. Measure out equal amounts of solution from the reservoir into wells in the first column of the plate.\n3. Move a portion of the combined liquid from column 1 to 2, then from column 2 to 3, and so on all the way to column 12.\n\nThanks to the flexibility of the API's :py:meth:`.transfer` method, which combines many :ref:`building block commands <v2-atomic-commands>` into one call, each of these phases can be accomplished with a single line of code! You\u2019ll just have to write a few more lines of code to repeat the process for as many rows as you want to fill.\n\nLet\u2019s start with the diluent. This phase takes a larger quantity of liquid and spreads it equally to many wells. ``transfer()`` can handle this all at once, because it accepts either a single well or a list of wells for its source and destination:\n\n.. code-block:: python\n\n        left_pipette.transfer(100, reservoir['A1'], plate.wells())\n\nBreaking down these single lines of code shows the power of :ref:`complex commands <v2-complex-commands>`. The first argument is the amount to transfer to each destination, 100 uL.",
        "start_char_idx": 12602,
        "end_char_idx": 14610,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f259fd6c-516e-47cd-8f1c-4d9b51642a5c": {
      "__data__": {
        "id_": "f259fd6c-516e-47cd-8f1c-4d9b51642a5c",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "fe612ae6-4bae-487d-921f-811daa789dc2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "c5a926cda9f4d9452af5815ede5b0ec9cd30e1f554b155cd40e71b1b51d22f98",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "fe88bd89-3d04-441b-bcee-67db0c8e3da2",
            "node_type": "1",
            "metadata": {},
            "hash": "d7480c3c4f193fada03b7be14e9690e65bf4db2f6df902d0afa03b90bbab773e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You\u2019ll just have to write a few more lines of code to repeat the process for as many rows as you want to fill.\n\nLet\u2019s start with the diluent. This phase takes a larger quantity of liquid and spreads it equally to many wells. ``transfer()`` can handle this all at once, because it accepts either a single well or a list of wells for its source and destination:\n\n.. code-block:: python\n\n        left_pipette.transfer(100, reservoir['A1'], plate.wells())\n\nBreaking down these single lines of code shows the power of :ref:`complex commands <v2-complex-commands>`. The first argument is the amount to transfer to each destination, 100 uL. The second argument is the source, column 1 of the reservoir (which is still specified with grid-style coordinates as ``A1`` \u2014 a reservoir only has an A row). The third argument is the destination. Here, calling the :py:meth:`.wells` method of ``plate`` returns a list of *every well*, and the command will apply to all of them.\n\n.. image:: ../img/tutorial/diluent.gif\n    :name: Transfer of diluent to plate\n    :align: center\n    :alt: Animation showing an empty well plate followed by the plate with diluent in every well.\n\nIn plain English, you've instructed the robot, \u201cFor every well on the plate, aspirate 100 uL of fluid from column 1 of the reservoir and dispense it in the well.\u201d That\u2019s how we understand this line of code as scientists, yet the robot will understand and execute it as nearly 200 discrete actions.\n\nNow it\u2019s time to start mixing in the solution. To do this row by row, nest the commands in a ``for`` loop: \n\n.. code-block:: python\n\n        for i in range(8):\n            row = plate.rows()[i]\n\nUsing Python's built-in :py:class:`range` class is an easy way to repeat this block 8 times, once for each row. This also lets you use the repeat index ``i`` with ``plate.rows()`` to keep track of the current row.",
        "start_char_idx": 13977,
        "end_char_idx": 15845,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "fe88bd89-3d04-441b-bcee-67db0c8e3da2": {
      "__data__": {
        "id_": "fe88bd89-3d04-441b-bcee-67db0c8e3da2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f259fd6c-516e-47cd-8f1c-4d9b51642a5c",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "91efcfc712bcd3b0566aab3758a07d0d77a66721e6e85c82b64c636bd6f9f870",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "180aaef6-1850-4f67-b268-11396da976f4",
            "node_type": "1",
            "metadata": {},
            "hash": "e6a0d8dd71449fb40038af75a141a192c26e3cb0ad4c5673448fe04c1f775eb6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In plain English, you've instructed the robot, \u201cFor every well on the plate, aspirate 100 uL of fluid from column 1 of the reservoir and dispense it in the well.\u201d That\u2019s how we understand this line of code as scientists, yet the robot will understand and execute it as nearly 200 discrete actions.\n\nNow it\u2019s time to start mixing in the solution. To do this row by row, nest the commands in a ``for`` loop: \n\n.. code-block:: python\n\n        for i in range(8):\n            row = plate.rows()[i]\n\nUsing Python's built-in :py:class:`range` class is an easy way to repeat this block 8 times, once for each row. This also lets you use the repeat index ``i`` with ``plate.rows()`` to keep track of the current row.\n\n.. image:: ../img/tutorial/row-tracking.gif\n    :name: Tracking current row\n    :align: center\n    :alt: The well plate, with row A annotated as \"i = 0\".\n\nIn each row, you first need to add solution. This will be similar to what you did with the diluent, but putting it only in column 1 of the plate. It\u2019s best to mix the combined solution and diluent thoroughly, so add the optional ``mix_after`` argument to ``transfer()``:\n\n.. code-block:: python\n            \n        left_pipette.transfer(100, reservoir['A2'], row[0], mix_after(3, 50))\n\nAs before, the first argument specifies to transfer 100 uL. The second argument is the source, column 2 of the reservoir. The third argument is the destination, the element at index 0 of the current ``row``. Since Python lists are zero-indexed, but columns on labware start numbering at 1, this will be well A1 on the first time through the loop, B1 the second time, and so on. The fourth argument specifies to mix 3 times with 50 uL of fluid each time.\n\n.. image:: ../img/tutorial/solution.gif\n    :name: Solution added to A1\n    :align: center\n    :alt: The well plate, with blue solution added to well A1.\n\nFinally, it\u2019s time to dilute the solution down the row.",
        "start_char_idx": 15138,
        "end_char_idx": 17054,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "180aaef6-1850-4f67-b268-11396da976f4": {
      "__data__": {
        "id_": "180aaef6-1850-4f67-b268-11396da976f4",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "fe88bd89-3d04-441b-bcee-67db0c8e3da2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "3e38e1f7c265cbc765278d65445d4cb0d76acb58eacb88adbc6a822945f67a6d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f04b18f7-13be-4067-9ed6-b3324f5a06d0",
            "node_type": "1",
            "metadata": {},
            "hash": "e25fd684f37f8ef6c3a412c89879fc21348d79cf507269a7fccef66cff88225c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The second argument is the source, column 2 of the reservoir. The third argument is the destination, the element at index 0 of the current ``row``. Since Python lists are zero-indexed, but columns on labware start numbering at 1, this will be well A1 on the first time through the loop, B1 the second time, and so on. The fourth argument specifies to mix 3 times with 50 uL of fluid each time.\n\n.. image:: ../img/tutorial/solution.gif\n    :name: Solution added to A1\n    :align: center\n    :alt: The well plate, with blue solution added to well A1.\n\nFinally, it\u2019s time to dilute the solution down the row. One approach would be to nest another ``for`` loop here, but instead let\u2019s use another feature of the ``transfer()`` method, taking lists as the source and destination arguments: \n\n.. code-block:: python\n\n        left_pipette.transfer(100, row[:11], row[1:], mix_after(3, 50))\n\nThere\u2019s some Python shorthand here, so let\u2019s unpack it. You can get a range of indices from a list using the colon ``:`` operator, and omitting it at either end means \u201cfrom the beginning\u201d or \u201cuntil the end\u201d of the list. So the source is ``row[:11]``, from the beginning of the row until its 11th item. And the destination is ``row[1:]``, from index 1 (column 2!) until the end. Since both of these lists have 11 items, ``transfer()`` will *step through them in parallel*, and they\u2019re constructed so when the source is 0, the destination is 1; when the source is 1, the destination is 2; and so on. This condenses all of the subsequent transfers down the row into a single line of code.\n\n.. image:: ../img/tutorial/stepwise-transfer.gif\n    :name: Stepwise transfer of solution down a row\n    :align: center\n    :alt: Animation showing transfer from A1 to A2, A2 to A3, and so on. Each step corresponds to an item in the source and destination lists.",
        "start_char_idx": 16449,
        "end_char_idx": 18282,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f04b18f7-13be-4067-9ed6-b3324f5a06d0": {
      "__data__": {
        "id_": "f04b18f7-13be-4067-9ed6-b3324f5a06d0",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "180aaef6-1850-4f67-b268-11396da976f4",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ef87f7e36009e1fd2feb15771231b604db3b308d12bbb86b5ebb35453b128a46",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "12008c04-5842-43b0-a2eb-3d6fc544a1cf",
            "node_type": "1",
            "metadata": {},
            "hash": "f474b02de7af25f8445a4a5fac7eee9227a5de54fb04bb1e5a65cd7da420d95f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So the source is ``row[:11]``, from the beginning of the row until its 11th item. And the destination is ``row[1:]``, from index 1 (column 2!) until the end. Since both of these lists have 11 items, ``transfer()`` will *step through them in parallel*, and they\u2019re constructed so when the source is 0, the destination is 1; when the source is 1, the destination is 2; and so on. This condenses all of the subsequent transfers down the row into a single line of code.\n\n.. image:: ../img/tutorial/stepwise-transfer.gif\n    :name: Stepwise transfer of solution down a row\n    :align: center\n    :alt: Animation showing transfer from A1 to A2, A2 to A3, and so on. Each step corresponds to an item in the source and destination lists. The color of liquid gets paler with each step from left to right.\n    \nAll that remains is for the loop to repeat these steps, filling each row down the plate.\n\n.. image:: ../img/tutorial/row-loop.gif\n    :name: Looping over each row\n    :align: center\n    :alt: Animation showing each row of the plate being filled, from A (i = 0) to H (i = 7).\n\nThat\u2019s it! If you\u2019re using a single-channel pipette, you\u2019re ready to try out your protocol. \n\n8-Channel Pipette\n-----------------\n\nIf you\u2019re using an 8-channel pipette, you\u2019ll need to make a couple tweaks to the single-channel code from above. Most importantly, whenever you target a well in row A of a plate with an 8-channel pipette, it will move its topmost tip to row A, lining itself up over the entire column.",
        "start_char_idx": 17553,
        "end_char_idx": 19045,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "12008c04-5842-43b0-a2eb-3d6fc544a1cf": {
      "__data__": {
        "id_": "12008c04-5842-43b0-a2eb-3d6fc544a1cf",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f04b18f7-13be-4067-9ed6-b3324f5a06d0",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e6dda4acd73c724bd0e4073f49e7441a954ff3e653550196dc3e2678889b54cf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e8532359-9caa-4ec8-882e-9a1a355de9bc",
            "node_type": "1",
            "metadata": {},
            "hash": "2538f4ddfb68e1740fd3f2820b21caa330bf9df96b09b0bfa8e1c45577748f7b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The color of liquid gets paler with each step from left to right.\n    \nAll that remains is for the loop to repeat these steps, filling each row down the plate.\n\n.. image:: ../img/tutorial/row-loop.gif\n    :name: Looping over each row\n    :align: center\n    :alt: Animation showing each row of the plate being filled, from A (i = 0) to H (i = 7).\n\nThat\u2019s it! If you\u2019re using a single-channel pipette, you\u2019re ready to try out your protocol. \n\n8-Channel Pipette\n-----------------\n\nIf you\u2019re using an 8-channel pipette, you\u2019ll need to make a couple tweaks to the single-channel code from above. Most importantly, whenever you target a well in row A of a plate with an 8-channel pipette, it will move its topmost tip to row A, lining itself up over the entire column.\n\nThus, when adding the diluent, instead of targeting every well on the plate, you should only target the top row:\n\n.. code-block:: python\n\n        left_pipette.transfer(100, reservoir['A1'], plate.rows()[0]) \n\nAnd by accessing an entire column at once, the 8-channel pipette effectively implements the ``for`` loop in hardware, so you\u2019ll need to remove it: \n\n.. code-block:: python\n    \n    row = plate.rows()[0]\n    left_pipette.transfer(100, reservoir['A2'], row[0], mix_after=(3, 50))\n    left_pipette.transfer(100, row[:11], row[1:], mix_after=(3, 50))\n\nInstead of tracking the current row in the ``row`` variable, this code sets it to always be row A (index 0). \n\n*****************\nTry Your Protocol\n*****************\n\nThere are two ways to try out your protocol: simulation on your computer, or a live run on a Flex or OT-2. Even if you plan to run your protocol on a robot, it\u2019s a good idea to check the simulation output first.",
        "start_char_idx": 18283,
        "end_char_idx": 19981,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e8532359-9caa-4ec8-882e-9a1a355de9bc": {
      "__data__": {
        "id_": "e8532359-9caa-4ec8-882e-9a1a355de9bc",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "12008c04-5842-43b0-a2eb-3d6fc544a1cf",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "ef9175f4f6917d243b2efb7a4c23c402a17dbea2c2acb0e9d0c59820bfc516c0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "93cb7706-5e09-4305-8e63-64adc3f8c5ec",
            "node_type": "1",
            "metadata": {},
            "hash": "0ae320615e961f68c2c7cc1b9832cf9d8243bb5e9e4ed540a1be3ff99d8ccfeb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "*****************\nTry Your Protocol\n*****************\n\nThere are two ways to try out your protocol: simulation on your computer, or a live run on a Flex or OT-2. Even if you plan to run your protocol on a robot, it\u2019s a good idea to check the simulation output first.\n\nIf you get any errors in simulation, or you don't get the outcome you expected when running your protocol, you can check your code against these reference protocols on GitHub:\n\n- `Flex: Single-channel serial dilution <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/dilution_tutorial_flex.py>`_\n- `Flex: 8-channel serial dilution <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/dilution_tutorial_multi_flex.py>`_\n- `OT-2: Single-channel serial dilution <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/dilution_tutorial.py>`_\n- `OT-2: 8-channel serial dilution <https://github.com/Opentrons/opentrons/blob/edge/api/docs/v2/example_protocols/dilution_tutorial_multi.py>`_\n\n.. _tutorial-simulate:\n\nIn Simulation\n^^^^^^^^^^^^^\n.. suggest linking to pip install rather than just using text in ``code`` format. Help reader find resource\n\nSimulation doesn\u2019t require having a robot connected to your computer. You just need to install the `Opentrons Python module <https://pypi.org/project/opentrons/>`_ from Pip (``pip install opentrons``). This will give you access to the ``opentrons_simulate`` command-line utility (``opentrons_simulate.exe`` on Windows).\n\nTo see a text preview of the steps your Flex or OT-2 will take, use the change directory (``cd``) command to navigate to the location of your saved protocol file and run:\n\n.. prompt:: bash\n\n    opentrons_simulate dilution-tutorial.py\n\nThis should generate a lot of output! As written, the protocol has about 1000 steps.",
        "start_char_idx": 19715,
        "end_char_idx": 21550,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "93cb7706-5e09-4305-8e63-64adc3f8c5ec": {
      "__data__": {
        "id_": "93cb7706-5e09-4305-8e63-64adc3f8c5ec",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e8532359-9caa-4ec8-882e-9a1a355de9bc",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "19aa80dc5aff2f062a92fd5ce7d4756e1ff903281c9c30d61e66951fe46dd0eb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1dc50e96-2e03-4a1c-878a-2124b61040aa",
            "node_type": "1",
            "metadata": {},
            "hash": "3aa555e1c435052b4cc9d5aa44a911f1886a9e901418300ab13289a498228330",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Help reader find resource\n\nSimulation doesn\u2019t require having a robot connected to your computer. You just need to install the `Opentrons Python module <https://pypi.org/project/opentrons/>`_ from Pip (``pip install opentrons``). This will give you access to the ``opentrons_simulate`` command-line utility (``opentrons_simulate.exe`` on Windows).\n\nTo see a text preview of the steps your Flex or OT-2 will take, use the change directory (``cd``) command to navigate to the location of your saved protocol file and run:\n\n.. prompt:: bash\n\n    opentrons_simulate dilution-tutorial.py\n\nThis should generate a lot of output! As written, the protocol has about 1000 steps. If you\u2019re curious how long that will take, you can use an experimental feature to estimate the time:\n\n.. prompt:: bash\n\n    opentrons_simulate dilution-tutorial.py -e -o nothing\n\nThe ``-e`` flag estimates duration, and ``-o nothing`` suppresses printing the run log. This indicates that using a single-channel pipette for serial dilution across the whole plate will take about half an hour \u2014 plenty of time to grab a coffee while your robot pipettes for you! \u2615\ufe0f \n\nIf that\u2019s too long, you can always cancel your run partway through or modify ``for i in range(8)`` to loop through fewer rows.\n\nOn a Robot\n^^^^^^^^^^\n\nThe simplest way to run your protocol on a Flex or OT-2 is to use the `Opentrons App <https://opentrons.com/ot-app>`_. When you first launch the Opentrons App, you will see the Protocols screen. (Click **Protocols** in the left sidebar to access it at any other time.) Click **Import** in the top right corner to reveal the Import a Protocol pane. Then click **Choose File** and find your protocol in the system file picker, or drag and drop your protocol file into the well.\n\nYou should see \u201cProtocol - Serial Dilution Tutorial\u201d (or whatever ``protocolName`` you entered in the metadata) in the list of protocols. Click the three-dot menu (\u22ee) for your protocol and choose **Start setup**.",
        "start_char_idx": 20883,
        "end_char_idx": 22855,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1dc50e96-2e03-4a1c-878a-2124b61040aa": {
      "__data__": {
        "id_": "1dc50e96-2e03-4a1c-878a-2124b61040aa",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "93cb7706-5e09-4305-8e63-64adc3f8c5ec",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "93379371b6deb387307110524dd6bf6f950242a41e0b01f86ea13b3328d53590",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9cd00511-baec-412a-b5e7-cecc9b48ab69",
            "node_type": "1",
            "metadata": {},
            "hash": "0ecff7dedd66227345fc803485580059ae16284c60bc70b3d87a94adb3ee2ba9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "On a Robot\n^^^^^^^^^^\n\nThe simplest way to run your protocol on a Flex or OT-2 is to use the `Opentrons App <https://opentrons.com/ot-app>`_. When you first launch the Opentrons App, you will see the Protocols screen. (Click **Protocols** in the left sidebar to access it at any other time.) Click **Import** in the top right corner to reveal the Import a Protocol pane. Then click **Choose File** and find your protocol in the system file picker, or drag and drop your protocol file into the well.\n\nYou should see \u201cProtocol - Serial Dilution Tutorial\u201d (or whatever ``protocolName`` you entered in the metadata) in the list of protocols. Click the three-dot menu (\u22ee) for your protocol and choose **Start setup**. \n\nIf you have any remaining calibration tasks to do, you can finish them up here. Below the calibration section is a preview of the initial deck state. Optionally you can run Labware Position Check, or you can go ahead and click **Proceed to Run**.\n\nOn the Run tab, you can double-check the Run Preview, which is similar to the command-line simulation output. Make sure all your labware and liquids are in the right place, and then click **Start run**. The run log will update in real time as your robot proceeds through the steps. \n\nWhen it\u2019s all done, check the results of your serial dilution procedure \u2014 you should have a beautiful dye gradient running across the plate!\n\n.. image:: ../img/tutorial/serial-dilution-result.jpg\n    :name: Result of Serial Dilution\n    :align: center\n    :alt: An overhead view of a well plate on the metal OT-2 deck, with dark blue liquid in the leftmost column smoothly transitioning to very light blue in the rightmost column.\n\n**********\nNext Steps\n**********\n\nThis tutorial has relied heavily on the ``transfer()`` method, but there's much more that the Python Protocol API can do. Many advanced applications use :ref:`building block commands <v2-atomic-commands>` for finer control over the robot. These commands let you aspirate and dispense separately, add air gaps, blow out excess liquid, move the pipette to any location, and more.",
        "start_char_idx": 22143,
        "end_char_idx": 24233,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9cd00511-baec-412a-b5e7-cecc9b48ab69": {
      "__data__": {
        "id_": "9cd00511-baec-412a-b5e7-cecc9b48ab69",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
          "file_name": "tutorial.rst",
          "file_size": 24603,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "ca6eb3b7-7d86-4cd1-858f-5d13ead632da",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "09d8c56b0c51f4fdf6f24454ff4be96f092b6ee4d7e6c4ce798e447ada3e59d8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1dc50e96-2e03-4a1c-878a-2124b61040aa",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1493b5f36a87d18171921658f493e7ee806558b8cf969c45e94ca67fbd648783",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "56d01d77-8e38-448c-b416-764d64927354",
            "node_type": "1",
            "metadata": {},
            "hash": "7e2a9d3b8dfe61771c6b6889eb1f9fd87694cda3dc7455d82b8752cee9cf7660",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When it\u2019s all done, check the results of your serial dilution procedure \u2014 you should have a beautiful dye gradient running across the plate!\n\n.. image:: ../img/tutorial/serial-dilution-result.jpg\n    :name: Result of Serial Dilution\n    :align: center\n    :alt: An overhead view of a well plate on the metal OT-2 deck, with dark blue liquid in the leftmost column smoothly transitioning to very light blue in the rightmost column.\n\n**********\nNext Steps\n**********\n\nThis tutorial has relied heavily on the ``transfer()`` method, but there's much more that the Python Protocol API can do. Many advanced applications use :ref:`building block commands <v2-atomic-commands>` for finer control over the robot. These commands let you aspirate and dispense separately, add air gaps, blow out excess liquid, move the pipette to any location, and more. For protocols that use :ref:`Opentrons hardware modules <new_modules>`, there are methods to control their behavior. And all of the API's classes and methods are catalogued in the :ref:`API Reference <protocol-api-reference>`.",
        "start_char_idx": 23390,
        "end_char_idx": 24460,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "56d01d77-8e38-448c-b416-764d64927354": {
      "__data__": {
        "id_": "56d01d77-8e38-448c-b416-764d64927354",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9cd00511-baec-412a-b5e7-cecc9b48ab69",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
              "file_name": "tutorial.rst",
              "file_size": 24603,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "1a552fae5d8d53e686d935cb9d03ac6eb6e5031c108b8470f2a6cba910418661",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2caeef28-e32c-4545-b62e-d223747cd700",
            "node_type": "1",
            "metadata": {},
            "hash": "502c1fcf1f065d2fcd12dc3a994bcf5708f24da3ecf3ba3f91a04e5aca346dc0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ":og:description: How to choose the right Python API version for your protocol. \n\n.. _v2-versioning:\n\n**********\nVersioning\n**********\n\nThe Python Protocol API has its own versioning system, which is separate from the versioning system used for the robot software and the Opentrons App. This allows protocols to run on newer robot software versions without modification.\n\nMajor and Minor Versions\n========================\n\nThe API uses a major and minor version number and does not use patch version numbers. For instance, major version 2 and minor version 0 is written as ``2.0``. Versions are not decimal numbers, so ``2.10`` indicates major version 2 and minor version 10. The Python Protocol API version will only increase based on changes that affect protocol behavior.\n\nThe major version of the API increases whenever there are significant structural or behavioral changes to protocols. For instance, major version 2 of the API was introduced because it required protocols to have a ``run`` function that takes a ``protocol`` argument rather than importing the ``robot``, ``instruments``, and ``labware`` modules. Protocols written with major version 1 of the API will not run without modification in major version 2. A similar level of structural change would require a major version 3. This documentation only deals with features found in major version 2 of the API; see the `archived version 1 documentation <https://docs.opentrons.com/v1/index.html>`_ for information on older protocols.\n\nThe minor version of the API increases whenever there is new functionality that might change the way a protocol is written, or when a behavior changes in one aspect of the API but does not affect all protocols. For instance, adding support for a new hardware module, adding new parameters for a function, or deprecating a feature would increase the minor version of the API.\n\n.. _specifying-versions:\n\nSpecifying Versions\n===================\n\nYou must specify the API version you are targeting in your Python protocol.",
        "start_char_idx": 0,
        "end_char_idx": 2016,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2caeef28-e32c-4545-b62e-d223747cd700": {
      "__data__": {
        "id_": "2caeef28-e32c-4545-b62e-d223747cd700",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "56d01d77-8e38-448c-b416-764d64927354",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "61d9d90c69f9fdbdd0a95171eec75f8f2b60e829c9bf764aee1736f9f95e498f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "94899737-e97e-4b3c-b374-4aae60f724be",
            "node_type": "1",
            "metadata": {},
            "hash": "b5e1654a5a8fa3c650bd18ab90bc5a878fa6024a836606ccb749bd62f68b6807",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Protocols written with major version 1 of the API will not run without modification in major version 2. A similar level of structural change would require a major version 3. This documentation only deals with features found in major version 2 of the API; see the `archived version 1 documentation <https://docs.opentrons.com/v1/index.html>`_ for information on older protocols.\n\nThe minor version of the API increases whenever there is new functionality that might change the way a protocol is written, or when a behavior changes in one aspect of the API but does not affect all protocols. For instance, adding support for a new hardware module, adding new parameters for a function, or deprecating a feature would increase the minor version of the API.\n\n.. _specifying-versions:\n\nSpecifying Versions\n===================\n\nYou must specify the API version you are targeting in your Python protocol. In all minor versions, you can do this with the ``apiLevel`` key in the ``metadata`` dictionary, alongside any other metadata elements:\n\n.. code-block:: python\n  :substitutions:\n\n   from opentrons import protocol_api\n\n   metadata = {\n       'apiLevel': '|apiLevel|',\n       'author': 'A. Biologist'}\n\n   def run(protocol: protocol_api.ProtocolContext):\n       protocol.comment('Hello, world!')\n       \nFrom version 2.15 onward, you can specify ``apiLevel`` in the ``requirements`` dictionary instead:\n\n.. code-block:: python\n  :substitutions:\n\n   from opentrons import protocol_api\n\n   metadata = {'author': 'A. Biologist'}\n   requirements = {'apiLevel': '2.15', 'robotType': 'Flex'}\n\n   def run(protocol: protocol_api.ProtocolContext):\n       protocol.comment('Hello, Flex!')\n\nChoose only one of these places to specify ``apiLevel``. If you put it in neither or both places, you will not be able to simulate or run your protocol.\n\nThe version you specify determines the features and behaviors available to your protocol. For example, support for the Heater-Shaker Module was added in version 2.13, so you can't specify a lower version and then call ``HeaterShakerContext`` methods without causing an error.",
        "start_char_idx": 1119,
        "end_char_idx": 3224,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "94899737-e97e-4b3c-b374-4aae60f724be": {
      "__data__": {
        "id_": "94899737-e97e-4b3c-b374-4aae60f724be",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2caeef28-e32c-4545-b62e-d223747cd700",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "67ef9716b0f47ade824da0a4f9f0c4310bcf566a29aef890de4721f38641032b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2",
            "node_type": "1",
            "metadata": {},
            "hash": "daa9b9ae83bdb5a52141c3faa9a126ec02838d84bf5e1b6caa3c6feb065846e0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "From version 2.15 onward, you can specify ``apiLevel`` in the ``requirements`` dictionary instead:\n\n.. code-block:: python\n  :substitutions:\n\n   from opentrons import protocol_api\n\n   metadata = {'author': 'A. Biologist'}\n   requirements = {'apiLevel': '2.15', 'robotType': 'Flex'}\n\n   def run(protocol: protocol_api.ProtocolContext):\n       protocol.comment('Hello, Flex!')\n\nChoose only one of these places to specify ``apiLevel``. If you put it in neither or both places, you will not be able to simulate or run your protocol.\n\nThe version you specify determines the features and behaviors available to your protocol. For example, support for the Heater-Shaker Module was added in version 2.13, so you can't specify a lower version and then call ``HeaterShakerContext`` methods without causing an error. This protects you from accidentally using features not present in your specified API version, and keeps your protocol portable between API versions.\n\nWhen choosing an API level, consider what features you need and how widely you plan to share your protocol. Throughout the Python Protocol API documentation, there are version statements indicating when elements (features, function calls, available properties, etc.) were introduced. Keep these in mind when specifying your protocol's API version. Version statements look like this:\n\n..\n\nOn the one hand, using the highest available version will give your protocol access to all the latest :ref:`features and fixes <version-notes>`. On the other hand, using the lowest possible version lets the protocol work on a wider range of robot software versions. For example, a protocol that uses the Heater-Shaker and specifies version 2.13 of the API should work equally well on a robot running version 6.1.0 or 6.2.0 of the robot software. Specifying version 2.14 would limit the protocol to robots running 6.2.0 or higher.\n\n.. note::\n\n    Python protocols with an ``apiLevel`` of 2.14 or higher can't currently be simulated with the ``opentrons_simulate`` command-line tool, the :py:func:`opentrons.simulate.simulate` function, or the :py:func:`opentrons.simulate.get_protocol_api` function.",
        "start_char_idx": 2419,
        "end_char_idx": 4561,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2": {
      "__data__": {
        "id_": "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "94899737-e97e-4b3c-b374-4aae60f724be",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "6f8e4ca3d198fb6aa689300ef4a12b9e95f95e24bfc9759972442dc77344fb44",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c485d342-3f7f-42fc-acf5-2b16c6305c76",
            "node_type": "1",
            "metadata": {},
            "hash": "710f47b68d0480e7de966f1ee9fbeb39fefe6ccb9667b870d47e63645c840bf4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "On the other hand, using the lowest possible version lets the protocol work on a wider range of robot software versions. For example, a protocol that uses the Heater-Shaker and specifies version 2.13 of the API should work equally well on a robot running version 6.1.0 or 6.2.0 of the robot software. Specifying version 2.14 would limit the protocol to robots running 6.2.0 or higher.\n\n.. note::\n\n    Python protocols with an ``apiLevel`` of 2.14 or higher can't currently be simulated with the ``opentrons_simulate`` command-line tool, the :py:func:`opentrons.simulate.simulate` function, or the :py:func:`opentrons.simulate.get_protocol_api` function. If your protocol doesn't rely on new functionality added after version 2.13, use a lower ``apiLevel``. For protocols that require 2.14 or higher, analyze your protocol with the Opentrons App instead.\n\n\nMaximum Supported Versions\n==========================\n\nThe maximum supported API version for your robot is listed in the Opentrons App under **Robots** > your robot > **Robot Settings** > **Advanced**. Before version 6.0.0 of the app, the same information was listed on your robot's **Information** card.\n\nIf you upload a protocol that specifies a higher API level than the maximum supported, your robot won't be able to analyze or run your protocol. You can increase the maximum supported version by updating your robot software and Opentrons App. \n\nOpentrons robots running the latest software (7.0.0) support the following version ranges: \n\n    * **Flex:** version 2.15.\n    * **OT-2:** versions 2.0\u2013|apiLevel|.\n\n\n.. _version-table:\n\nAPI and Robot Software Versions\n===============================\n\nThis table lists the correspondence between Protocol API versions and robot software versions.",
        "start_char_idx": 3908,
        "end_char_idx": 5660,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c485d342-3f7f-42fc-acf5-2b16c6305c76": {
      "__data__": {
        "id_": "c485d342-3f7f-42fc-acf5-2b16c6305c76",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "89a3eb490289a0bab195b45006798e90bbfc2db14400c2e177cc799c837b31b5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "58d991d1-5ea2-42ee-83fb-faf19c4bae58",
            "node_type": "1",
            "metadata": {},
            "hash": "b181b97848019003db6f5cb0c0a76019430d08a5ad5c340041be461b025b3542",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Maximum Supported Versions\n==========================\n\nThe maximum supported API version for your robot is listed in the Opentrons App under **Robots** > your robot > **Robot Settings** > **Advanced**. Before version 6.0.0 of the app, the same information was listed on your robot's **Information** card.\n\nIf you upload a protocol that specifies a higher API level than the maximum supported, your robot won't be able to analyze or run your protocol. You can increase the maximum supported version by updating your robot software and Opentrons App. \n\nOpentrons robots running the latest software (7.0.0) support the following version ranges: \n\n    * **Flex:** version 2.15.\n    * **OT-2:** versions 2.0\u2013|apiLevel|.\n\n\n.. _version-table:\n\nAPI and Robot Software Versions\n===============================\n\nThis table lists the correspondence between Protocol API versions and robot software versions.\n\n+-------------+------------------------------+\n| API Version | Introduced in Robot Software |\n+=============+==============================+\n|     2.15    |          7.0.0               |\n+-------------+------------------------------+\n|     2.14    |          6.3.0               |\n+-------------+------------------------------+\n|     2.13    |          6.1.0               |\n+-------------+------------------------------+\n|     2.12    |          5.0.0               |\n+-------------+------------------------------+\n|     2.11    |          4.4.0               |\n+-------------+------------------------------+\n|     2.10    |          4.3.0               |\n+-------------+------------------------------+\n|     2.9     |          4.1.0               |\n+-------------+------------------------------+\n|     2.8     |          4.0.0               |\n+-------------+------------------------------+\n|     2.7     |          3.21.0              |\n+-------------+------------------------------+\n|     2.6     |          3.20.0              |\n+-------------+------------------------------+\n|     2.5     |          3.19.0              |\n+-------------+------------------------------+\n|     2.4     |          3.17.1              |\n+-------------+------------------------------+\n|     2.3     |          3.17.0              |\n+-------------+------------------------------+\n|     2.2     |          3.16.0              |\n+-------------+------------------------------+\n|     2.1     |          3.15.2              |\n+-------------+------------------------------+\n|     2.0     |          3.14.0              |\n+-------------+------------------------------+\n|     1.0     |          3.0.0               |\n+-------------+------------------------------+\n\n.. _version-notes:\n\nChanges in API Versions\n=======================\n\nVersion 2.15\n------------\n\nThis version introduces support for the Opentrons Flex robot, instruments, modules, and labware.",
        "start_char_idx": 4764,
        "end_char_idx": 7594,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "58d991d1-5ea2-42ee-83fb-faf19c4bae58": {
      "__data__": {
        "id_": "58d991d1-5ea2-42ee-83fb-faf19c4bae58",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c485d342-3f7f-42fc-acf5-2b16c6305c76",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "9a387cafa830686ea517034a3f118ffaeb6fcb993c168c12a77a80079ba87d4a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "16f4ca63-7781-4c83-9db4-ef0e8fd2a398",
            "node_type": "1",
            "metadata": {},
            "hash": "a25f0162f0d732261f8e1fd70834f1fea46d8a72fad1924cd760493213d9f077",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- Flex features\n\n  - Write protocols for Opentrons Flex by declaring ``\"robotType\": \"Flex\"`` in the new ``requirements`` dictionary. See the :ref:`examples in the Tutorial <tutorial-requirements>`.\n  \n  - :py:meth:`.load_instrument` supports loading Flex 1-, 8-, and 96-channel pipettes. See :ref:`new-create-pipette`.\n  \n  - The new :py:meth:`.move_labware` method can move labware automatically using the Flex Gripper. You can also move labware manually on Flex.\n  \n  - :py:meth:`.load_module` supports loading the :ref:`Magnetic Block <magnetic-block>`. \n  \n  - The API does not enforce placement restrictions for the Heater-Shaker module on Flex, because it is installed below-deck in a module caddy. Pipetting restrictions are still in place when the Heater-Shaker is shaking or its labware latch is open.\n  \n  - The new :py:meth:`.configure_for_volume` method can place Flex 50 uL pipettes in a low-volume mode for dispensing very small volumes of liquid. See :ref:`pipette-volume-modes`.\n  \n- Flex and OT-2 features\n\n  - Optionally specify ``apiLevel`` in the new ``requirements`` dictionary (otherwise, specify it in ``metadata``). \n  \n  - Optionally specify ``\"robotType\": \"OT-2\"`` in ``requirements``.\n\n  - Use coordinates or numbers to specify :ref:`deck slots <deck-slots>`. These formats match physical labels on Flex and OT-2, but you can use either system, regardless of ``robotType``.\n  \n  - The new :py:meth:`.load_adapter` method lets you load adapters and labware separately on modules, and lets you load adapters directly in deck slots. See :ref:`labware-on-adapters`.\n  \n  - Move labware manually using :py:meth:`.move_labware`, without having to stop your protocol. \n  \n  - Manual labware moves support moving to or from the new :py:obj:`~.protocol_api.OFF_DECK` location (outside of the robot).",
        "start_char_idx": 7596,
        "end_char_idx": 9413,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "16f4ca63-7781-4c83-9db4-ef0e8fd2a398": {
      "__data__": {
        "id_": "16f4ca63-7781-4c83-9db4-ef0e8fd2a398",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "58d991d1-5ea2-42ee-83fb-faf19c4bae58",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "0c9f00efe77120d6a11733b4bab5a78d85d1ca80a271e3cd2849efe093e61325",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "41f41352-1116-41d4-9b74-7543016929a3",
            "node_type": "1",
            "metadata": {},
            "hash": "d6b6e5c2073a742a899dc461bfb109b22f0cce61d155dc46f39c145db271aa40",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- Optionally specify ``\"robotType\": \"OT-2\"`` in ``requirements``.\n\n  - Use coordinates or numbers to specify :ref:`deck slots <deck-slots>`. These formats match physical labels on Flex and OT-2, but you can use either system, regardless of ``robotType``.\n  \n  - The new :py:meth:`.load_adapter` method lets you load adapters and labware separately on modules, and lets you load adapters directly in deck slots. See :ref:`labware-on-adapters`.\n  \n  - Move labware manually using :py:meth:`.move_labware`, without having to stop your protocol. \n  \n  - Manual labware moves support moving to or from the new :py:obj:`~.protocol_api.OFF_DECK` location (outside of the robot).\n  \n  - :py:meth:`.load_labware` also accepts :py:obj:`~.protocol_api.OFF_DECK` as a location. This lets you prepare labware to be moved onto the deck later in a protocol.  \n  \n  - The new ``push_out`` parameter of the :py:meth:`.dispense` method helps ensure that the pipette dispenses all of its liquid when working with very small volumes.\n  \n  - By default, repeated calls to :py:meth:`.drop_tip` cycle through multiple locations above the trash bin to prevent tips from stacking up.\n  \n- Bug fixes\n\n  - :py:attr:`.InstrumentContext.starting_tip` is now respected on the second and subsequent calls to :py:meth:`.InstrumentContext.pick_up_tip` with no argument.\n\n  \n\nVersion 2.14\n------------\n\nThis version introduces a new protocol runtime that offers more reliable run control\nand builds a strong foundation for future Protocol API improvements.\n\nSeveral older parts of the Protocol API were deprecated as part of this switchover.\nIf you specify an API version of ``2.13`` or lower, your protocols will continue to execute on the old runtime.\n\n- Feature additions\n\n  - :py:meth:`.ProtocolContext.define_liquid` and :py:meth:`.Well.load_liquid` added\n    to define different liquid types and add them to wells, respectively.",
        "start_char_idx": 8742,
        "end_char_idx": 10642,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "41f41352-1116-41d4-9b74-7543016929a3": {
      "__data__": {
        "id_": "41f41352-1116-41d4-9b74-7543016929a3",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "16f4ca63-7781-4c83-9db4-ef0e8fd2a398",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "412a782370fafae5b9debad3b5b23aa01e986402d851033157983853833c2c4b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5",
            "node_type": "1",
            "metadata": {},
            "hash": "340d01a03f965bc3557f5482dc2638d6994056cd807f609d33b87277860fed1a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- By default, repeated calls to :py:meth:`.drop_tip` cycle through multiple locations above the trash bin to prevent tips from stacking up.\n  \n- Bug fixes\n\n  - :py:attr:`.InstrumentContext.starting_tip` is now respected on the second and subsequent calls to :py:meth:`.InstrumentContext.pick_up_tip` with no argument.\n\n  \n\nVersion 2.14\n------------\n\nThis version introduces a new protocol runtime that offers more reliable run control\nand builds a strong foundation for future Protocol API improvements.\n\nSeveral older parts of the Protocol API were deprecated as part of this switchover.\nIf you specify an API version of ``2.13`` or lower, your protocols will continue to execute on the old runtime.\n\n- Feature additions\n\n  - :py:meth:`.ProtocolContext.define_liquid` and :py:meth:`.Well.load_liquid` added\n    to define different liquid types and add them to wells, respectively.\n\n- Bug fixes\n\n  - :py:class:`.Labware` and :py:class:`.Well` now adhere to the protocol's API level setting.\n    Prior to this version, they incorrectly ignored the setting.\n\n  - :py:meth:`.InstrumentContext.touch_tip` will end with the pipette tip in the center of the well\n    instead of on the edge closest to the front of the machine.\n\n  - :py:meth:`.ProtocolContext.load_labware` now prefers loading user-provided labware definitions\n    rather than built-in definitions if no explicit ``namespace`` is specified.\n\n  - :py:meth:`.ProtocolContext.pause` will now properly wait until you resume the protocol before moving on.\n    In previous versions, the run will not pause until the first call to a different ``ProtocolContext`` method.\n\n  - Motion planning has been improved to avoid certain erroneous downward movements,\n    especially when using :py:meth:`.InstrumentContext.aspirate`.\n\n  - :py:meth:`.Labware.reset` and :py:attr:`.Labware.tip_length` will raise useful errors if called on labware that is not a tip rack.\n\n- Removals\n\n  - The ``presses`` and ``increment`` arguments of  :py:meth:`.InstrumentContext.pick_up_tip` were deprecated.",
        "start_char_idx": 9761,
        "end_char_idx": 11796,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5": {
      "__data__": {
        "id_": "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "41f41352-1116-41d4-9b74-7543016929a3",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "61644df86d8c9703a6218d905ccef7f05bebf36564bb83a8ceb01eb2a229202e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a56d8776-1ac1-4e38-b226-c3d520ba66be",
            "node_type": "1",
            "metadata": {},
            "hash": "a57227e157c068e09e8ba36cd6a0e571a15df5a632a353810b8d05c35bdc8070",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- :py:meth:`.ProtocolContext.load_labware` now prefers loading user-provided labware definitions\n    rather than built-in definitions if no explicit ``namespace`` is specified.\n\n  - :py:meth:`.ProtocolContext.pause` will now properly wait until you resume the protocol before moving on.\n    In previous versions, the run will not pause until the first call to a different ``ProtocolContext`` method.\n\n  - Motion planning has been improved to avoid certain erroneous downward movements,\n    especially when using :py:meth:`.InstrumentContext.aspirate`.\n\n  - :py:meth:`.Labware.reset` and :py:attr:`.Labware.tip_length` will raise useful errors if called on labware that is not a tip rack.\n\n- Removals\n\n  - The ``presses`` and ``increment`` arguments of  :py:meth:`.InstrumentContext.pick_up_tip` were deprecated.\n    Configure your pipette pick-up settings with the Opentrons App, instead.\n\n  - ``InstrumentContext.speed`` property was removed.\n    This property tried to allow setting a pipette's **plunger** speed in mm/s.\n    However, it could only approximately set the plunger speed,\n    because the plunger's speed is a stepwise function of the volume.\n    Use :py:attr:`.InstrumentContext.flow_rate` to set the flow rate in uL/s, instead.\n\n  - ``ModuleContext.load_labware_object`` was removed as an unnecessary internal method.\n\n  - ``ModuleContext.geometry`` was removed in favor of\n    :py:attr:`.ModuleContext.model` and :py:attr:`.ModuleContext.type`\n\n  - ``Well.geometry`` was removed as unnecessary.\n\n  - ``MagneticModuleContext.calibrate`` was removed since it was never needed nor implemented.\n\n  - The ``height`` parameter of :py:meth:`.MagneticModuleContext.engage` was removed.\n    Use ``offset`` or ``height_from_base`` instead.\n    \n  - ``Labware.separate_calibration`` and :py:meth:`.Labware.set_calibration` were removed,\n    since they were holdovers from a calibration system that no longer exists.",
        "start_char_idx": 10985,
        "end_char_idx": 12907,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a56d8776-1ac1-4e38-b226-c3d520ba66be": {
      "__data__": {
        "id_": "a56d8776-1ac1-4e38-b226-c3d520ba66be",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "e88ac66fb2e65dc391917db2f7a5a14dc6037ba45f6314cad534f4786febef37",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e4ff673f-243b-42b3-b92d-995b4207cd38",
            "node_type": "1",
            "metadata": {},
            "hash": "1c3522f203b51ecb4aae6f43d1615ef3eb638649460227a6c402a2e9e4b6fa42",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Use :py:attr:`.InstrumentContext.flow_rate` to set the flow rate in uL/s, instead.\n\n  - ``ModuleContext.load_labware_object`` was removed as an unnecessary internal method.\n\n  - ``ModuleContext.geometry`` was removed in favor of\n    :py:attr:`.ModuleContext.model` and :py:attr:`.ModuleContext.type`\n\n  - ``Well.geometry`` was removed as unnecessary.\n\n  - ``MagneticModuleContext.calibrate`` was removed since it was never needed nor implemented.\n\n  - The ``height`` parameter of :py:meth:`.MagneticModuleContext.engage` was removed.\n    Use ``offset`` or ``height_from_base`` instead.\n    \n  - ``Labware.separate_calibration`` and :py:meth:`.Labware.set_calibration` were removed,\n    since they were holdovers from a calibration system that no longer exists.\n\n  - Various methods and setters were removed that could modify tip state outside of\n    calls to :py:meth:`.InstrumentContext.pick_up_tip` and :py:meth:`.InstrumentContext.drop_tip`.\n    This change allows the robot to track tip usage more completely and reliably.\n    You may still use :py:meth:`.Labware.reset` and :py:meth:`.InstrumentContext.reset_tipracks`\n    to reset your tip racks' state.\n\n      - The :py:attr:`.Well.has_tip` **setter** was removed. **The getter is still supported.**\n\n      - Internal methods ``Labware.use_tips``, ``Labware.previous_tip``, and ``Labware.return_tips``\n        were removed.\n\n  - The ``configuration`` argument of :py:meth:`.ProtocolContext.load_module` was removed\n    because it made unsafe modifications to the protocol's geometry system,\n    and the Thermocycler's \"semi\" configuration is not officially supported.\n\n- Known limitations\n\n  - :py:meth:`.Labware.set_offset` is not yet supported on this API version.\n    Run protocols via the Opentrons App, instead.\n\n  - :py:attr:`.ProtocolContext.max_speeds` is not yet supported on the API version.\n    Use :py:attr:`.InstrumentContext.default_speed` or the per-method `speed` argument, instead.",
        "start_char_idx": 12147,
        "end_char_idx": 14102,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e4ff673f-243b-42b3-b92d-995b4207cd38": {
      "__data__": {
        "id_": "e4ff673f-243b-42b3-b92d-995b4207cd38",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a56d8776-1ac1-4e38-b226-c3d520ba66be",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "cc8fa336a6a4734ec36e9e6f16073013919a9d9954fb8db6280b7603c5c4a567",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7855a776-75d8-443d-8d15-d4b46539e636",
            "node_type": "1",
            "metadata": {},
            "hash": "701d3dc8e1af4b749003cd8921cfebbb6dba8ce55067d5552bab5b2f20b7feb4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "- The :py:attr:`.Well.has_tip` **setter** was removed. **The getter is still supported.**\n\n      - Internal methods ``Labware.use_tips``, ``Labware.previous_tip``, and ``Labware.return_tips``\n        were removed.\n\n  - The ``configuration`` argument of :py:meth:`.ProtocolContext.load_module` was removed\n    because it made unsafe modifications to the protocol's geometry system,\n    and the Thermocycler's \"semi\" configuration is not officially supported.\n\n- Known limitations\n\n  - :py:meth:`.Labware.set_offset` is not yet supported on this API version.\n    Run protocols via the Opentrons App, instead.\n\n  - :py:attr:`.ProtocolContext.max_speeds` is not yet supported on the API version.\n    Use :py:attr:`.InstrumentContext.default_speed` or the per-method `speed` argument, instead.\n\n  - :py:attr:`.InstrumentContext.starting_tip` is not respected on the second and subsequent calls to :py:meth:`.InstrumentContext.pick_up_tip` with no argument.\n\n\nVersion 2.13\n------------\n\n- Adds :py:class:`.HeaterShakerContext` to support the Heater-Shaker Module. You can use the load name ``heaterShakerModuleV1`` with :py:meth:`.ProtocolContext.load_module` to add a Heater-Shaker to a protocol.\n- :py:meth:`.InstrumentContext.drop_tip` now has a ``prep_after`` parameter.\n- :py:meth:`.InstrumentContext.home` may home *both* pipettes as needed to avoid collision risks.\n- :py:meth:`.InstrumentContext.aspirate` and :py:meth:`.InstrumentContext.dispense` will avoid interacting directly with modules.\n\n\nVersion 2.12\n------------\n\n- :py:meth:`.ProtocolContext.resume` has been deprecated.\n- :py:meth:`.Labware.set_offset` has been added to apply labware offsets to protocols run (exclusively) outside of the Opentrons App (Jupyter Notebook and SSH).\n\n\nVersion 2.11\n------------\n\n- Attempting to aspirate from or dispense to tip racks will raise an error.",
        "start_char_idx": 13314,
        "end_char_idx": 15163,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7855a776-75d8-443d-8d15-d4b46539e636": {
      "__data__": {
        "id_": "7855a776-75d8-443d-8d15-d4b46539e636",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e4ff673f-243b-42b3-b92d-995b4207cd38",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "bfec91224737e5971c70333e8b53eba50940408b2359b244bf0231f9a5c667ef",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "12a8dfa4-1b29-4fd9-bd6d-946676617fb1",
            "node_type": "1",
            "metadata": {},
            "hash": "29d9d7f6765de44b73fe702dc7a9d2274e465c73c51bf23fc9f3b1f10636b262",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Version 2.12\n------------\n\n- :py:meth:`.ProtocolContext.resume` has been deprecated.\n- :py:meth:`.Labware.set_offset` has been added to apply labware offsets to protocols run (exclusively) outside of the Opentrons App (Jupyter Notebook and SSH).\n\n\nVersion 2.11\n------------\n\n- Attempting to aspirate from or dispense to tip racks will raise an error.\n\n\nVersion 2.10\n------------\n\n- Moving to the same well twice in a row with different pipettes no longer results in strange diagonal movements.\n\n\nVersion 2.9\n-----------\n\n- You can now access certain geometry data regarding a labware's well via a Well Object. See :ref:`new-labware-well-properties` for more information.\n\n\nVersion 2.8\n-----------\n\n- You can now pass in a list of volumes to distribute and consolidate. See :ref:`distribute-consolidate-volume-list` for more information.\n\n  - Passing in a zero volume to any :ref:`complex command <v2-complex-commands>` will result in no actions taken for aspirate or dispense\n\n- :py:meth:`.Well.from_center_cartesian` can be used to find a point within a well using normalized distance from the center in each axis.\n\n  - Note that you will need to create a location object to use this function in a protocol. See :ref:`protocol-api-labware` for more information.\n\n- You can now pass in a blowout location to transfer, distribute, and consolidate\n  with the ``blowout_location`` parameter. See :py:meth:`.InstrumentContext.transfer` for more detail!\n\n\nVersion 2.7\n-----------\n\n- Added :py:meth:`.InstrumentContext.pair_with`, an experimental feature for moving both pipettes simultaneously.\n\n  .. note::\n\n      This feature has been removed from the Python Protocol API.\n\n- Calling :py:meth:`.InstrumentContext.has_tip` will return whether a particular instrument\n  has a tip attached or not.",
        "start_char_idx": 14813,
        "end_char_idx": 16604,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "12a8dfa4-1b29-4fd9-bd6d-946676617fb1": {
      "__data__": {
        "id_": "12a8dfa4-1b29-4fd9-bd6d-946676617fb1",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7855a776-75d8-443d-8d15-d4b46539e636",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "d731bd0bca624774d01e54e32484ee85a315e74b66f5ae70053b6ae7a72fbdf3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "26310357-9e50-45a5-b84a-15dbc3fc6134",
            "node_type": "1",
            "metadata": {},
            "hash": "af04d5cb623da49ca85331e0d19241980e09d8c24877e6a816ab252450f56ca3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Version 2.7\n-----------\n\n- Added :py:meth:`.InstrumentContext.pair_with`, an experimental feature for moving both pipettes simultaneously.\n\n  .. note::\n\n      This feature has been removed from the Python Protocol API.\n\n- Calling :py:meth:`.InstrumentContext.has_tip` will return whether a particular instrument\n  has a tip attached or not.\n\n\nVersion 2.6\n-----------\n\n- GEN2 Single pipettes now default to flow rates equivalent to 10 mm/s plunger\n  speeds\n\n  - Protocols that manually configure pipette flow rates will be unaffected\n\n  - For a comparison between API Versions, see :ref:`ot2-flow-rates`\n\n\nVersion 2.5\n-----------\n\n- New :ref:`utility commands <new-utility-commands>` were added:\n\n  - :py:meth:`.ProtocolContext.set_rail_lights`: turns robot rail lights on or off\n  - :py:obj:`.ProtocolContext.rail_lights_on`: describes whether or not the rail lights are on\n  - :py:obj:`.ProtocolContext.door_closed`: describes whether the robot door is closed\n\n\nVersion 2.4\n-----------\n\n- The following improvements were made to the ``touch_tip`` command:\n\n  - The speed for ``touch_tip`` can now be lowered down to 1 mm/s\n  - ``touch_tip`` no longer moves diagonally from the X direction -> Y direction\n  - Takes into account geometry of the deck and modules\n\n\nVersion 2.3\n-----------\n\n- Magnetic Module GEN2 and Temperature Module GEN2 are now supported; you can load them with the names ``\"magnetic\n  module gen2\"`` and ``\"temperature module gen2\"``, respectively.\n- All pipettes will return tips to tip racks from a higher position to avoid\n  possible collisions.\n- During a :py:meth:`.mix`, the pipette will no longer move up to clear the liquid in\n  between every dispense and following aspirate.\n- You can now access the Temperature Module's status via :py:obj:`.TemperatureModuleContext.status`.",
        "start_char_idx": 16264,
        "end_char_idx": 18068,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "26310357-9e50-45a5-b84a-15dbc3fc6134": {
      "__data__": {
        "id_": "26310357-9e50-45a5-b84a-15dbc3fc6134",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "12a8dfa4-1b29-4fd9-bd6d-946676617fb1",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "61fde645837ff6e0526167ed6e9b65fa75fbf7051ea12245f7e3c61b889a8096",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6cdd0d74-92f8-4532-88ea-c99c48ee099f",
            "node_type": "1",
            "metadata": {},
            "hash": "48a31a43957f8a6989708d626559a1beb13ac472c139b9cc348af4e08efc80af",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Version 2.3\n-----------\n\n- Magnetic Module GEN2 and Temperature Module GEN2 are now supported; you can load them with the names ``\"magnetic\n  module gen2\"`` and ``\"temperature module gen2\"``, respectively.\n- All pipettes will return tips to tip racks from a higher position to avoid\n  possible collisions.\n- During a :py:meth:`.mix`, the pipette will no longer move up to clear the liquid in\n  between every dispense and following aspirate.\n- You can now access the Temperature Module's status via :py:obj:`.TemperatureModuleContext.status`.\n\n\nVersion 2.2\n-----------\n\n- You should now specify Magnetic Module engage height using the\n  ``height_from_base`` parameter, which specifies the height of the top of the\n  magnet from the base of the labware. For more, see :ref:`magnetic-module-engage`.\n- Return tip will now use pre-defined heights from hardware testing. For more information, see :ref:`pipette-return-tip`.\n- When using the return tip function, tips are no longer added back into the tip tracker. For more information, see :ref:`pipette-return-tip`.\n\n\nVersion 2.1\n-----------\n\n- When loading labware onto a module, you can now specify a label with the ``label`` parameter of\n  :py:meth:`.MagneticModuleContext.load_labware`,\n  :py:meth:`.TemperatureModuleContext.load_labware`, or\n  :py:meth:`.ThermocyclerContext.load_labware`,\n  just like you can when loading labware onto the deck with :py:meth:`.ProtocolContext.load_labware`.",
        "start_char_idx": 17527,
        "end_char_idx": 18969,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6cdd0d74-92f8-4532-88ea-c99c48ee099f": {
      "__data__": {
        "id_": "6cdd0d74-92f8-4532-88ea-c99c48ee099f",
        "embedding": null,
        "metadata": {
          "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
          "file_name": "versioning.rst",
          "file_size": 19533,
          "creation_date": "2024-03-26",
          "last_modified_date": "2024-03-26"
        },
        "excluded_embed_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "excluded_llm_metadata_keys": [
          "file_name",
          "file_type",
          "file_size",
          "creation_date",
          "last_modified_date",
          "last_accessed_date"
        ],
        "relationships": {
          "1": {
            "node_id": "7738952f-db3f-4ad9-83b3-e8fb3bef48b5",
            "node_type": "4",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "02e9d3032932c53db853d87834ff0e6a708aa24f1279d09f8e94486c32531fe5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "26310357-9e50-45a5-b84a-15dbc3fc6134",
            "node_type": "1",
            "metadata": {
              "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
              "file_name": "versioning.rst",
              "file_size": 19533,
              "creation_date": "2024-03-26",
              "last_modified_date": "2024-03-26"
            },
            "hash": "19f693bd87472d5ebe8e1d3a79201a33ead7c3de6552142f18a515b27180430b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Version 2.1\n-----------\n\n- When loading labware onto a module, you can now specify a label with the ``label`` parameter of\n  :py:meth:`.MagneticModuleContext.load_labware`,\n  :py:meth:`.TemperatureModuleContext.load_labware`, or\n  :py:meth:`.ThermocyclerContext.load_labware`,\n  just like you can when loading labware onto the deck with :py:meth:`.ProtocolContext.load_labware`.\n\n\nVersion 2.0\n-----------\n\nVersion 2 of the API is a new way to write Python protocols, with support for new modules like the Thermocycler. To transition your protocols from version 1 to version 2 of the API, follow this `migration guide <http://support.opentrons.com/en/articles/3425727-switching-your-protocols-from-api-version-1-to-version-2>`_.\n\nWe've also published a `more in-depth discussion <http://support.opentrons.com/en/articles/3418212-opentrons-protocol-api-version-2>`_ of why we developed version 2 of the API and how it differs from version 1.",
        "start_char_idx": 18591,
        "end_char_idx": 19530,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    }
  },
  "docstore/ref_doc_info": {
    "b809786f-0419-4709-9145-e8157d52ba26": {
      "node_ids": [
        "c8d13647-7ad1-4ab8-84ad-a94970c5f9e9",
        "334035a7-0c1f-4e1f-a86d-4a4cc7ce3219",
        "f62a56d7-421c-448d-8040-45eec0049950",
        "3a432b4f-1d15-4fdb-b22a-60260e79a243",
        "2497c312-b311-4e27-9852-4dfef272acbc"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/adapting_ot2_flex.rst",
        "file_name": "adapting_ot2_flex.rst",
        "file_size": 7048,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "c4ba4595-9ca7-484e-935b-a055614bda66": {
      "node_ids": [
        "d6aaa9bd-e5dc-4388-a265-0eec11f922d7",
        "7462b66d-9ad6-410f-9ceb-ccc834c899a7",
        "75157767-dded-4c39-b43e-88cc72a9bea2",
        "4bc9adf8-6c71-466c-a373-cba39f77d046",
        "4d392551-daf1-4443-abe8-7dac3a5956ef",
        "39a71b21-283f-4275-86b2-ff692afcbea9",
        "a41d9aca-7986-4114-8fd6-07a67f82d394",
        "068888c4-9ad8-48f3-b4cd-1d8bc5fa85c9",
        "2f5fe48d-1d2d-4ce4-a9c5-782b82da36ff"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/liquids.rst",
        "file_name": "liquids.rst",
        "file_size": 10903,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "cd34e14d-a65f-4e21-93f8-c306de702613": {
      "node_ids": [
        "d825183c-f2ad-4af6-bd58-5972857c4e21",
        "0a79d729-0631-4479-a8e9-a660ab1445b3",
        "43b96eaa-5ec1-44d6-94c9-52e885e3cea1",
        "3436c4b5-7ac3-408f-8bca-c14986fead25",
        "ed810bc0-eb72-45d8-90b2-999a60068a2b"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/pipette_tips.rst",
        "file_name": "pipette_tips.rst",
        "file_size": 5966,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "fe616abb-7210-4467-8a8e-869cbc31cb91": {
      "node_ids": [
        "d5868ba2-8879-435c-841a-fe4ecf9e677b",
        "8fcb6784-76ee-4e3d-a540-7140fc8e156f",
        "d3eaac4c-757f-4cf5-a2f7-622a5c1b1572"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/basic_commands/utilities.rst",
        "file_name": "utilities.rst",
        "file_size": 4365,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "f55f850c-bb5d-4c65-8b9c-92f35de143e1": {
      "node_ids": [
        "d79773d0-4aed-4f57-b8d7-c055a16f53e0",
        "1eba341e-d6ca-44a3-928d-d5bfab234753",
        "fe100cbc-74d2-41bf-a40b-70d8170d7b31",
        "3e189d7a-020e-46d1-9904-2e908115d370",
        "0e75adab-8998-455f-b73c-4e13bcb189ab",
        "1e92140d-6f5e-46bb-9a95-f0f06f5746db",
        "43773776-973f-420d-ad88-aef356e711c9",
        "2117b6f5-f483-45bf-ab97-a8379528a517"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/order_operations.rst",
        "file_name": "order_operations.rst",
        "file_size": 8717,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "63e31b90-e708-4b24-89cc-1e383bb9f237": {
      "node_ids": [
        "58074a32-3c79-41fd-b1f4-33e803d124af",
        "a33e930e-3141-491d-bb88-4cc2fde13111",
        "5e5d5c28-e238-485a-88b0-46cea135634e",
        "845f2b9d-770b-4274-9e68-8c56039832e4",
        "cb58775b-b524-407b-b9fc-2ab8eeb52c4c",
        "d6693392-0548-4317-8f58-471434dd9e7c",
        "18dcc255-3559-4715-b452-baedecc77545",
        "bce02060-3326-43af-870e-a03cad701b05",
        "e3dd77e5-4225-4b6f-921e-9db7edc76117",
        "5e75ad71-cc87-4f7b-a6fd-7b3ffeaf8f0e",
        "d195d40c-58be-4647-a367-c03fec0b3b70",
        "85311773-cc40-40c8-9184-15ff45fba6dd",
        "c478cf3b-b4e7-4137-ad84-3ffe0fdb3995"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/parameters.rst",
        "file_name": "parameters.rst",
        "file_size": 15847,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "faed24a6-41f4-4f3b-8fd8-b4944af402ee": {
      "node_ids": [
        "48346ec0-5a70-4849-95c6-46a53791dbda",
        "976ae7a9-20b4-4e58-81e8-7ddcd089b1e7",
        "0655b0e4-6783-4fd6-a9a8-d6eee5b45921",
        "ff1126fb-d585-4ea0-ae6c-bf2f01cd95ef",
        "46c09fcb-d6c5-4ae2-896b-5da8d4fe7180",
        "db03df28-87cf-49a7-8db2-91abd8f871eb",
        "2ff05fc7-9008-4616-a5df-ad82ce3a9f5a",
        "e3dc24c2-7188-4e06-8c16-95b620d60c9c",
        "e3b6f7b2-8b5d-4897-a1fe-a86dee6716f1",
        "c7cc85c8-d045-4646-a3cf-ecb33f0e261b"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/complex_commands/sources_destinations.rst",
        "file_name": "sources_destinations.rst",
        "file_size": 12777,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "61435d27-a0f0-491e-b0ae-21c5a06674fe": {
      "node_ids": [
        "31bffcaa-ca8d-4ffe-890b-a31409513851",
        "08459d71-4c98-469d-a923-2c7913612f4a"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/deck_slots.rst",
        "file_name": "deck_slots.rst",
        "file_size": 2316,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "7cbfe2bf-28e4-4f3b-bc08-030080fe87b6": {
      "node_ids": [
        "2260fb63-9f1d-43ec-b992-7857a3a39610",
        "2537259a-f63b-444c-82c0-039bc9586ed9",
        "8fa8b23f-b3fe-4699-bf32-79fa856199af",
        "ddf7e5b0-98af-4830-9f58-1e4dbc326df8",
        "6672c195-0f1d-407e-9fea-615b357ef033",
        "c7bf92fe-774f-43ce-a757-092e1c88e11d",
        "39e9e7d7-6ecc-4065-a99d-b93be3d88231"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/index.rst",
        "file_name": "index.rst",
        "file_size": 8316,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "2c67dda2-cebc-4bcb-90b0-a136cb824e1c": {
      "node_ids": [
        "9da0aea8-af9c-49a1-97e3-517097b0d6c1",
        "b81ce6cf-58a1-46bd-95ef-7de922157172",
        "739e7a32-21db-4a05-9e76-acd0271cc3d4",
        "b35d6054-3c4a-4bc5-acad-48d3e2306141",
        "09153e46-075d-438f-91f2-2e7537d2f550",
        "f9ca7807-3a62-4021-8141-7967ea91bd1c",
        "ff625083-c29d-4f7a-8a1e-eb5a8ad865a1",
        "0843f367-b0f1-49e1-a25e-38e3df5f4da9",
        "45b5b822-819a-4a0b-a28a-fa937e4aba70",
        "c9440268-ea98-463c-80ca-52fbb14b37a3"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/heater_shaker.rst",
        "file_name": "heater_shaker.rst",
        "file_size": 10980,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "3e618721-6933-4289-8f44-2c3a522560f2": {
      "node_ids": ["b1dfac79-06c5-401c-ac7f-81564dc6e7df"],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_block.rst",
        "file_name": "magnetic_block.rst",
        "file_size": 1580,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "070060f9-be83-493c-bbfd-5213611eb59e": {
      "node_ids": [
        "58503ed9-8447-469f-9d86-49495fbb0874",
        "4e45d12d-0e82-4d54-a423-82057b75c96c",
        "55101789-8dc2-429d-9a8b-d5623c1ba66d",
        "c3a44332-4b51-4967-81e8-369507b503c8",
        "b5e6b215-0d07-4033-8507-9df9bdbf1159"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/magnetic_module.rst",
        "file_name": "magnetic_module.rst",
        "file_size": 5781,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "1a34ddbf-2a84-4b90-a4f8-ac5dcf4e8e9f": {
      "node_ids": [
        "8785c7d6-0d25-45a2-81af-e74acec0b17d",
        "d9344f98-b8dc-44e4-ab86-8c23b7d646cc"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/multiple_same_type.rst",
        "file_name": "multiple_same_type.rst",
        "file_size": 3245,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "04a3a1be-cfc5-4ee6-8f1f-f0c7e2168356": {
      "node_ids": [
        "2bc15fee-b800-42db-8473-d85696cfe92d",
        "cb40370d-5c8f-45ec-8093-73c8448a02fc",
        "807c6ec8-5a3b-4098-82ed-1d4270438790",
        "016d159f-293f-45d9-af26-9be407742d5e",
        "2414e950-98b7-436d-ba18-de3485c35513"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/setup.rst",
        "file_name": "setup.rst",
        "file_size": 7565,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "12e8891c-1c03-4329-81e7-fe1963b9703e": {
      "node_ids": [
        "d545e65f-9b87-41d1-b840-12f95d36c6eb",
        "5491c5ab-7e6e-43e3-821a-8441a9ef7519"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/temperature_module.rst",
        "file_name": "temperature_module.rst",
        "file_size": 3205,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "1ebf80b9-30f3-4f74-a2eb-514c8c89c1ce": {
      "node_ids": [
        "39fa2cd7-0e41-4a29-9563-1bb3b3b115b4",
        "97dc403d-dd4a-4474-9732-5961f25413b0",
        "eb3977da-715c-4778-8726-b82dc5678d6f",
        "5c5e1212-45fe-4164-94d0-7dc6da6510cc",
        "0be2a309-aa0a-4c70-b2d3-90bcc2b728b8",
        "30bea738-adb3-49ce-b4c5-2cb02c62296d"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/modules/thermocycler.rst",
        "file_name": "thermocycler.rst",
        "file_size": 7842,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "5fb5561a-5539-44f8-bb69-6f1462e84132": {
      "node_ids": [
        "6266fa60-fb2c-435a-8b42-9a0728ec7f67",
        "0ca14135-c1e7-48ce-8afe-b260ac093908",
        "e7bbf55c-0555-43f3-ab52-3fc85bba8e54",
        "f1384e4c-89a6-4248-86ec-5530dc41bedc",
        "352ee0d4-25c2-48ae-a7e1-4a83aeb7dae8",
        "b3717357-f19c-4530-bfdd-45b407eecb47"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/moving_labware.rst",
        "file_name": "moving_labware.rst",
        "file_size": 9192,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "fbf5438b-1bca-43d2-a88d-98f97a35f19f": {
      "node_ids": [
        "6b1a2dd7-0ad1-4ba3-b09d-0f0ea0d965e2",
        "1bc7dbe7-c2c2-4cd6-bf80-9d3595170e83",
        "f930b218-26ac-4a55-913f-ebb285f24de0",
        "aafcfcbb-aa48-4403-8cc4-8df9cdfde2f6",
        "640c98cf-9553-49d8-97f4-ad858fb8ed42",
        "956e03d7-630b-4cdf-a595-7396eb2435ab",
        "b2f9388b-55eb-4863-9400-016539f4ecea",
        "63dc5976-0aed-4779-9bd4-11eab2368fd8"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_advanced_running.rst",
        "file_name": "new_advanced_running.rst",
        "file_size": 10099,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "4eee9a38-808d-4205-bfd6-6f102b06fe96": {
      "node_ids": ["ca1fe1fc-dc04-4c76-bb71-cf7f8995edd2"],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_atomic_commands.rst",
        "file_name": "new_atomic_commands.rst",
        "file_size": 1178,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "2955f1f9-17f8-406d-9cfe-4eac441b3162": {
      "node_ids": ["038d0cad-dcfd-42eb-842d-10ceebf9d1c8"],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_complex_commands.rst",
        "file_name": "new_complex_commands.rst",
        "file_size": 1622,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "c4a5fc4c-515a-4d04-913d-fc1585cf035e": {
      "node_ids": [
        "001911ad-fe0d-41d8-8799-743f347e274d",
        "49ca0de0-7091-405d-b0d4-82aaf63f96fb",
        "a571e22f-f6b7-4f59-b77a-75ff196f623f",
        "3679d4e1-6415-4993-80a2-9bb483920080",
        "bf1b101e-c592-487a-a555-ab3968da1332",
        "3adb4f24-f92e-47e1-81fe-cc5fc4dfe903",
        "1f4bfba2-3e5e-4925-89a8-73161cbc762b",
        "ebd8a76d-2377-4ab3-8353-68199c4f82cc",
        "ea58997e-836d-45c6-a5c5-9aea900c68d1",
        "e89492ef-ec34-4846-bccb-77d98bebdea6",
        "a1d75aef-b074-4f53-83f9-9b37bb7cebe0",
        "3eee5d97-4fcf-4f68-b8ae-4a361882f81d",
        "01d0cf15-5368-4755-adef-b598719b3d15",
        "f64f3cfd-812d-4232-9d9b-a3fad6f17d19",
        "0d294764-3db7-4738-8456-a70e444b0210",
        "5a2f200d-58d4-46f9-8e02-ab06be757e72",
        "1dbbe3f3-0fbd-4adb-86ac-4f289df76b27",
        "6811ba89-1843-4937-94f8-6dcfb72d2d0e"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_examples.rst",
        "file_name": "new_examples.rst",
        "file_size": 24201,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "4ec99f77-fecf-482d-8345-9b715b893357": {
      "node_ids": [
        "f96265c5-d43a-4e42-9bd9-350aafc277ab",
        "a1677329-df20-406a-a4a6-05c587756fcf",
        "32ec23f8-e456-4acc-9c38-fa5019e6ec28",
        "ee6324cb-cfa3-4721-974a-db01834600a4",
        "5c74fb88-e897-420e-882b-3945dea9c505",
        "85a82ba3-b051-4df7-ba6e-7a0bcbc27353",
        "d8dd091c-aa13-44d1-938f-a12292d48d95",
        "98320e0a-868d-4352-a07e-071e5897432d",
        "46c5a59c-4489-44df-a1fd-dc958dd937c9",
        "8c101002-338f-44e2-aa49-eea62c29b026",
        "20952efe-090a-45aa-b177-e53ec486e3f1",
        "f7adff25-5877-4d67-a53a-1a54527b2cc6",
        "55164bf4-f736-40f9-9876-a5f6c32c463a",
        "59d8dd96-da6f-49c9-8c16-c219c359561d",
        "eec8cb18-5fef-47f2-8774-3e3d70b92ec5"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_labware.rst",
        "file_name": "new_labware.rst",
        "file_size": 17379,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "675410b2-596e-493b-8b0a-0c3990436dd3": {
      "node_ids": ["12269a25-c023-442d-bd65-064bfae06e67"],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_modules.rst",
        "file_name": "new_modules.rst",
        "file_size": 1791,
        "creation_date": "2024-03-23",
        "last_modified_date": "2024-01-15"
      }
    },
    "f6cbe2f7-19a5-4ef0-b0ad-7117aaf41996": {
      "node_ids": [
        "476220ea-1795-47f7-997b-8eb19792ef78",
        "bbe211a7-04dd-4fea-a58d-54870d8ff0c6",
        "21b34534-9d4e-4e1e-9763-792a8f50b398",
        "97c8cfa5-4e28-4b41-9c5d-bb983c6e30dd",
        "cd4eb7f5-4d7f-4481-9a26-eedc211f89ac",
        "f0bf7748-c987-4c01-9cd8-09a87939938b",
        "3295a522-57b4-4146-a414-09bc00dbc9e7",
        "c409d82d-c6fe-40ac-87aa-8ed494f7e5e2",
        "13afaf92-1e65-43e2-831c-2ecd72c108a2",
        "d7a173a7-0882-41b9-b755-1972cdcf4e78",
        "7477f664-2d4d-4946-93fb-10f0f7c7fe2f",
        "75be21ee-7046-4af4-b9a7-834821f39c3a",
        "11dc6c32-c85d-4ddc-83cb-6a4f25d4d158",
        "d2d18186-43b6-41c4-9c61-81bb3209005c",
        "05d59f98-d186-466e-9a1a-9f5b18b56bce",
        "06557d00-501d-4f76-9ab2-2ce90e7751c3",
        "2776c4fe-b24c-493f-bd44-2c252984cc06",
        "8d4cc9d1-fafb-459a-b65f-7748250ff308"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/new_pipette.rst",
        "file_name": "new_pipette.rst",
        "file_size": 22309,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "4da6c89a-702b-40e4-a46f-cc30b9d24a40": {
      "node_ids": [
        "c695a9b6-67a3-406b-af48-f2d132267861",
        "02af39be-8f80-4e64-8db1-726897aaa0fe",
        "4f5b559d-e60a-4a57-9b99-6c0427112512",
        "dbfad54b-ca37-4852-9162-92cef747df8d",
        "6be5647b-832e-48ae-aa43-e107420df194",
        "16bbd799-fd2f-4b40-b959-54097655bd69",
        "a39df619-be28-4174-bb5b-e63c1079ce09",
        "de5af6d9-781e-4f03-af68-540d4ca5f861",
        "7b56e245-174f-4279-90aa-bed3d7a5bcd1",
        "6c7e15c2-be7e-4a60-848f-becd4b110db7",
        "59ed8eeb-3b36-4e16-84ea-4b2b2f1cb25b"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/robot_position.rst",
        "file_name": "robot_position.rst",
        "file_size": 14278,
        "creation_date": "2024-03-25",
        "last_modified_date": "2024-03-25"
      }
    },
    "ca6eb3b7-7d86-4cd1-858f-5d13ead632da": {
      "node_ids": [
        "c2e151b8-3c71-441d-aa4a-6a7224e94fc8",
        "6aa17a74-053a-443e-b412-66412367f29f",
        "12a7d99c-f347-4b00-b3d1-4d682c7ec1bc",
        "2a902471-31a0-4af2-95fb-633cca7eb7ce",
        "ecec68b7-4d23-4ef0-96cb-96a776280b07",
        "a5c24e0d-dc07-4713-8f8b-adf75906acc0",
        "14706ad3-1f24-48d4-aa97-c543af753a5a",
        "3e0ba986-4ea3-48f8-9c7b-f26519c1e06c",
        "b1879021-4816-447e-bcf2-31cae39f1dc7",
        "9fc6026e-f392-49cc-aea9-7315ef913cf4",
        "fe612ae6-4bae-487d-921f-811daa789dc2",
        "f259fd6c-516e-47cd-8f1c-4d9b51642a5c",
        "fe88bd89-3d04-441b-bcee-67db0c8e3da2",
        "180aaef6-1850-4f67-b268-11396da976f4",
        "f04b18f7-13be-4067-9ed6-b3324f5a06d0",
        "12008c04-5842-43b0-a2eb-3d6fc544a1cf",
        "e8532359-9caa-4ec8-882e-9a1a355de9bc",
        "93cb7706-5e09-4305-8e63-64adc3f8c5ec",
        "1dc50e96-2e03-4a1c-878a-2124b61040aa",
        "9cd00511-baec-412a-b5e7-cecc9b48ab69"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/tutorial.rst",
        "file_name": "tutorial.rst",
        "file_size": 24603,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    },
    "7738952f-db3f-4ad9-83b3-e8fb3bef48b5": {
      "node_ids": [
        "56d01d77-8e38-448c-b416-764d64927354",
        "2caeef28-e32c-4545-b62e-d223747cd700",
        "94899737-e97e-4b3c-b374-4aae60f724be",
        "1fd0c2e4-1e26-4cf6-92e6-d2782ee22ee2",
        "c485d342-3f7f-42fc-acf5-2b16c6305c76",
        "58d991d1-5ea2-42ee-83fb-faf19c4bae58",
        "16f4ca63-7781-4c83-9db4-ef0e8fd2a398",
        "41f41352-1116-41d4-9b74-7543016929a3",
        "b5e17439-c2cf-4ba7-ad3b-f9043036a6d5",
        "a56d8776-1ac1-4e38-b226-c3d520ba66be",
        "e4ff673f-243b-42b3-b92d-995b4207cd38",
        "7855a776-75d8-443d-8d15-d4b46539e636",
        "12a8dfa4-1b29-4fd9-bd6d-946676617fb1",
        "26310357-9e50-45a5-b84a-15dbc3fc6134",
        "6cdd0d74-92f8-4532-88ea-c99c48ee099f"
      ],
      "metadata": {
        "file_path": "/home/alien/work/git/ChatAPI/datasets/v2-1-5/versioning.rst",
        "file_name": "versioning.rst",
        "file_size": 19533,
        "creation_date": "2024-03-26",
        "last_modified_date": "2024-03-26"
      }
    }
  }
}
