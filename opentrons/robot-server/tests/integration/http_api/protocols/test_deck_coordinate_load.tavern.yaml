test_name: Upload, analyze, and confirm correctness of loading via deck coordinate names

marks:
  - ot3_only
  - usefixtures:
      - ot3_server_base_url
stages:
  - name: Upload deck_coordinate_load protocol
    request:
      url: '{ot3_server_base_url}/protocols'
      method: POST
      files:
        files: 'tests/integration/protocols/deck_coordinate_load.py'
    response:
      save:
        json:
          protocol_id: data.id
          analysis_id: data.analysisSummaries[0].id
      status_code: 201
      json:
        data:
          id: !anystr
          protocolType: python
          files:
            - name: deck_coordinate_load.py
              role: main
          createdAt: !re_fullmatch "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+(Z|([+-]\\d{2}:\\d{2}))"
          robotType: OT-3 Standard
          protocolKind: standard
          metadata:
            protocolName: Deck Coordinate PAPIv2 Test
          analyses: []
          analysisSummaries:
            - id: !anystr
              status: pending
              runTimeParameters: []
  - name: Retry until analyses status is completed and result is ok.
    max_retries: 10
    delay_after: 0.1
    request:
      url: '{ot3_server_base_url}/protocols/{protocol_id}/analyses'
      method: GET
    response:
      strict:
        - json:off
      status_code: 200
      json:
        data:
          - id: '{analysis_id}'
            status: completed
            result: ok
  # TODO(jbl 2023-04-25) When returning deck coordinates is implemented, check output here
