test_name: temperatureModuleV1 standalone commands

marks:
  - usefixtures:
      - ot2_server_base_url

stages:
  - name: Get tempModule id
    request:
      url: '{ot2_server_base_url}/modules'
      method: GET
    response:
      status_code: 200
      save:
        $ext:
          function: 'tests.integration.fixtures:get_module_id'
          extra_kwargs:
            module_model: temperatureModuleV1
  - name: issue temperatureModule/setTargetTemperature Command
    request:
      url: '{ot2_server_base_url}/commands'
      method: POST
      params: # on simulations will return immediately
        waitUntilComplete: true
      json:
        data:
          commandType: 'temperatureModule/setTargetTemperature'
          params:
            moduleId: '{temperatureModuleV1_id}'
            celsius: 28
    response:
      strict:
        - json:off
      status_code: 201
      json:
        data:
          status: succeeded
      save:
        json:
          command_id_set_temp: data.id
  - name: issue temperatureModule/setTargetTemperature Command with error
    request:
      url: '{ot2_server_base_url}/commands'
      method: POST
      params:
        waitUntilComplete: true
      json:
        data:
          commandType: 'temperatureModule/setTargetTemperature'
          params:
            moduleId: '{temperatureModuleV1_id}'
            celsius: 100
    response:
      strict:
        - json:off
      status_code: 201
      json:
        data:
          commandType: temperatureModule/setTargetTemperature
          status: failed
          params:
            moduleId: '{temperatureModuleV1_id}'
            celsius: 100
          error:
            errorType: InvalidTargetTemperatureError
            detail: "Temperature module got an invalid temperature 100.0 \u00b0C. Valid range is TemperatureRange(min=-9, max=99)."
      save:
        json:
          command_id_set_temp_error: data.id
  - name: issue temperatureModule/deactivate Command
    request:
      url: '{ot2_server_base_url}/commands'
      method: POST
      params:
        waitUntilComplete: true
      json:
        data:
          commandType: 'temperatureModule/deactivate'
          params:
            moduleId: '{temperatureModuleV1_id}'
    response:
      strict:
        - json:off
      status_code: 201
      json:
        data:
          status: succeeded
      save:
        json:
          command_id_deactivate: data.id
  - name: Get command by id
    request:
      url: '{ot2_server_base_url}/commands/{command_id_set_temp}'
      method: GET
    response:
      strict:
        - json:off
      status_code: 200
      json:
        data:
          id: '{command_id_set_temp}'
          status: succeeded
  - name: Get commands
    request:
      url: '{ot2_server_base_url}/commands'
      method: GET
    response:
      strict:
        - json:off
      status_code: 200
      json:
        data: # order is enforced on this check!
          - id: '{command_id_set_temp}'
          - id: '{command_id_set_temp_error}'
          - id: '{command_id_deactivate}'
  - name: Create Empty Run
    request:
      url: '{ot2_server_base_url}/runs'
      json:
        data: {}
      method: POST
    response:
      strict:
        - json:off
      status_code: 201
      json:
        data:
          id: !anystr
          status: idle
          current: true
      save:
        json:
          run_id: data.id
  - name: issue temperatureModule/setTargetTemperature Command
    request:
      url: '{ot2_server_base_url}/commands'
      method: POST
      params:
        waitUntilComplete: true
      json:
        data:
          commandType: temperatureModule/setTargetTemperature
          params:
            moduleId: '{temperatureModuleV1_id}'
            celsius: 55
    response:
      strict:
        - json:off
      status_code: 201
      json:
        data:
          status: succeeded
